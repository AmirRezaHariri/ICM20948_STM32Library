
ICM20948_STM32Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008eec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003978  08008ffc  08008ffc  00018ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c974  0800c974  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800c974  0800c974  0001c974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c97c  0800c97c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c97c  0800c97c  0001c97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c980  0800c980  0001c980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800c984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  0800c9f4  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  0800c9f4  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133f2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc3  00000000  00000000  0003348b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  00035450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  00036098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bc6  00000000  00000000  00036c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e172  00000000  00000000  0005081e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dbb1  00000000  00000000  0005e990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec541  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000396c  00000000  00000000  000ec594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08008fe4 	.word	0x08008fe4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08008fe4 	.word	0x08008fe4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmpun>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	d102      	bne.n	8001084 <__aeabi_fcmpun+0x14>
 800107e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001082:	d108      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001084:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001088:	d102      	bne.n	8001090 <__aeabi_fcmpun+0x20>
 800108a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108e:	d102      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001090:	f04f 0000 	mov.w	r0, #0
 8001094:	4770      	bx	lr
 8001096:	f04f 0001 	mov.w	r0, #1
 800109a:	4770      	bx	lr

0800109c <__aeabi_uldivmod>:
 800109c:	b953      	cbnz	r3, 80010b4 <__aeabi_uldivmod+0x18>
 800109e:	b94a      	cbnz	r2, 80010b4 <__aeabi_uldivmod+0x18>
 80010a0:	2900      	cmp	r1, #0
 80010a2:	bf08      	it	eq
 80010a4:	2800      	cmpeq	r0, #0
 80010a6:	bf1c      	itt	ne
 80010a8:	f04f 31ff 	movne.w	r1, #4294967295
 80010ac:	f04f 30ff 	movne.w	r0, #4294967295
 80010b0:	f000 b96e 	b.w	8001390 <__aeabi_idiv0>
 80010b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80010b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010bc:	f000 f806 	bl	80010cc <__udivmoddi4>
 80010c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010c8:	b004      	add	sp, #16
 80010ca:	4770      	bx	lr

080010cc <__udivmoddi4>:
 80010cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d0:	9e08      	ldr	r6, [sp, #32]
 80010d2:	460d      	mov	r5, r1
 80010d4:	4604      	mov	r4, r0
 80010d6:	468e      	mov	lr, r1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f040 8083 	bne.w	80011e4 <__udivmoddi4+0x118>
 80010de:	428a      	cmp	r2, r1
 80010e0:	4617      	mov	r7, r2
 80010e2:	d947      	bls.n	8001174 <__udivmoddi4+0xa8>
 80010e4:	fab2 f382 	clz	r3, r2
 80010e8:	b14b      	cbz	r3, 80010fe <__udivmoddi4+0x32>
 80010ea:	f1c3 0120 	rsb	r1, r3, #32
 80010ee:	fa05 fe03 	lsl.w	lr, r5, r3
 80010f2:	fa20 f101 	lsr.w	r1, r0, r1
 80010f6:	409f      	lsls	r7, r3
 80010f8:	ea41 0e0e 	orr.w	lr, r1, lr
 80010fc:	409c      	lsls	r4, r3
 80010fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001102:	fbbe fcf8 	udiv	ip, lr, r8
 8001106:	fa1f f987 	uxth.w	r9, r7
 800110a:	fb08 e21c 	mls	r2, r8, ip, lr
 800110e:	fb0c f009 	mul.w	r0, ip, r9
 8001112:	0c21      	lsrs	r1, r4, #16
 8001114:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001118:	4290      	cmp	r0, r2
 800111a:	d90a      	bls.n	8001132 <__udivmoddi4+0x66>
 800111c:	18ba      	adds	r2, r7, r2
 800111e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001122:	f080 8118 	bcs.w	8001356 <__udivmoddi4+0x28a>
 8001126:	4290      	cmp	r0, r2
 8001128:	f240 8115 	bls.w	8001356 <__udivmoddi4+0x28a>
 800112c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001130:	443a      	add	r2, r7
 8001132:	1a12      	subs	r2, r2, r0
 8001134:	fbb2 f0f8 	udiv	r0, r2, r8
 8001138:	fb08 2210 	mls	r2, r8, r0, r2
 800113c:	fb00 f109 	mul.w	r1, r0, r9
 8001140:	b2a4      	uxth	r4, r4
 8001142:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001146:	42a1      	cmp	r1, r4
 8001148:	d909      	bls.n	800115e <__udivmoddi4+0x92>
 800114a:	193c      	adds	r4, r7, r4
 800114c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001150:	f080 8103 	bcs.w	800135a <__udivmoddi4+0x28e>
 8001154:	42a1      	cmp	r1, r4
 8001156:	f240 8100 	bls.w	800135a <__udivmoddi4+0x28e>
 800115a:	3802      	subs	r0, #2
 800115c:	443c      	add	r4, r7
 800115e:	1a64      	subs	r4, r4, r1
 8001160:	2100      	movs	r1, #0
 8001162:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001166:	b11e      	cbz	r6, 8001170 <__udivmoddi4+0xa4>
 8001168:	2200      	movs	r2, #0
 800116a:	40dc      	lsrs	r4, r3
 800116c:	e9c6 4200 	strd	r4, r2, [r6]
 8001170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001174:	b902      	cbnz	r2, 8001178 <__udivmoddi4+0xac>
 8001176:	deff      	udf	#255	; 0xff
 8001178:	fab2 f382 	clz	r3, r2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d14f      	bne.n	8001220 <__udivmoddi4+0x154>
 8001180:	1a8d      	subs	r5, r1, r2
 8001182:	2101      	movs	r1, #1
 8001184:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001188:	fa1f f882 	uxth.w	r8, r2
 800118c:	fbb5 fcfe 	udiv	ip, r5, lr
 8001190:	fb0e 551c 	mls	r5, lr, ip, r5
 8001194:	fb08 f00c 	mul.w	r0, r8, ip
 8001198:	0c22      	lsrs	r2, r4, #16
 800119a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800119e:	42a8      	cmp	r0, r5
 80011a0:	d907      	bls.n	80011b2 <__udivmoddi4+0xe6>
 80011a2:	197d      	adds	r5, r7, r5
 80011a4:	f10c 32ff 	add.w	r2, ip, #4294967295
 80011a8:	d202      	bcs.n	80011b0 <__udivmoddi4+0xe4>
 80011aa:	42a8      	cmp	r0, r5
 80011ac:	f200 80e9 	bhi.w	8001382 <__udivmoddi4+0x2b6>
 80011b0:	4694      	mov	ip, r2
 80011b2:	1a2d      	subs	r5, r5, r0
 80011b4:	fbb5 f0fe 	udiv	r0, r5, lr
 80011b8:	fb0e 5510 	mls	r5, lr, r0, r5
 80011bc:	fb08 f800 	mul.w	r8, r8, r0
 80011c0:	b2a4      	uxth	r4, r4
 80011c2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80011c6:	45a0      	cmp	r8, r4
 80011c8:	d907      	bls.n	80011da <__udivmoddi4+0x10e>
 80011ca:	193c      	adds	r4, r7, r4
 80011cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80011d0:	d202      	bcs.n	80011d8 <__udivmoddi4+0x10c>
 80011d2:	45a0      	cmp	r8, r4
 80011d4:	f200 80d9 	bhi.w	800138a <__udivmoddi4+0x2be>
 80011d8:	4610      	mov	r0, r2
 80011da:	eba4 0408 	sub.w	r4, r4, r8
 80011de:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80011e2:	e7c0      	b.n	8001166 <__udivmoddi4+0x9a>
 80011e4:	428b      	cmp	r3, r1
 80011e6:	d908      	bls.n	80011fa <__udivmoddi4+0x12e>
 80011e8:	2e00      	cmp	r6, #0
 80011ea:	f000 80b1 	beq.w	8001350 <__udivmoddi4+0x284>
 80011ee:	2100      	movs	r1, #0
 80011f0:	e9c6 0500 	strd	r0, r5, [r6]
 80011f4:	4608      	mov	r0, r1
 80011f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011fa:	fab3 f183 	clz	r1, r3
 80011fe:	2900      	cmp	r1, #0
 8001200:	d14b      	bne.n	800129a <__udivmoddi4+0x1ce>
 8001202:	42ab      	cmp	r3, r5
 8001204:	d302      	bcc.n	800120c <__udivmoddi4+0x140>
 8001206:	4282      	cmp	r2, r0
 8001208:	f200 80b9 	bhi.w	800137e <__udivmoddi4+0x2b2>
 800120c:	1a84      	subs	r4, r0, r2
 800120e:	eb65 0303 	sbc.w	r3, r5, r3
 8001212:	2001      	movs	r0, #1
 8001214:	469e      	mov	lr, r3
 8001216:	2e00      	cmp	r6, #0
 8001218:	d0aa      	beq.n	8001170 <__udivmoddi4+0xa4>
 800121a:	e9c6 4e00 	strd	r4, lr, [r6]
 800121e:	e7a7      	b.n	8001170 <__udivmoddi4+0xa4>
 8001220:	409f      	lsls	r7, r3
 8001222:	f1c3 0220 	rsb	r2, r3, #32
 8001226:	40d1      	lsrs	r1, r2
 8001228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800122c:	fbb1 f0fe 	udiv	r0, r1, lr
 8001230:	fa1f f887 	uxth.w	r8, r7
 8001234:	fb0e 1110 	mls	r1, lr, r0, r1
 8001238:	fa24 f202 	lsr.w	r2, r4, r2
 800123c:	409d      	lsls	r5, r3
 800123e:	fb00 fc08 	mul.w	ip, r0, r8
 8001242:	432a      	orrs	r2, r5
 8001244:	0c15      	lsrs	r5, r2, #16
 8001246:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800124a:	45ac      	cmp	ip, r5
 800124c:	fa04 f403 	lsl.w	r4, r4, r3
 8001250:	d909      	bls.n	8001266 <__udivmoddi4+0x19a>
 8001252:	197d      	adds	r5, r7, r5
 8001254:	f100 31ff 	add.w	r1, r0, #4294967295
 8001258:	f080 808f 	bcs.w	800137a <__udivmoddi4+0x2ae>
 800125c:	45ac      	cmp	ip, r5
 800125e:	f240 808c 	bls.w	800137a <__udivmoddi4+0x2ae>
 8001262:	3802      	subs	r0, #2
 8001264:	443d      	add	r5, r7
 8001266:	eba5 050c 	sub.w	r5, r5, ip
 800126a:	fbb5 f1fe 	udiv	r1, r5, lr
 800126e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001272:	fb01 f908 	mul.w	r9, r1, r8
 8001276:	b295      	uxth	r5, r2
 8001278:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800127c:	45a9      	cmp	r9, r5
 800127e:	d907      	bls.n	8001290 <__udivmoddi4+0x1c4>
 8001280:	197d      	adds	r5, r7, r5
 8001282:	f101 32ff 	add.w	r2, r1, #4294967295
 8001286:	d274      	bcs.n	8001372 <__udivmoddi4+0x2a6>
 8001288:	45a9      	cmp	r9, r5
 800128a:	d972      	bls.n	8001372 <__udivmoddi4+0x2a6>
 800128c:	3902      	subs	r1, #2
 800128e:	443d      	add	r5, r7
 8001290:	eba5 0509 	sub.w	r5, r5, r9
 8001294:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001298:	e778      	b.n	800118c <__udivmoddi4+0xc0>
 800129a:	f1c1 0720 	rsb	r7, r1, #32
 800129e:	408b      	lsls	r3, r1
 80012a0:	fa22 fc07 	lsr.w	ip, r2, r7
 80012a4:	ea4c 0c03 	orr.w	ip, ip, r3
 80012a8:	fa25 f407 	lsr.w	r4, r5, r7
 80012ac:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80012b0:	fbb4 f9fe 	udiv	r9, r4, lr
 80012b4:	fa1f f88c 	uxth.w	r8, ip
 80012b8:	fb0e 4419 	mls	r4, lr, r9, r4
 80012bc:	fa20 f307 	lsr.w	r3, r0, r7
 80012c0:	fb09 fa08 	mul.w	sl, r9, r8
 80012c4:	408d      	lsls	r5, r1
 80012c6:	431d      	orrs	r5, r3
 80012c8:	0c2b      	lsrs	r3, r5, #16
 80012ca:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80012ce:	45a2      	cmp	sl, r4
 80012d0:	fa02 f201 	lsl.w	r2, r2, r1
 80012d4:	fa00 f301 	lsl.w	r3, r0, r1
 80012d8:	d909      	bls.n	80012ee <__udivmoddi4+0x222>
 80012da:	eb1c 0404 	adds.w	r4, ip, r4
 80012de:	f109 30ff 	add.w	r0, r9, #4294967295
 80012e2:	d248      	bcs.n	8001376 <__udivmoddi4+0x2aa>
 80012e4:	45a2      	cmp	sl, r4
 80012e6:	d946      	bls.n	8001376 <__udivmoddi4+0x2aa>
 80012e8:	f1a9 0902 	sub.w	r9, r9, #2
 80012ec:	4464      	add	r4, ip
 80012ee:	eba4 040a 	sub.w	r4, r4, sl
 80012f2:	fbb4 f0fe 	udiv	r0, r4, lr
 80012f6:	fb0e 4410 	mls	r4, lr, r0, r4
 80012fa:	fb00 fa08 	mul.w	sl, r0, r8
 80012fe:	b2ad      	uxth	r5, r5
 8001300:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001304:	45a2      	cmp	sl, r4
 8001306:	d908      	bls.n	800131a <__udivmoddi4+0x24e>
 8001308:	eb1c 0404 	adds.w	r4, ip, r4
 800130c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001310:	d22d      	bcs.n	800136e <__udivmoddi4+0x2a2>
 8001312:	45a2      	cmp	sl, r4
 8001314:	d92b      	bls.n	800136e <__udivmoddi4+0x2a2>
 8001316:	3802      	subs	r0, #2
 8001318:	4464      	add	r4, ip
 800131a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800131e:	fba0 8902 	umull	r8, r9, r0, r2
 8001322:	eba4 040a 	sub.w	r4, r4, sl
 8001326:	454c      	cmp	r4, r9
 8001328:	46c6      	mov	lr, r8
 800132a:	464d      	mov	r5, r9
 800132c:	d319      	bcc.n	8001362 <__udivmoddi4+0x296>
 800132e:	d016      	beq.n	800135e <__udivmoddi4+0x292>
 8001330:	b15e      	cbz	r6, 800134a <__udivmoddi4+0x27e>
 8001332:	ebb3 020e 	subs.w	r2, r3, lr
 8001336:	eb64 0405 	sbc.w	r4, r4, r5
 800133a:	fa04 f707 	lsl.w	r7, r4, r7
 800133e:	fa22 f301 	lsr.w	r3, r2, r1
 8001342:	431f      	orrs	r7, r3
 8001344:	40cc      	lsrs	r4, r1
 8001346:	e9c6 7400 	strd	r7, r4, [r6]
 800134a:	2100      	movs	r1, #0
 800134c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001350:	4631      	mov	r1, r6
 8001352:	4630      	mov	r0, r6
 8001354:	e70c      	b.n	8001170 <__udivmoddi4+0xa4>
 8001356:	468c      	mov	ip, r1
 8001358:	e6eb      	b.n	8001132 <__udivmoddi4+0x66>
 800135a:	4610      	mov	r0, r2
 800135c:	e6ff      	b.n	800115e <__udivmoddi4+0x92>
 800135e:	4543      	cmp	r3, r8
 8001360:	d2e6      	bcs.n	8001330 <__udivmoddi4+0x264>
 8001362:	ebb8 0e02 	subs.w	lr, r8, r2
 8001366:	eb69 050c 	sbc.w	r5, r9, ip
 800136a:	3801      	subs	r0, #1
 800136c:	e7e0      	b.n	8001330 <__udivmoddi4+0x264>
 800136e:	4628      	mov	r0, r5
 8001370:	e7d3      	b.n	800131a <__udivmoddi4+0x24e>
 8001372:	4611      	mov	r1, r2
 8001374:	e78c      	b.n	8001290 <__udivmoddi4+0x1c4>
 8001376:	4681      	mov	r9, r0
 8001378:	e7b9      	b.n	80012ee <__udivmoddi4+0x222>
 800137a:	4608      	mov	r0, r1
 800137c:	e773      	b.n	8001266 <__udivmoddi4+0x19a>
 800137e:	4608      	mov	r0, r1
 8001380:	e749      	b.n	8001216 <__udivmoddi4+0x14a>
 8001382:	f1ac 0c02 	sub.w	ip, ip, #2
 8001386:	443d      	add	r5, r7
 8001388:	e713      	b.n	80011b2 <__udivmoddi4+0xe6>
 800138a:	3802      	subs	r0, #2
 800138c:	443c      	add	r4, r7
 800138e:	e724      	b.n	80011da <__udivmoddi4+0x10e>

08001390 <__aeabi_idiv0>:
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop

08001394 <_ZN9ICM_20948C1Ev>:
ICM_20948_Status_e ICM_20948_read_I2C(uint8_t reg, uint8_t *buff, uint32_t len, void *user);
ICM_20948_Status_e ICM_20948_write_SPI(uint8_t reg, uint8_t *buff, uint32_t len, void *user);
ICM_20948_Status_e ICM_20948_read_SPI(uint8_t reg, uint8_t *buff, uint32_t len, void *user);

// Base
ICM_20948::ICM_20948()
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	220a      	movs	r2, #10
 80013a6:	705a      	strb	r2, [r3, #1]
{
  status = ICM_20948_init_struct(&_device);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3304      	adds	r3, #4
 80013ac:	4618      	mov	r0, r3
 80013ae:	f001 fa6e 	bl	800288e <ICM_20948_init_struct>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_ZN9ICM_209487setBankEh>:
  return "None";
}

// Device Level
ICM_20948_Status_e ICM_20948::setBank(uint8_t bank)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	460b      	mov	r3, r1
 80013d0:	70fb      	strb	r3, [r7, #3]
  status = ICM_20948_set_bank(&_device, bank);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3304      	adds	r3, #4
 80013d6:	78fa      	ldrb	r2, [r7, #3]
 80013d8:	4611      	mov	r1, r2
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 fbfc 	bl	8002bd8 <ICM_20948_set_bank>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461a      	mov	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  return status;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <_ZN9ICM_209487swResetEv>:

ICM_20948_Status_e ICM_20948::swReset(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  status = ICM_20948_sw_reset(&_device);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3304      	adds	r3, #4
 8001404:	4618      	mov	r0, r3
 8001406:	f001 fc0e 	bl	8002c26 <ICM_20948_sw_reset>
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  return status;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <_ZN9ICM_209485sleepEb>:

ICM_20948_Status_e ICM_20948::sleep(bool on)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	70fb      	strb	r3, [r7, #3]
  status = ICM_20948_sleep(&_device, on);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3304      	adds	r3, #4
 8001432:	78fa      	ldrb	r2, [r7, #3]
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f001 fc24 	bl	8002c84 <ICM_20948_sleep>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  return status;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <_ZN9ICM_209488lowPowerEb>:

ICM_20948_Status_e ICM_20948::lowPower(bool on)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	70fb      	strb	r3, [r7, #3]
  status = ICM_20948_low_power(&_device, on);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3304      	adds	r3, #4
 8001464:	78fa      	ldrb	r2, [r7, #3]
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f001 fc44 	bl	8002cf6 <ICM_20948_low_power>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  return status;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <_ZN9ICM_2094814setClockSourceE29ICM_20948_PWR_MGMT_1_CLKSEL_e>:

ICM_20948_Status_e ICM_20948::setClockSource(ICM_20948_PWR_MGMT_1_CLKSEL_e source)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	70fb      	strb	r3, [r7, #3]
  status = ICM_20948_set_clock_source(&_device, source);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3304      	adds	r3, #4
 8001496:	78fa      	ldrb	r2, [r7, #3]
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f001 fc64 	bl	8002d68 <ICM_20948_set_clock_source>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  return status;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <_ZN9ICM_209487checkIDEv>:

ICM_20948_Status_e ICM_20948::checkID(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  status = ICM_20948_check_id(&_device);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3304      	adds	r3, #4
 80014c4:	4618      	mov	r0, r3
 80014c6:	f001 fc9d 	bl	8002e04 <ICM_20948_check_id>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  {
//    debugPrint(F("ICM_20948::checkID: ICM_20948_check_id returned: "));
//    debugPrintStatus(status);
//    debugPrintln(F(""));
  }
  return status;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_ZN9ICM_2094813setSampleModeEhh>:
  return false;
}

// Internal Sensor Options
ICM_20948_Status_e ICM_20948::setSampleMode(uint8_t sensor_id_bm, uint8_t lp_config_cycle_mode)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	460b      	mov	r3, r1
 80014ec:	70fb      	strb	r3, [r7, #3]
 80014ee:	4613      	mov	r3, r2
 80014f0:	70bb      	strb	r3, [r7, #2]
  status = ICM_20948_set_sample_mode(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, (ICM_20948_LP_CONFIG_CYCLE_e)lp_config_cycle_mode);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3304      	adds	r3, #4
 80014f6:	78ba      	ldrb	r2, [r7, #2]
 80014f8:	78f9      	ldrb	r1, [r7, #3]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f001 fe5c 	bl	80031b8 <ICM_20948_set_sample_mode>
 8001500:	4603      	mov	r3, r0
 8001502:	461a      	mov	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  delay(1); // Give the ICM20948 time to change the sample mode (see issue #8)
 800150a:	2001      	movs	r0, #1
 800150c:	f005 f822 	bl	8006554 <HAL_Delay>
  return status;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <_ZN9ICM_2094812setFullScaleEh15ICM_20948_fss_t>:

ICM_20948_Status_e ICM_20948::setFullScale(uint8_t sensor_id_bm, ICM_20948_fss_t fss)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	460b      	mov	r3, r1
 8001528:	703a      	strb	r2, [r7, #0]
 800152a:	70fb      	strb	r3, [r7, #3]
  status = ICM_20948_set_full_scale(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, fss);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3304      	adds	r3, #4
 8001530:	78f9      	ldrb	r1, [r7, #3]
 8001532:	783a      	ldrb	r2, [r7, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f001 fede 	bl	80032f6 <ICM_20948_set_full_scale>
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  return status;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <_ZN9ICM_2094810setDLPFcfgEh18ICM_20948_dlpcfg_t>:

ICM_20948_Status_e ICM_20948::setDLPFcfg(uint8_t sensor_id_bm, ICM_20948_dlpcfg_t cfg)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b084      	sub	sp, #16
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	460b      	mov	r3, r1
 800155c:	80ba      	strh	r2, [r7, #4]
 800155e:	72fb      	strb	r3, [r7, #11]
  status = ICM_20948_set_dlpf_cfg(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, cfg);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3304      	adds	r3, #4
 8001564:	7af9      	ldrb	r1, [r7, #11]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	4618      	mov	r0, r3
 800156a:	f001 ff69 	bl	8003440 <ICM_20948_set_dlpf_cfg>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  return status;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <_ZN9ICM_2094810enableDLPFEhb>:

ICM_20948_Status_e ICM_20948::enableDLPF(uint8_t sensor_id_bm, bool enable)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	460b      	mov	r3, r1
 8001590:	70fb      	strb	r3, [r7, #3]
 8001592:	4613      	mov	r3, r2
 8001594:	70bb      	strb	r3, [r7, #2]
  status = ICM_20948_enable_dlpf(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, enable);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3304      	adds	r3, #4
 800159a:	78ba      	ldrb	r2, [r7, #2]
 800159c:	78f9      	ldrb	r1, [r7, #3]
 800159e:	4618      	mov	r0, r3
 80015a0:	f001 ffef 	bl	8003582 <ICM_20948_enable_dlpf>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  return status;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <_ZN9ICM_2094813setSampleRateEh18ICM_20948_smplrt_t>:

ICM_20948_Status_e ICM_20948::setSampleRate(uint8_t sensor_id_bm, ICM_20948_smplrt_t smplrt)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	460b      	mov	r3, r1
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	72fb      	strb	r3, [r7, #11]
  status = ICM_20948_set_sample_rate(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, smplrt);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3304      	adds	r3, #4
 80015ce:	7af9      	ldrb	r1, [r7, #11]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 f897 	bl	8003706 <ICM_20948_set_sample_rate>
 80015d8:	4603      	mov	r3, r0
 80015da:	461a      	mov	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  return status;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <_ZN9ICM_2094821intEnableRawDataReadyEb>:
  }
  return status;
}

ICM_20948_Status_e ICM_20948::intEnableRawDataReady(bool enable)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	70fb      	strb	r3, [r7, #3]
  ICM_20948_INT_enable_t en;                          // storage
  status = ICM_20948_int_enable(&_device, NULL, &en); // read phase
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3304      	adds	r3, #4
 8001600:	f107 020c 	add.w	r2, r7, #12
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f001 fc1b 	bl	8002e42 <ICM_20948_int_enable>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  if (status != ICM_20948_Stat_Ok)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <_ZN9ICM_2094821intEnableRawDataReadyEb+0x38>
  {
    return status;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001626:	e02d      	b.n	8001684 <_ZN9ICM_2094821intEnableRawDataReadyEb+0x94>
  }
  en.RAW_DATA_0_RDY_EN = enable;                     // change the setting
 8001628:	7b3b      	ldrb	r3, [r7, #12]
 800162a:	78fa      	ldrb	r2, [r7, #3]
 800162c:	f362 1345 	bfi	r3, r2, #5, #1
 8001630:	733b      	strb	r3, [r7, #12]
  status = ICM_20948_int_enable(&_device, &en, &en); // write phase w/ readback
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3304      	adds	r3, #4
 8001636:	f107 020c 	add.w	r2, r7, #12
 800163a:	f107 010c 	add.w	r1, r7, #12
 800163e:	4618      	mov	r0, r3
 8001640:	f001 fbff 	bl	8002e42 <ICM_20948_int_enable>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  if (status != ICM_20948_Stat_Ok)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <_ZN9ICM_2094821intEnableRawDataReadyEb+0x70>
  {
    return status;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800165e:	e011      	b.n	8001684 <_ZN9ICM_2094821intEnableRawDataReadyEb+0x94>
  }
  if (en.RAW_DATA_0_RDY_EN != enable)
 8001660:	7b3b      	ldrb	r3, [r7, #12]
 8001662:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001666:	b2db      	uxtb	r3, r3
 8001668:	78fa      	ldrb	r2, [r7, #3]
 800166a:	429a      	cmp	r2, r3
 800166c:	d007      	beq.n	800167e <_ZN9ICM_2094821intEnableRawDataReadyEb+0x8e>
  {
    status = ICM_20948_Stat_Err;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return status;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800167c:	e002      	b.n	8001684 <_ZN9ICM_2094821intEnableRawDataReadyEb+0x94>
  }
  return status;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <_ZN9ICM_2094820i2cMasterPassthroughEb>:
  return status;
}

// Interface Options
ICM_20948_Status_e ICM_20948::i2cMasterPassthrough(bool passthrough)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	70fb      	strb	r3, [r7, #3]
  status = ICM_20948_i2c_master_passthrough(&_device, passthrough);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3304      	adds	r3, #4
 800169c:	78fa      	ldrb	r2, [r7, #3]
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f002 f88c 	bl	80037be <ICM_20948_i2c_master_passthrough>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461a      	mov	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  return status;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <_ZN9ICM_2094815i2cMasterEnableEb>:

ICM_20948_Status_e ICM_20948::i2cMasterEnable(bool enable)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	460b      	mov	r3, r1
 80016c8:	70fb      	strb	r3, [r7, #3]
  status = ICM_20948_i2c_master_enable(&_device, enable);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3304      	adds	r3, #4
 80016ce:	78fa      	ldrb	r2, [r7, #3]
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f002 f8ac 	bl	8003830 <ICM_20948_i2c_master_enable>
 80016d8:	4603      	mov	r3, r0
 80016da:	461a      	mov	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  return status;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_ZN9ICM_2094814i2cMasterResetEv>:

ICM_20948_Status_e ICM_20948::i2cMasterReset()
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  status = ICM_20948_i2c_master_reset(&_device);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3304      	adds	r3, #4
 80016fc:	4618      	mov	r0, r3
 80016fe:	f002 f912 	bl	8003926 <ICM_20948_i2c_master_reset>
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  return status;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <_ZN9ICM_2094832i2cControllerConfigurePeripheralEhhhhbbbbbh>:

ICM_20948_Status_e ICM_20948::i2cControllerConfigurePeripheral(uint8_t peripheral, uint8_t addr, uint8_t reg, uint8_t len, bool Rw, bool enable, bool data_only, bool grp, bool swap, uint8_t dataOut)
{
 800171a:	b590      	push	{r4, r7, lr}
 800171c:	b08b      	sub	sp, #44	; 0x2c
 800171e:	af08      	add	r7, sp, #32
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	4608      	mov	r0, r1
 8001724:	4611      	mov	r1, r2
 8001726:	461a      	mov	r2, r3
 8001728:	4603      	mov	r3, r0
 800172a:	70fb      	strb	r3, [r7, #3]
 800172c:	460b      	mov	r3, r1
 800172e:	70bb      	strb	r3, [r7, #2]
 8001730:	4613      	mov	r3, r2
 8001732:	707b      	strb	r3, [r7, #1]
  status = ICM_20948_i2c_controller_configure_peripheral(&_device, peripheral, addr, reg, len, Rw, enable, data_only, grp, swap, dataOut);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	1d18      	adds	r0, r3, #4
 8001738:	787c      	ldrb	r4, [r7, #1]
 800173a:	78ba      	ldrb	r2, [r7, #2]
 800173c:	78f9      	ldrb	r1, [r7, #3]
 800173e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001742:	9306      	str	r3, [sp, #24]
 8001744:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001748:	9305      	str	r3, [sp, #20]
 800174a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800174e:	9304      	str	r3, [sp, #16]
 8001750:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001754:	9303      	str	r3, [sp, #12]
 8001756:	f897 3020 	ldrb.w	r3, [r7, #32]
 800175a:	9302      	str	r3, [sp, #8]
 800175c:	7f3b      	ldrb	r3, [r7, #28]
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	7e3b      	ldrb	r3, [r7, #24]
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	4623      	mov	r3, r4
 8001766:	f002 f915 	bl	8003994 <ICM_20948_i2c_controller_configure_peripheral>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  return status;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bd90      	pop	{r4, r7, pc}

08001782 <_ZN9ICM_2094816i2cMasterSingleWEhhh>:
{
  return (i2cControllerPeriph4Transaction(addr, reg, data, len, Rw, send_reg_addr));
}

ICM_20948_Status_e ICM_20948::i2cMasterSingleW(uint8_t addr, uint8_t reg, uint8_t data)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	4608      	mov	r0, r1
 800178c:	4611      	mov	r1, r2
 800178e:	461a      	mov	r2, r3
 8001790:	4603      	mov	r3, r0
 8001792:	70fb      	strb	r3, [r7, #3]
 8001794:	460b      	mov	r3, r1
 8001796:	70bb      	strb	r3, [r7, #2]
 8001798:	4613      	mov	r3, r2
 800179a:	707b      	strb	r3, [r7, #1]
  status = ICM_20948_i2c_master_single_w(&_device, addr, reg, &data);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	1d18      	adds	r0, r3, #4
 80017a0:	1c7b      	adds	r3, r7, #1
 80017a2:	78ba      	ldrb	r2, [r7, #2]
 80017a4:	78f9      	ldrb	r1, [r7, #3]
 80017a6:	f001 f9e3 	bl	8002b70 <ICM_20948_i2c_master_single_w>
 80017aa:	4603      	mov	r3, r0
 80017ac:	461a      	mov	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  return status;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <_ZN9ICM_2094816i2cMasterSingleREhh>:
uint8_t ICM_20948::i2cMasterSingleR(uint8_t addr, uint8_t reg)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b084      	sub	sp, #16
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	460b      	mov	r3, r1
 80017cc:	70fb      	strb	r3, [r7, #3]
 80017ce:	4613      	mov	r3, r2
 80017d0:	70bb      	strb	r3, [r7, #2]
  uint8_t data = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	73fb      	strb	r3, [r7, #15]
  status = ICM_20948_i2c_master_single_r(&_device, addr, reg, &data);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	1d18      	adds	r0, r3, #4
 80017da:	f107 030f 	add.w	r3, r7, #15
 80017de:	78ba      	ldrb	r2, [r7, #2]
 80017e0:	78f9      	ldrb	r1, [r7, #3]
 80017e2:	f001 f9df 	bl	8002ba4 <ICM_20948_i2c_master_single_r>
 80017e6:	4603      	mov	r3, r0
 80017e8:	461a      	mov	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  {
//    debugPrint(F("ICM_20948::i2cMasterSingleR: ICM_20948_i2c_master_single_r returned: "));
//    debugPrintStatus(status);
//    debugPrintln(F(""));
  }
  return data;
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <_ZN9ICM_2094814startupDefaultEb>:

ICM_20948_Status_e ICM_20948::startupDefault(bool minimal)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b084      	sub	sp, #16
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	70fb      	strb	r3, [r7, #3]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8001806:	2300      	movs	r3, #0
 8001808:	73fb      	strb	r3, [r7, #15]

  retval = checkID();
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff fe54 	bl	80014b8 <_ZN9ICM_209487checkIDEv>
 8001810:	4603      	mov	r3, r0
 8001812:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d007      	beq.n	800182a <_ZN9ICM_2094814startupDefaultEb+0x30>
  {
//    debugPrint(F("ICM_20948::startupDefault: checkID returned: "));
//    debugPrintStatus(retval);
//    debugPrintln(F(""));
    status = retval;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	7bfa      	ldrb	r2, [r7, #15]
 800181e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return status;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001828:	e0b6      	b.n	8001998 <_ZN9ICM_2094814startupDefaultEb+0x19e>
  }

  retval = swReset();
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fde4 	bl	80013f8 <_ZN9ICM_209487swResetEv>
 8001830:	4603      	mov	r3, r0
 8001832:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d007      	beq.n	800184a <_ZN9ICM_2094814startupDefaultEb+0x50>
  {
//    debugPrint(F("ICM_20948::startupDefault: swReset returned: "));
//    debugPrintStatus(retval);
//    debugPrintln(F(""));
    status = retval;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return status;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001848:	e0a6      	b.n	8001998 <_ZN9ICM_2094814startupDefaultEb+0x19e>
  }
  delay(50);
 800184a:	2032      	movs	r0, #50	; 0x32
 800184c:	f004 fe82 	bl	8006554 <HAL_Delay>

  retval = sleep(false);
 8001850:	2100      	movs	r1, #0
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff fde5 	bl	8001422 <_ZN9ICM_209485sleepEb>
 8001858:	4603      	mov	r3, r0
 800185a:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <_ZN9ICM_2094814startupDefaultEb+0x78>
  {
//    debugPrint(F("ICM_20948::startupDefault: sleep returned: "));
//    debugPrintStatus(retval);
//    debugPrintln(F(""));
    status = retval;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	7bfa      	ldrb	r2, [r7, #15]
 8001866:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return status;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001870:	e092      	b.n	8001998 <_ZN9ICM_2094814startupDefaultEb+0x19e>
  }

  retval = lowPower(false);
 8001872:	2100      	movs	r1, #0
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff fded 	bl	8001454 <_ZN9ICM_209488lowPowerEb>
 800187a:	4603      	mov	r3, r0
 800187c:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d007      	beq.n	8001894 <_ZN9ICM_2094814startupDefaultEb+0x9a>
  {
//    debugPrint(F("ICM_20948::startupDefault: lowPower returned: "));
//    debugPrintStatus(retval);
//    debugPrintln(F(""));
    status = retval;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	7bfa      	ldrb	r2, [r7, #15]
 8001888:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return status;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001892:	e081      	b.n	8001998 <_ZN9ICM_2094814startupDefaultEb+0x19e>
  }

  retval = startupMagnetometer(minimal); // Pass the minimal startup flag to startupMagnetometer
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	4619      	mov	r1, r3
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 fef7 	bl	800268c <_ZN9ICM_2094819startupMagnetometerEb>
 800189e:	4603      	mov	r3, r0
 80018a0:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d007      	beq.n	80018b8 <_ZN9ICM_2094814startupDefaultEb+0xbe>
  {
//    debugPrint(F("ICM_20948::startupDefault: startupMagnetometer returned: "));
//    debugPrintStatus(retval);
//    debugPrintln(F(""));
    status = retval;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7bfa      	ldrb	r2, [r7, #15]
 80018ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return status;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80018b6:	e06f      	b.n	8001998 <_ZN9ICM_2094814startupDefaultEb+0x19e>
  }

  if (minimal) // Return now if minimal is true
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <_ZN9ICM_2094814startupDefaultEb+0xcc>
  {
//    debugPrintln(F("ICM_20948::startupDefault: minimal startup complete!"));
    return status;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80018c4:	e068      	b.n	8001998 <_ZN9ICM_2094814startupDefaultEb+0x19e>
  }

  retval = setSampleMode((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), ICM_20948_Sample_Mode_Continuous); // options: ICM_20948_Sample_Mode_Continuous or ICM_20948_Sample_Mode_Cycled
 80018c6:	2200      	movs	r2, #0
 80018c8:	2103      	movs	r1, #3
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff fe09 	bl	80014e2 <_ZN9ICM_2094813setSampleModeEhh>
 80018d0:	4603      	mov	r3, r0
 80018d2:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d007      	beq.n	80018ea <_ZN9ICM_2094814startupDefaultEb+0xf0>
  {
//    debugPrint(F("ICM_20948::startupDefault: setSampleMode returned: "));
//    debugPrintStatus(retval);
//    debugPrintln(F(""));
    status = retval;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7bfa      	ldrb	r2, [r7, #15]
 80018de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return status;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80018e8:	e056      	b.n	8001998 <_ZN9ICM_2094814startupDefaultEb+0x19e>
  } // sensors: 	ICM_20948_Internal_Acc, ICM_20948_Internal_Gyr, ICM_20948_Internal_Mst

  ICM_20948_fss_t FSS;
  FSS.a = gpm2;   // (ICM_20948_ACCEL_CONFIG_FS_SEL_e)
 80018ea:	7b3b      	ldrb	r3, [r7, #12]
 80018ec:	f36f 0301 	bfc	r3, #0, #2
 80018f0:	733b      	strb	r3, [r7, #12]
  FSS.g = dps250; // (ICM_20948_GYRO_CONFIG_1_FS_SEL_e)
 80018f2:	7b3b      	ldrb	r3, [r7, #12]
 80018f4:	f36f 0383 	bfc	r3, #2, #2
 80018f8:	733b      	strb	r3, [r7, #12]
  retval = setFullScale((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), FSS);
 80018fa:	7b3a      	ldrb	r2, [r7, #12]
 80018fc:	2103      	movs	r1, #3
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fe0d 	bl	800151e <_ZN9ICM_2094812setFullScaleEh15ICM_20948_fss_t>
 8001904:	4603      	mov	r3, r0
 8001906:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <_ZN9ICM_2094814startupDefaultEb+0x124>
  {
//    debugPrint(F("ICM_20948::startupDefault: setFullScale returned: "));
//    debugPrintStatus(retval);
//    debugPrintln(F(""));
    status = retval;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return status;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800191c:	e03c      	b.n	8001998 <_ZN9ICM_2094814startupDefaultEb+0x19e>
  }

  ICM_20948_dlpcfg_t dlpcfg;
  dlpcfg.a = acc_d473bw_n499bw;
 800191e:	2307      	movs	r3, #7
 8001920:	723b      	strb	r3, [r7, #8]
  dlpcfg.g = gyr_d361bw4_n376bw5;
 8001922:	2307      	movs	r3, #7
 8001924:	727b      	strb	r3, [r7, #9]
  retval = setDLPFcfg((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), dlpcfg);
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	2103      	movs	r1, #3
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff fe11 	bl	8001552 <_ZN9ICM_2094810setDLPFcfgEh18ICM_20948_dlpcfg_t>
 8001930:	4603      	mov	r3, r0
 8001932:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d007      	beq.n	800194a <_ZN9ICM_2094814startupDefaultEb+0x150>
  {
//    debugPrint(F("ICM_20948::startupDefault: setDLPFcfg returned: "));
//    debugPrintStatus(retval);
//    debugPrintln(F(""));
    status = retval;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return status;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001948:	e026      	b.n	8001998 <_ZN9ICM_2094814startupDefaultEb+0x19e>
  }

  retval = enableDLPF(ICM_20948_Internal_Acc, false);
 800194a:	2200      	movs	r2, #0
 800194c:	2101      	movs	r1, #1
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff fe19 	bl	8001586 <_ZN9ICM_2094810enableDLPFEhb>
 8001954:	4603      	mov	r3, r0
 8001956:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d007      	beq.n	800196e <_ZN9ICM_2094814startupDefaultEb+0x174>
  {
//    debugPrint(F("ICM_20948::startupDefault: enableDLPF (Acc) returned: "));
//    debugPrintStatus(retval);
//    debugPrintln(F(""));
    status = retval;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	7bfa      	ldrb	r2, [r7, #15]
 8001962:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return status;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800196c:	e014      	b.n	8001998 <_ZN9ICM_2094814startupDefaultEb+0x19e>
  }

  retval = enableDLPF(ICM_20948_Internal_Gyr, false);
 800196e:	2200      	movs	r2, #0
 8001970:	2102      	movs	r1, #2
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff fe07 	bl	8001586 <_ZN9ICM_2094810enableDLPFEhb>
 8001978:	4603      	mov	r3, r0
 800197a:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d007      	beq.n	8001992 <_ZN9ICM_2094814startupDefaultEb+0x198>
  {
//    debugPrint(F("ICM_20948::startupDefault: enableDLPF (Gyr) returned: "));
//    debugPrintStatus(retval);
//    debugPrintln(F(""));
    status = retval;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	7bfa      	ldrb	r2, [r7, #15]
 8001986:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return status;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001990:	e002      	b.n	8001998 <_ZN9ICM_2094814startupDefaultEb+0x19e>
  }

  return status;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <_ZN9ICM_209485writeEhPhm>:
  status = ICM_20948_execute_r(&_device, reg, pdata, len);
  return (status);
}

ICM_20948_Status_e ICM_20948::write(uint8_t reg, uint8_t *pdata, uint32_t len)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	460b      	mov	r3, r1
 80019ae:	72fb      	strb	r3, [r7, #11]
  status = ICM_20948_execute_w(&_device, reg, pdata, len);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	1d18      	adds	r0, r3, #4
 80019b4:	7af9      	ldrb	r1, [r7, #11]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	f000 ff7b 	bl	80028b4 <ICM_20948_execute_w>
 80019be:	4603      	mov	r3, r0
 80019c0:	461a      	mov	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  return (status);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_ZN9ICM_209487readMagE18AK09916_Reg_Addr_e>:

uint8_t ICM_20948::readMag(AK09916_Reg_Addr_e reg)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b084      	sub	sp, #16
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	460b      	mov	r3, r1
 80019e0:	70fb      	strb	r3, [r7, #3]
  uint8_t data = i2cMasterSingleR(MAG_AK09916_I2C_ADDR, reg); // i2cMasterSingleR updates status too
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	461a      	mov	r2, r3
 80019e6:	210c      	movs	r1, #12
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff feea 	bl	80017c2 <_ZN9ICM_2094816i2cMasterSingleREhh>
 80019ee:	4603      	mov	r3, r0
 80019f0:	73fb      	strb	r3, [r7, #15]
  return data;
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_ZN9ICM_209488writeMagE18AK09916_Reg_Addr_ePh>:

ICM_20948_Status_e ICM_20948::writeMag(AK09916_Reg_Addr_e reg, uint8_t *pdata)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	460b      	mov	r3, r1
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	72fb      	strb	r3, [r7, #11]
  status = i2cMasterSingleW(MAG_AK09916_I2C_ADDR, reg, *pdata);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	7afa      	ldrb	r2, [r7, #11]
 8001a10:	210c      	movs	r1, #12
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f7ff feb5 	bl	8001782 <_ZN9ICM_2094816i2cMasterSingleWEhhh>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  return status;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <_ZN9ICM_209488resetMagEv>:

ICM_20948_Status_e ICM_20948::resetMag()
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint8_t SRST = 1;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
  // SRST: Soft reset
  // “0”: Normal
  // “1”: Reset
  // When “1” is set, all registers are initialized. After reset, SRST bit turns to “0” automatically.
  status = i2cMasterSingleW(MAG_AK09916_I2C_ADDR, AK09916_REG_CNTL3, SRST);
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	2232      	movs	r2, #50	; 0x32
 8001a40:	210c      	movs	r1, #12
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fe9d 	bl	8001782 <_ZN9ICM_2094816i2cMasterSingleWEhhh>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  return status;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_ZN9ICM_2094810enableFIFOEb>:

// FIFO

ICM_20948_Status_e ICM_20948::enableFIFO(bool enable)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	70fb      	strb	r3, [r7, #3]
  status = ICM_20948_enable_FIFO(&_device, enable);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3304      	adds	r3, #4
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f002 f85b 	bl	8003b30 <ICM_20948_enable_FIFO>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  return status;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_ZN9ICM_209489resetFIFOEv>:

ICM_20948_Status_e ICM_20948::resetFIFO(void)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  status = ICM_20948_reset_FIFO(&_device);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f002 f886 	bl	8003bb0 <ICM_20948_reset_FIFO>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  return status;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <_ZN9ICM_209489enableDMPEb>:
}

// DMP

ICM_20948_Status_e ICM_20948::enableDMP(bool enable)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	70fb      	strb	r3, [r7, #3]
  if (_device._dmp_firmware_available == true) // Should we attempt to enable the DMP?
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7a1b      	ldrb	r3, [r3, #8]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d114      	bne.n	8001afa <_ZN9ICM_209489enableDMPEb+0x3e>
  {
    status = ICM_20948_enable_DMP(&_device, enable == true ? 1 : 0);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	1d1a      	adds	r2, r3, #4
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	bf0c      	ite	eq
 8001ada:	2301      	moveq	r3, #1
 8001adc:	2300      	movne	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	f002 f915 	bl	8003d12 <ICM_20948_enable_DMP>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	461a      	mov	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return status;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001af8:	e000      	b.n	8001afc <_ZN9ICM_209489enableDMPEb+0x40>
  }
  return ICM_20948_Stat_DMPNotSupported;
 8001afa:	2308      	movs	r3, #8
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <_ZN9ICM_209488resetDMPEv>:

ICM_20948_Status_e ICM_20948::resetDMP(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  status = ICM_20948_reset_DMP(&_device);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3304      	adds	r3, #4
 8001b10:	4618      	mov	r0, r3
 8001b12:	f002 f93e 	bl	8003d92 <ICM_20948_reset_DMP>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461a      	mov	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  return status;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <_ZN9ICM_2094815loadDMPFirmwareEv>:

ICM_20948_Status_e ICM_20948::loadDMPFirmware(void)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  if (_device._dmp_firmware_available == true) // Should we attempt to load the DMP firmware?
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	7a1b      	ldrb	r3, [r3, #8]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d10d      	bne.n	8001b5a <_ZN9ICM_2094815loadDMPFirmwareEv+0x2c>
  {
    status = ICM_20948_firmware_load(&_device);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3304      	adds	r3, #4
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 f95c 	bl	8003e00 <ICM_20948_firmware_load>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return status;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b58:	e000      	b.n	8001b5c <_ZN9ICM_2094815loadDMPFirmwareEv+0x2e>
  }
  return ICM_20948_Stat_DMPNotSupported;
 8001b5a:	2308      	movs	r3, #8
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_ZN9ICM_2094818setDMPstartAddressEt>:

ICM_20948_Status_e ICM_20948::setDMPstartAddress(unsigned short address)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	807b      	strh	r3, [r7, #2]
  if (_device._dmp_firmware_available == true) // Should we attempt to set the start address?
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	7a1b      	ldrb	r3, [r3, #8]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d10f      	bne.n	8001b98 <_ZN9ICM_2094818setDMPstartAddressEt+0x34>
  {
    status = ICM_20948_set_dmp_start_address(&_device, address);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	887a      	ldrh	r2, [r7, #2]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f002 fa2d 	bl	8003fe0 <ICM_20948_set_dmp_start_address>
 8001b86:	4603      	mov	r3, r0
 8001b88:	461a      	mov	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return status;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b96:	e000      	b.n	8001b9a <_ZN9ICM_2094818setDMPstartAddressEt+0x36>
  }
  return ICM_20948_Stat_DMPNotSupported;
 8001b98:	2308      	movs	r3, #8
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <_ZN9ICM_2094815enableDMPSensorE19inv_icm20948_sensorb>:

ICM_20948_Status_e ICM_20948::enableDMPSensor(enum inv_icm20948_sensor sensor, bool enable)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	460b      	mov	r3, r1
 8001bac:	70fb      	strb	r3, [r7, #3]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	70bb      	strb	r3, [r7, #2]
  if (_device._dmp_firmware_available == true) // Should we attempt to enable the sensor?
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	7a1b      	ldrb	r3, [r3, #8]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d114      	bne.n	8001be4 <_ZN9ICM_2094815enableDMPSensorE19inv_icm20948_sensorb+0x42>
  {
    status = inv_icm20948_enable_dmp_sensor(&_device, sensor, enable == true ? 1 : 0);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	1d18      	adds	r0, r3, #4
 8001bbe:	78bb      	ldrb	r3, [r7, #2]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <_ZN9ICM_2094815enableDMPSensorE19inv_icm20948_sensorb+0x26>
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	e000      	b.n	8001bca <_ZN9ICM_2094815enableDMPSensorE19inv_icm20948_sensorb+0x28>
 8001bc8:	2200      	movs	r2, #0
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f002 fc89 	bl	80044e4 <inv_icm20948_enable_dmp_sensor>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
//    debugPrint(F("  _dataOutCtl2: "));
//    debugPrintf((int)_device._dataOutCtl2);
//    debugPrint(F("  _dataRdyStatus: "));
//    debugPrintf((int)_device._dataRdyStatus);
//    debugPrintln(F(""));
    return status;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001be2:	e000      	b.n	8001be6 <_ZN9ICM_2094815enableDMPSensorE19inv_icm20948_sensorb+0x44>
  }
  return ICM_20948_Stat_DMPNotSupported;
 8001be4:	2308      	movs	r3, #8
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>:
  }
  return ICM_20948_Stat_DMPNotSupported;
}

ICM_20948_Status_e ICM_20948::writeDMPmems(unsigned short reg, unsigned int length, const unsigned char *data)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	603b      	str	r3, [r7, #0]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	817b      	strh	r3, [r7, #10]
  if (_device._dmp_firmware_available == true) // Should we attempt to write to the DMP?
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	7a1b      	ldrb	r3, [r3, #8]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d10f      	bne.n	8001c26 <_ZN9ICM_2094812writeDMPmemsEtjPKh+0x38>
  {
    status = inv_icm20948_write_mems(&_device, reg, length, data);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1d18      	adds	r0, r3, #4
 8001c0a:	8979      	ldrh	r1, [r7, #10]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	f002 fa18 	bl	8004044 <inv_icm20948_write_mems>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return status;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001c24:	e000      	b.n	8001c28 <_ZN9ICM_2094812writeDMPmemsEtjPKh+0x3a>
  }
  return ICM_20948_Stat_DMPNotSupported;
 8001c26:	2308      	movs	r3, #8
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_ZN9ICM_2094813setDMPODRrateE17DMP_ODR_Registersi>:
  }
  return ICM_20948_Stat_DMPNotSupported;
}

ICM_20948_Status_e ICM_20948::setDMPODRrate(enum DMP_ODR_Registers odr_reg, int interval)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	72fb      	strb	r3, [r7, #11]
  if (_device._dmp_firmware_available == true) // Should we attempt to set the DMP ODR?
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	7a1b      	ldrb	r3, [r3, #8]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d110      	bne.n	8001c68 <_ZN9ICM_2094813setDMPODRrateE17DMP_ODR_Registersi+0x38>
    // In order to set an ODR for a given sensor data, write 2-byte value to DMP using key defined above for a particular sensor.
    // Setting value can be calculated as follows:
    // Value = (DMP running rate (225Hz) / ODR ) - 1
    // E.g. For a 25Hz ODR rate, value= (225/25) - 1 = 8.

    status = inv_icm20948_set_dmp_sensor_period(&_device, odr_reg, interval);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	b292      	uxth	r2, r2
 8001c4e:	7af9      	ldrb	r1, [r7, #11]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f002 fae1 	bl	8004218 <inv_icm20948_set_dmp_sensor_period>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return status;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001c66:	e000      	b.n	8001c6a <_ZN9ICM_2094813setDMPODRrateE17DMP_ODR_Registersi+0x3a>
  }
  return ICM_20948_Stat_DMPNotSupported;
 8001c68:	2308      	movs	r3, #8
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <_ZN9ICM_2094819readDMPdataFromFIFOEP20icm_20948_DMP_data_t>:

ICM_20948_Status_e ICM_20948::readDMPdataFromFIFO(icm_20948_DMP_data_t *data)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
  if (_device._dmp_firmware_available == true) // Should we attempt to set the data from the FIFO?
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	7a1b      	ldrb	r3, [r3, #8]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d10e      	bne.n	8001ca2 <_ZN9ICM_2094819readDMPdataFromFIFOEP20icm_20948_DMP_data_t+0x30>
  {
    status = inv_icm20948_read_dmp_data(&_device, data);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3304      	adds	r3, #4
 8001c88:	6839      	ldr	r1, [r7, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f002 fdd8 	bl	8004840 <inv_icm20948_read_dmp_data>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return status;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001ca0:	e000      	b.n	8001ca4 <_ZN9ICM_2094819readDMPdataFromFIFOEP20icm_20948_DMP_data_t+0x32>
  }
  return ICM_20948_Stat_DMPNotSupported;
 8001ca2:	2308      	movs	r3, #8
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_ZN9ICM_209489setGyroSFEhi>:

ICM_20948_Status_e ICM_20948::setGyroSF(unsigned char div, int gyro_level)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	72fb      	strb	r3, [r7, #11]
  if (_device._dmp_firmware_available == true) // Should we attempt to set the Gyro SF?
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	7a1b      	ldrb	r3, [r3, #8]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d10f      	bne.n	8001ce2 <_ZN9ICM_209489setGyroSFEhi+0x36>
  {
    status = inv_icm20948_set_gyro_sf(&_device, div, gyro_level);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	7af9      	ldrb	r1, [r7, #11]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f003 fbf8 	bl	80054c0 <inv_icm20948_set_gyro_sf>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
//    debugPrint(F("ICM_20948::setGyroSF:  pll: "));
//    debugPrintf((int)_device._gyroSFpll);
//    debugPrint(F("  Gyro SF is: "));
//    debugPrintf((int)_device._gyroSF);
//    debugPrintln(F(""));
    return status;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001ce0:	e000      	b.n	8001ce4 <_ZN9ICM_209489setGyroSFEhi+0x38>
  }
  return ICM_20948_Stat_DMPNotSupported;
 8001ce2:	2308      	movs	r3, #8
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <_ZN9ICM_2094813initializeDMPEv>:

// Combine all of the DMP start-up code from the earlier DMP examples
// This function is defined as __attribute__((weak)) so you can overwrite it if you want to,
//   e.g. to modify the sample rate
ICM_20948_Status_e ICM_20948::initializeDMP(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b09c      	sub	sp, #112	; 0x70
 8001cf0:	af08      	add	r7, sp, #32
 8001cf2:	6078      	str	r0, [r7, #4]
  // First, let's check if the DMP is available
  if (_device._dmp_firmware_available != true)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	7a1b      	ldrb	r3, [r3, #8]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d002      	beq.n	8001d02 <_ZN9ICM_2094813initializeDMPEv+0x16>
  {
//    debugPrint(F("ICM_20948::startupDMP: DMP is not available. Please check that you have uncommented line 29 (#define ICM_20948_USE_DMP) in ICM_20948_C.h..."));
    return ICM_20948_Stat_DMPNotSupported;
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	f000 bc63 	b.w	80025c8 <_ZN9ICM_2094813initializeDMPEv+0x8dc>
  }

  ICM_20948_Status_e  worstResult = ICM_20948_Stat_Ok;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#if defined(ICM_20948_USE_DMP)

  // The ICM-20948 is awake and ready but hasn't been configured. Let's step through the configuration
  // sequence from InvenSense's _confidential_ Application Note "Programming Sequence for DMP Hardware Functions".

  ICM_20948_Status_e  result = ICM_20948_Stat_Ok; // Use result and worstResult to show if the configuration was successful
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  // true: set the I2C_SLV0_RNW ReadNotWrite bit so we read the 10 bytes (not write them)
  // true: set the I2C_SLV0_CTRL I2C_SLV0_EN bit to enable reading from the peripheral at the sample rate
  // false: clear the I2C_SLV0_CTRL I2C_SLV0_REG_DIS (we want to write the register value)
  // true: set the I2C_SLV0_CTRL I2C_SLV0_GRP bit to show the register pairing starts at byte 1+2 (copied from inv_icm20948_resume_akm)
  // true: set the I2C_SLV0_CTRL I2C_SLV0_BYTE_SW to byte-swap the data from the mag (copied from inv_icm20948_resume_akm)
  result = i2cControllerConfigurePeripheral(0, MAG_AK09916_I2C_ADDR, AK09916_REG_RSV2, 10, true, true, false, true, true); if (result > worstResult) worstResult = result;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	9306      	str	r3, [sp, #24]
 8001d12:	2301      	movs	r3, #1
 8001d14:	9305      	str	r3, [sp, #20]
 8001d16:	2301      	movs	r3, #1
 8001d18:	9304      	str	r3, [sp, #16]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	9303      	str	r3, [sp, #12]
 8001d1e:	2301      	movs	r3, #1
 8001d20:	9302      	str	r3, [sp, #8]
 8001d22:	2301      	movs	r3, #1
 8001d24:	9301      	str	r3, [sp, #4]
 8001d26:	230a      	movs	r3, #10
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	220c      	movs	r2, #12
 8001d2e:	2100      	movs	r1, #0
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff fcf2 	bl	800171a <_ZN9ICM_2094832i2cControllerConfigurePeripheralEhhhhbbbbbh>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001d3c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001d40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d903      	bls.n	8001d50 <_ZN9ICM_2094813initializeDMPEv+0x64>
 8001d48:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001d4c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  // true: set the I2C_SLV0_CTRL I2C_SLV0_EN bit. Not sure why, but the write does not happen if this is clear
  // false: clear the I2C_SLV0_CTRL I2C_SLV0_REG_DIS (we want to write the register value)
  // false: clear the I2C_SLV0_CTRL I2C_SLV0_GRP bit
  // false: clear the I2C_SLV0_CTRL I2C_SLV0_BYTE_SW bit
  // AK09916_mode_single: tell I2C_SLV1 to write the Single Measurement command each sample
  result = i2cControllerConfigurePeripheral(1, MAG_AK09916_I2C_ADDR, AK09916_REG_CNTL2, 1, false, true, false, false, false, AK09916_mode_single); if (result > worstResult) worstResult = result;
 8001d50:	2301      	movs	r3, #1
 8001d52:	9306      	str	r3, [sp, #24]
 8001d54:	2300      	movs	r3, #0
 8001d56:	9305      	str	r3, [sp, #20]
 8001d58:	2300      	movs	r3, #0
 8001d5a:	9304      	str	r3, [sp, #16]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9303      	str	r3, [sp, #12]
 8001d60:	2301      	movs	r3, #1
 8001d62:	9302      	str	r3, [sp, #8]
 8001d64:	2300      	movs	r3, #0
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	2301      	movs	r3, #1
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	2331      	movs	r3, #49	; 0x31
 8001d6e:	220c      	movs	r2, #12
 8001d70:	2101      	movs	r1, #1
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff fcd1 	bl	800171a <_ZN9ICM_2094832i2cControllerConfigurePeripheralEhhhhbbbbbh>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001d7e:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001d82:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d903      	bls.n	8001d92 <_ZN9ICM_2094813initializeDMPEv+0xa6>
 8001d8a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001d8e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  //  ODR is computed as follows: 1.1 kHz/(2^((odr_config[3:0])) )
  //  When gyroscope is enabled, all sensors (including I2C_MASTER) use the gyroscope ODR.
  //  If gyroscope is disabled, then all sensors (including I2C_MASTER) use the accelerometer ODR."
  // Since both gyro and accel are running, setting this register should have no effect. But it does. Maybe because the Gyro and Accel are placed in Low Power Mode (cycled)?
  // You can see by monitoring the Aux I2C pins that the next three lines reduce the bus traffic (magnetometer reads) from 1125Hz to the chosen rate: 68.75Hz in this case.
  result = setBank(3); if (result > worstResult) worstResult = result; // Select Bank 3
 8001d92:	2103      	movs	r1, #3
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff fb16 	bl	80013c6 <_ZN9ICM_209487setBankEh>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001da0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001da4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d903      	bls.n	8001db4 <_ZN9ICM_2094813initializeDMPEv+0xc8>
 8001dac:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001db0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint8_t mstODRconfig = 0x04; // Set the ODR configuration to 1100/2^4 = 68.75Hz
 8001db4:	2304      	movs	r3, #4
 8001db6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  result = write(AGB3_REG_I2C_MST_ODR_CONFIG, &mstODRconfig, 1); if (result > worstResult) worstResult = result; // Write one byte to the I2C_MST_ODR_CONFIG register  
 8001dba:	f107 024d 	add.w	r2, r7, #77	; 0x4d
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff fdec 	bl	80019a0 <_ZN9ICM_209485writeEhPhm>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001dce:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001dd2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d903      	bls.n	8001de2 <_ZN9ICM_2094813initializeDMPEv+0xf6>
 8001dda:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001dde:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  // Configure clock source through PWR_MGMT_1
  // ICM_20948_Clock_Auto selects the best available clock source – PLL if ready, else use the Internal oscillator
  result = setClockSource(ICM_20948_Clock_Auto); if (result > worstResult) worstResult = result; // This is shorthand: success will be set to false if setClockSource fails
 8001de2:	2101      	movs	r1, #1
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fb4e 	bl	8001486 <_ZN9ICM_2094814setClockSourceE29ICM_20948_PWR_MGMT_1_CLKSEL_e>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001df0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001df4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d903      	bls.n	8001e04 <_ZN9ICM_2094813initializeDMPEv+0x118>
 8001dfc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001e00:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  // Enable accel and gyro sensors through PWR_MGMT_2
  // Enable Accelerometer (all axes) and Gyroscope (all axes) by writing zero to PWR_MGMT_2
  result = setBank(0); if (result > worstResult) worstResult = result;                               // Select Bank 0
 8001e04:	2100      	movs	r1, #0
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff fadd 	bl	80013c6 <_ZN9ICM_209487setBankEh>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001e12:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001e16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d903      	bls.n	8001e26 <_ZN9ICM_2094813initializeDMPEv+0x13a>
 8001e1e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001e22:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint8_t pwrMgmt2 = 0x40;                                                          // Set the reserved bit 6 (pressure sensor disable?)
 8001e26:	2340      	movs	r3, #64	; 0x40
 8001e28:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  result = write(AGB0_REG_PWR_MGMT_2, &pwrMgmt2, 1); if (result > worstResult) worstResult = result; // Write one byte to the PWR_MGMT_2 register
 8001e2c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001e30:	2301      	movs	r3, #1
 8001e32:	2107      	movs	r1, #7
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff fdb3 	bl	80019a0 <_ZN9ICM_209485writeEhPhm>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001e40:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001e44:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d903      	bls.n	8001e54 <_ZN9ICM_2094813initializeDMPEv+0x168>
 8001e4c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001e50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  // Place _only_ I2C_Master in Low Power Mode (cycled) via LP_CONFIG
  // The InvenSense Nucleo example initially puts the accel and gyro into low power mode too, but then later updates LP_CONFIG so only the I2C_Master is in Low Power Mode
  result = setSampleMode(ICM_20948_Internal_Mst, ICM_20948_Sample_Mode_Cycled); if (result > worstResult) worstResult = result;
 8001e54:	2201      	movs	r2, #1
 8001e56:	2110      	movs	r1, #16
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff fb42 	bl	80014e2 <_ZN9ICM_2094813setSampleModeEhh>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001e64:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001e68:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d903      	bls.n	8001e78 <_ZN9ICM_2094813initializeDMPEv+0x18c>
 8001e70:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001e74:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  // Disable the FIFO
  result = enableFIFO(false); if (result > worstResult) worstResult = result;
 8001e78:	2100      	movs	r1, #0
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff fdf0 	bl	8001a60 <_ZN9ICM_2094810enableFIFOEb>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001e86:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001e8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d903      	bls.n	8001e9a <_ZN9ICM_2094813initializeDMPEv+0x1ae>
 8001e92:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001e96:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  // Disable the DMP
  result = enableDMP(false); if (result > worstResult) worstResult = result;
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff fe0d 	bl	8001abc <_ZN9ICM_209489enableDMPEb>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001ea8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001eac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d903      	bls.n	8001ebc <_ZN9ICM_2094813initializeDMPEv+0x1d0>
 8001eb4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001eb8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  // Set Gyro FSR (Full scale range) to 2000dps through GYRO_CONFIG_1
  // Set Accel FSR (Full scale range) to 4g through ACCEL_CONFIG
  ICM_20948_fss_t myFSS; // This uses a "Full Scale Settings" structure that can contain values for all configurable sensors
  myFSS.a = gpm4;        // (ICM_20948_ACCEL_CONFIG_FS_SEL_e)
 8001ebc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f362 0301 	bfi	r3, r2, #0, #2
 8001ec6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                         // gpm2
                         // gpm4
                         // gpm8
                         // gpm16
  myFSS.g = dps2000;     // (ICM_20948_GYRO_CONFIG_1_FS_SEL_e)
 8001eca:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001ece:	f043 030c 	orr.w	r3, r3, #12
 8001ed2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                         // dps250
                         // dps500
                         // dps1000
                         // dps2000
  result = setFullScale((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), myFSS); if (result > worstResult) worstResult = result;
 8001ed6:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8001eda:	2103      	movs	r1, #3
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff fb1e 	bl	800151e <_ZN9ICM_2094812setFullScaleEh15ICM_20948_fss_t>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001ee8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001eec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d903      	bls.n	8001efc <_ZN9ICM_2094813initializeDMPEv+0x210>
 8001ef4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001ef8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  // The InvenSense Nucleo code also enables the gyro DLPF (but leaves GYRO_DLPFCFG set to zero = 196.6Hz (3dB))
  // We found this by going through the SPI data generated by ZaneL's Teensy-ICM-20948 library byte by byte...
  // The gyro DLPF is enabled by default (GYRO_CONFIG_1 = 0x01) so the following line should have no effect, but we'll include it anyway
  result = enableDLPF(ICM_20948_Internal_Gyr, true); if (result > worstResult) worstResult = result;
 8001efc:	2201      	movs	r2, #1
 8001efe:	2102      	movs	r1, #2
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff fb40 	bl	8001586 <_ZN9ICM_2094810enableDLPFEhb>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001f0c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001f10:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d903      	bls.n	8001f20 <_ZN9ICM_2094813initializeDMPEv+0x234>
 8001f18:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001f1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  // If we see this interrupt, we'll need to reset the FIFO
  //result = intEnableOverflowFIFO( 0x1F ); if (result > worstResult) worstResult = result; // Enable the interrupt on all FIFOs

  // Turn off what goes into the FIFO through FIFO_EN_1, FIFO_EN_2
  // Stop the peripheral data from being written to the FIFO by writing zero to FIFO_EN_1
  result = setBank(0); if (result > worstResult) worstResult = result; // Select Bank 0
 8001f20:	2100      	movs	r1, #0
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff fa4f 	bl	80013c6 <_ZN9ICM_209487setBankEh>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001f2e:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001f32:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d903      	bls.n	8001f42 <_ZN9ICM_2094813initializeDMPEv+0x256>
 8001f3a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001f3e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint8_t zero = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  result = write(AGB0_REG_FIFO_EN_1, &zero, 1); if (result > worstResult) worstResult = result;
 8001f48:	f107 0247 	add.w	r2, r7, #71	; 0x47
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	2166      	movs	r1, #102	; 0x66
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff fd25 	bl	80019a0 <_ZN9ICM_209485writeEhPhm>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001f5c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001f60:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d903      	bls.n	8001f70 <_ZN9ICM_2094813initializeDMPEv+0x284>
 8001f68:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001f6c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  // Stop the accelerometer, gyro and temperature data from being written to the FIFO by writing zero to FIFO_EN_2
  result = write(AGB0_REG_FIFO_EN_2, &zero, 1); if (result > worstResult) worstResult = result;
 8001f70:	f107 0247 	add.w	r2, r7, #71	; 0x47
 8001f74:	2301      	movs	r3, #1
 8001f76:	2167      	movs	r1, #103	; 0x67
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff fd11 	bl	80019a0 <_ZN9ICM_209485writeEhPhm>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001f84:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001f88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d903      	bls.n	8001f98 <_ZN9ICM_2094813initializeDMPEv+0x2ac>
 8001f90:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001f94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  // Turn off data ready interrupt through INT_ENABLE_1
  result = intEnableRawDataReady(false); if (result > worstResult) worstResult = result;
 8001f98:	2100      	movs	r1, #0
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff fb28 	bl	80015f0 <_ZN9ICM_2094821intEnableRawDataReadyEb>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001fa6:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001faa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d903      	bls.n	8001fba <_ZN9ICM_2094813initializeDMPEv+0x2ce>
 8001fb2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001fb6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  // Reset FIFO through FIFO_RST
  result = resetFIFO(); if (result > worstResult) worstResult = result;
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff fd69 	bl	8001a92 <_ZN9ICM_209489resetFIFOEv>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001fc6:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001fca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d903      	bls.n	8001fda <_ZN9ICM_2094813initializeDMPEv+0x2ee>
 8001fd2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001fd6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  // Set gyro sample rate divider with GYRO_SMPLRT_DIV
  // Set accel sample rate divider with ACCEL_SMPLRT_DIV_2
  ICM_20948_smplrt_t mySmplrt;
  mySmplrt.g = 19; // ODR is computed as follows: 1.1 kHz/(1+GYRO_SMPLRT_DIV[7:0]). 19 = 55Hz. InvenSense Nucleo example uses 19 (0x13).
 8001fda:	2313      	movs	r3, #19
 8001fdc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  mySmplrt.a = 19; // ODR is computed as follows: 1.125 kHz/(1+ACCEL_SMPLRT_DIV[11:0]). 19 = 56.25Hz. InvenSense Nucleo example uses 19 (0x13).
 8001fe0:	2313      	movs	r3, #19
 8001fe2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  //mySmplrt.g = 4; // 225Hz
  //mySmplrt.a = 4; // 225Hz
  //mySmplrt.g = 8; // 112Hz
  //mySmplrt.a = 8; // 112Hz
  result = setSampleRate((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), mySmplrt); if (result > worstResult) worstResult = result;
 8001fe6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001fe8:	2103      	movs	r1, #3
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff fae6 	bl	80015bc <_ZN9ICM_2094813setSampleRateEh18ICM_20948_smplrt_t>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001ff6:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001ffa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d903      	bls.n	800200a <_ZN9ICM_2094813initializeDMPEv+0x31e>
 8002002:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002006:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  // Setup DMP start address through PRGM_STRT_ADDRH/PRGM_STRT_ADDRL
  result = setDMPstartAddress(); if (result > worstResult) worstResult = result; // Defaults to DMP_START_ADDRESS
 800200a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff fda8 	bl	8001b64 <_ZN9ICM_2094818setDMPstartAddressEt>
 8002014:	4603      	mov	r3, r0
 8002016:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800201a:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800201e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002022:	429a      	cmp	r2, r3
 8002024:	d903      	bls.n	800202e <_ZN9ICM_2094813initializeDMPEv+0x342>
 8002026:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800202a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  // Now load the DMP firmware
  result = loadDMPFirmware(); if (result > worstResult) worstResult = result;
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff fd7d 	bl	8001b2e <_ZN9ICM_2094815loadDMPFirmwareEv>
 8002034:	4603      	mov	r3, r0
 8002036:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800203a:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800203e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002042:	429a      	cmp	r2, r3
 8002044:	d903      	bls.n	800204e <_ZN9ICM_2094813initializeDMPEv+0x362>
 8002046:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800204a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  // Write the 2 byte Firmware Start Value to ICM PRGM_STRT_ADDRH/PRGM_STRT_ADDRL
  result = setDMPstartAddress(); if (result > worstResult) worstResult = result; // Defaults to DMP_START_ADDRESS
 800204e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff fd86 	bl	8001b64 <_ZN9ICM_2094818setDMPstartAddressEt>
 8002058:	4603      	mov	r3, r0
 800205a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800205e:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002062:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002066:	429a      	cmp	r2, r3
 8002068:	d903      	bls.n	8002072 <_ZN9ICM_2094813initializeDMPEv+0x386>
 800206a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800206e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  // Set the Hardware Fix Disable register to 0x48
  result = setBank(0); if (result > worstResult) worstResult = result; // Select Bank 0
 8002072:	2100      	movs	r1, #0
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff f9a6 	bl	80013c6 <_ZN9ICM_209487setBankEh>
 800207a:	4603      	mov	r3, r0
 800207c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002080:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002084:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002088:	429a      	cmp	r2, r3
 800208a:	d903      	bls.n	8002094 <_ZN9ICM_2094813initializeDMPEv+0x3a8>
 800208c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002090:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint8_t fix = 0x48;
 8002094:	2348      	movs	r3, #72	; 0x48
 8002096:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  result = write(AGB0_REG_HW_FIX_DISABLE, &fix, 1); if (result > worstResult) worstResult = result;
 800209a:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 800209e:	2301      	movs	r3, #1
 80020a0:	2175      	movs	r1, #117	; 0x75
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff fc7c 	bl	80019a0 <_ZN9ICM_209485writeEhPhm>
 80020a8:	4603      	mov	r3, r0
 80020aa:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80020ae:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80020b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d903      	bls.n	80020c2 <_ZN9ICM_2094813initializeDMPEv+0x3d6>
 80020ba:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80020be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  // Set the Single FIFO Priority Select register to 0xE4
  result = setBank(0); if (result > worstResult) worstResult = result; // Select Bank 0
 80020c2:	2100      	movs	r1, #0
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff f97e 	bl	80013c6 <_ZN9ICM_209487setBankEh>
 80020ca:	4603      	mov	r3, r0
 80020cc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80020d0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80020d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80020d8:	429a      	cmp	r2, r3
 80020da:	d903      	bls.n	80020e4 <_ZN9ICM_2094813initializeDMPEv+0x3f8>
 80020dc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80020e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint8_t fifoPrio = 0xE4;
 80020e4:	23e4      	movs	r3, #228	; 0xe4
 80020e6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  result = write(AGB0_REG_SINGLE_FIFO_PRIORITY_SEL, &fifoPrio, 1); if (result > worstResult) worstResult = result;
 80020ea:	f107 023e 	add.w	r2, r7, #62	; 0x3e
 80020ee:	2301      	movs	r3, #1
 80020f0:	2126      	movs	r1, #38	; 0x26
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff fc54 	bl	80019a0 <_ZN9ICM_209485writeEhPhm>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80020fe:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002102:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002106:	429a      	cmp	r2, r3
 8002108:	d903      	bls.n	8002112 <_ZN9ICM_2094813initializeDMPEv+0x426>
 800210a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800210e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  // Configure Accel scaling to DMP
  // The DMP scales accel raw data internally to align 1g as 2^25
  // In order to align internal accel raw data 2^25 = 1g write 0x04000000 when FSR is 4g
  const unsigned char accScale[4] = {0x04, 0x00, 0x00, 0x00};
 8002112:	2304      	movs	r3, #4
 8002114:	63bb      	str	r3, [r7, #56]	; 0x38
  result = writeDMPmems(ACC_SCALE, 4, &accScale[0]); if (result > worstResult) worstResult = result; // Write accScale to ACC_SCALE DMP register
 8002116:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800211a:	2204      	movs	r2, #4
 800211c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff fd64 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 8002126:	4603      	mov	r3, r0
 8002128:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800212c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002130:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002134:	429a      	cmp	r2, r3
 8002136:	d903      	bls.n	8002140 <_ZN9ICM_2094813initializeDMPEv+0x454>
 8002138:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800213c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  // In order to output hardware unit data as configured FSR write 0x00040000 when FSR is 4g
  const unsigned char accScale2[4] = {0x00, 0x04, 0x00, 0x00};
 8002140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002144:	637b      	str	r3, [r7, #52]	; 0x34
  result = writeDMPmems(ACC_SCALE2, 4, &accScale2[0]); if (result > worstResult) worstResult = result; // Write accScale2 to ACC_SCALE2 DMP register
 8002146:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800214a:	2204      	movs	r2, #4
 800214c:	f240 41f4 	movw	r1, #1268	; 0x4f4
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fd4c 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 8002156:	4603      	mov	r3, r0
 8002158:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800215c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002160:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002164:	429a      	cmp	r2, r3
 8002166:	d903      	bls.n	8002170 <_ZN9ICM_2094813initializeDMPEv+0x484>
 8002168:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800216c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  // X = raw_x * CPASS_MTX_00 + raw_y * CPASS_MTX_01 + raw_z * CPASS_MTX_02
  // Y = raw_x * CPASS_MTX_10 + raw_y * CPASS_MTX_11 + raw_z * CPASS_MTX_12
  // Z = raw_x * CPASS_MTX_20 + raw_y * CPASS_MTX_21 + raw_z * CPASS_MTX_22
  // The AK09916 produces a 16-bit signed output in the range +/-32752 corresponding to +/-4912uT. 1uT = 6.66 ADU.
  // 2^30 / 6.66666 = 161061273 = 0x9999999
  const unsigned char mountMultiplierZero[4] = {0x00, 0x00, 0x00, 0x00};
 8002170:	2300      	movs	r3, #0
 8002172:	633b      	str	r3, [r7, #48]	; 0x30
  const unsigned char mountMultiplierPlus[4] = {0x09, 0x99, 0x99, 0x99};  // Value taken from InvenSense Nucleo example
 8002174:	4be3      	ldr	r3, [pc, #908]	; (8002504 <_ZN9ICM_2094813initializeDMPEv+0x818>)
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
  const unsigned char mountMultiplierMinus[4] = {0xF6, 0x66, 0x66, 0x67}; // Value taken from InvenSense Nucleo example
 8002178:	4be3      	ldr	r3, [pc, #908]	; (8002508 <_ZN9ICM_2094813initializeDMPEv+0x81c>)
 800217a:	62bb      	str	r3, [r7, #40]	; 0x28
  result = writeDMPmems(CPASS_MTX_00, 4, &mountMultiplierPlus[0]); if (result > worstResult) worstResult = result;
 800217c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002180:	2204      	movs	r2, #4
 8002182:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff fd31 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 800218c:	4603      	mov	r3, r0
 800218e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002192:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002196:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800219a:	429a      	cmp	r2, r3
 800219c:	d903      	bls.n	80021a6 <_ZN9ICM_2094813initializeDMPEv+0x4ba>
 800219e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80021a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  result = writeDMPmems(CPASS_MTX_01, 4, &mountMultiplierZero[0]); if (result > worstResult) worstResult = result;
 80021a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021aa:	2204      	movs	r2, #4
 80021ac:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff fd1c 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80021bc:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80021c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d903      	bls.n	80021d0 <_ZN9ICM_2094813initializeDMPEv+0x4e4>
 80021c8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80021cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  result = writeDMPmems(CPASS_MTX_02, 4, &mountMultiplierZero[0]); if (result > worstResult) worstResult = result;
 80021d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021d4:	2204      	movs	r2, #4
 80021d6:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff fd07 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80021e6:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80021ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d903      	bls.n	80021fa <_ZN9ICM_2094813initializeDMPEv+0x50e>
 80021f2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80021f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  result = writeDMPmems(CPASS_MTX_10, 4, &mountMultiplierZero[0]); if (result > worstResult) worstResult = result;
 80021fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021fe:	2204      	movs	r2, #4
 8002200:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff fcf2 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 800220a:	4603      	mov	r3, r0
 800220c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002210:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002214:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002218:	429a      	cmp	r2, r3
 800221a:	d903      	bls.n	8002224 <_ZN9ICM_2094813initializeDMPEv+0x538>
 800221c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002220:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  result = writeDMPmems(CPASS_MTX_11, 4, &mountMultiplierMinus[0]); if (result > worstResult) worstResult = result;
 8002224:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002228:	2204      	movs	r2, #4
 800222a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff fcdd 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 8002234:	4603      	mov	r3, r0
 8002236:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800223a:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800223e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002242:	429a      	cmp	r2, r3
 8002244:	d903      	bls.n	800224e <_ZN9ICM_2094813initializeDMPEv+0x562>
 8002246:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800224a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  result = writeDMPmems(CPASS_MTX_12, 4, &mountMultiplierZero[0]); if (result > worstResult) worstResult = result;
 800224e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002252:	2204      	movs	r2, #4
 8002254:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff fcc8 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 800225e:	4603      	mov	r3, r0
 8002260:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002264:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002268:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800226c:	429a      	cmp	r2, r3
 800226e:	d903      	bls.n	8002278 <_ZN9ICM_2094813initializeDMPEv+0x58c>
 8002270:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002274:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  result = writeDMPmems(CPASS_MTX_20, 4, &mountMultiplierZero[0]); if (result > worstResult) worstResult = result;
 8002278:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800227c:	2204      	movs	r2, #4
 800227e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fcb3 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 8002288:	4603      	mov	r3, r0
 800228a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800228e:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002292:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002296:	429a      	cmp	r2, r3
 8002298:	d903      	bls.n	80022a2 <_ZN9ICM_2094813initializeDMPEv+0x5b6>
 800229a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800229e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  result = writeDMPmems(CPASS_MTX_21, 4, &mountMultiplierZero[0]); if (result > worstResult) worstResult = result;
 80022a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022a6:	2204      	movs	r2, #4
 80022a8:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff fc9e 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80022b8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80022bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d903      	bls.n	80022cc <_ZN9ICM_2094813initializeDMPEv+0x5e0>
 80022c4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80022c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  result = writeDMPmems(CPASS_MTX_22, 4, &mountMultiplierMinus[0]); if (result > worstResult) worstResult = result;
 80022cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022d0:	2204      	movs	r2, #4
 80022d2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff fc89 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 80022dc:	4603      	mov	r3, r0
 80022de:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80022e2:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80022e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d903      	bls.n	80022f6 <_ZN9ICM_2094813initializeDMPEv+0x60a>
 80022ee:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80022f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  // Configure the B2S Mounting Matrix
  const unsigned char b2sMountMultiplierZero[4] = {0x00, 0x00, 0x00, 0x00};
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
  const unsigned char b2sMountMultiplierPlus[4] = {0x40, 0x00, 0x00, 0x00}; // Value taken from InvenSense Nucleo example
 80022fa:	2340      	movs	r3, #64	; 0x40
 80022fc:	623b      	str	r3, [r7, #32]
  result = writeDMPmems(B2S_MTX_00, 4, &b2sMountMultiplierPlus[0]); if (result > worstResult) worstResult = result;
 80022fe:	f107 0320 	add.w	r3, r7, #32
 8002302:	2204      	movs	r2, #4
 8002304:	f44f 6150 	mov.w	r1, #3328	; 0xd00
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff fc70 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 800230e:	4603      	mov	r3, r0
 8002310:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002314:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002318:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800231c:	429a      	cmp	r2, r3
 800231e:	d903      	bls.n	8002328 <_ZN9ICM_2094813initializeDMPEv+0x63c>
 8002320:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002324:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  result = writeDMPmems(B2S_MTX_01, 4, &b2sMountMultiplierZero[0]); if (result > worstResult) worstResult = result;
 8002328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232c:	2204      	movs	r2, #4
 800232e:	f640 5104 	movw	r1, #3332	; 0xd04
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff fc5b 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 8002338:	4603      	mov	r3, r0
 800233a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800233e:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002342:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002346:	429a      	cmp	r2, r3
 8002348:	d903      	bls.n	8002352 <_ZN9ICM_2094813initializeDMPEv+0x666>
 800234a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800234e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  result = writeDMPmems(B2S_MTX_02, 4, &b2sMountMultiplierZero[0]); if (result > worstResult) worstResult = result;
 8002352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002356:	2204      	movs	r2, #4
 8002358:	f640 5108 	movw	r1, #3336	; 0xd08
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff fc46 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 8002362:	4603      	mov	r3, r0
 8002364:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002368:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800236c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002370:	429a      	cmp	r2, r3
 8002372:	d903      	bls.n	800237c <_ZN9ICM_2094813initializeDMPEv+0x690>
 8002374:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002378:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  result = writeDMPmems(B2S_MTX_10, 4, &b2sMountMultiplierZero[0]); if (result > worstResult) worstResult = result;
 800237c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002380:	2204      	movs	r2, #4
 8002382:	f640 510c 	movw	r1, #3340	; 0xd0c
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff fc31 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 800238c:	4603      	mov	r3, r0
 800238e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002392:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002396:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800239a:	429a      	cmp	r2, r3
 800239c:	d903      	bls.n	80023a6 <_ZN9ICM_2094813initializeDMPEv+0x6ba>
 800239e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80023a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  result = writeDMPmems(B2S_MTX_11, 4, &b2sMountMultiplierPlus[0]); if (result > worstResult) worstResult = result;
 80023a6:	f107 0320 	add.w	r3, r7, #32
 80023aa:	2204      	movs	r2, #4
 80023ac:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff fc1c 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80023bc:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80023c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d903      	bls.n	80023d0 <_ZN9ICM_2094813initializeDMPEv+0x6e4>
 80023c8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80023cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  result = writeDMPmems(B2S_MTX_12, 4, &b2sMountMultiplierZero[0]); if (result > worstResult) worstResult = result;
 80023d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d4:	2204      	movs	r2, #4
 80023d6:	f640 5114 	movw	r1, #3348	; 0xd14
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff fc07 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80023e6:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80023ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d903      	bls.n	80023fa <_ZN9ICM_2094813initializeDMPEv+0x70e>
 80023f2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80023f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  result = writeDMPmems(B2S_MTX_20, 4, &b2sMountMultiplierZero[0]); if (result > worstResult) worstResult = result;
 80023fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023fe:	2204      	movs	r2, #4
 8002400:	f640 5118 	movw	r1, #3352	; 0xd18
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff fbf2 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 800240a:	4603      	mov	r3, r0
 800240c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002410:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002414:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002418:	429a      	cmp	r2, r3
 800241a:	d903      	bls.n	8002424 <_ZN9ICM_2094813initializeDMPEv+0x738>
 800241c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002420:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  result = writeDMPmems(B2S_MTX_21, 4, &b2sMountMultiplierZero[0]); if (result > worstResult) worstResult = result;
 8002424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002428:	2204      	movs	r2, #4
 800242a:	f640 511c 	movw	r1, #3356	; 0xd1c
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff fbdd 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 8002434:	4603      	mov	r3, r0
 8002436:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800243a:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800243e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002442:	429a      	cmp	r2, r3
 8002444:	d903      	bls.n	800244e <_ZN9ICM_2094813initializeDMPEv+0x762>
 8002446:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800244a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  result = writeDMPmems(B2S_MTX_22, 4, &b2sMountMultiplierPlus[0]); if (result > worstResult) worstResult = result;
 800244e:	f107 0320 	add.w	r3, r7, #32
 8002452:	2204      	movs	r2, #4
 8002454:	f44f 6152 	mov.w	r1, #3360	; 0xd20
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff fbc8 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 800245e:	4603      	mov	r3, r0
 8002460:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002464:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002468:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800246c:	429a      	cmp	r2, r3
 800246e:	d903      	bls.n	8002478 <_ZN9ICM_2094813initializeDMPEv+0x78c>
 8002470:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002474:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  // Configure the DMP Gyro Scaling Factor
  // @param[in] gyro_div Value written to GYRO_SMPLRT_DIV register, where
  //            0=1125Hz sample rate, 1=562.5Hz sample rate, ... 4=225Hz sample rate, ...
  //            10=102.2727Hz sample rate, ... etc.
  // @param[in] gyro_level 0=250 dps, 1=500 dps, 2=1000 dps, 3=2000 dps
  result = setGyroSF(19, 3); if (result > worstResult) worstResult = result; // 19 = 55Hz (see above), 3 = 2000dps (see above)
 8002478:	2203      	movs	r2, #3
 800247a:	2113      	movs	r1, #19
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff fc15 	bl	8001cac <_ZN9ICM_209489setGyroSFEhi>
 8002482:	4603      	mov	r3, r0
 8002484:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002488:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800248c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002490:	429a      	cmp	r2, r3
 8002492:	d903      	bls.n	800249c <_ZN9ICM_2094813initializeDMPEv+0x7b0>
 8002494:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002498:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  // Configure the Gyro full scale
  // 2000dps : 2^28
  // 1000dps : 2^27
  //  500dps : 2^26
  //  250dps : 2^25
  const unsigned char gyroFullScale[4] = {0x10, 0x00, 0x00, 0x00}; // 2000dps : 2^28
 800249c:	2310      	movs	r3, #16
 800249e:	61fb      	str	r3, [r7, #28]
  result = writeDMPmems(GYRO_FULLSCALE, 4, &gyroFullScale[0]); if (result > worstResult) worstResult = result;
 80024a0:	f107 031c 	add.w	r3, r7, #28
 80024a4:	2204      	movs	r2, #4
 80024a6:	f240 418c 	movw	r1, #1164	; 0x48c
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff fb9f 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80024b6:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80024ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80024be:	429a      	cmp	r2, r3
 80024c0:	d903      	bls.n	80024ca <_ZN9ICM_2094813initializeDMPEv+0x7de>
 80024c2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80024c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  // Configure the Accel Only Gain: 15252014 (225Hz) 30504029 (112Hz) 61117001 (56Hz)
  const unsigned char accelOnlyGain[4] = {0x03, 0xA4, 0x92, 0x49}; // 56Hz
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <_ZN9ICM_2094813initializeDMPEv+0x820>)
 80024cc:	61bb      	str	r3, [r7, #24]
  //const unsigned char accelOnlyGain[4] = {0x00, 0xE8, 0xBA, 0x2E}; // 225Hz
  //const unsigned char accelOnlyGain[4] = {0x01, 0xD1, 0x74, 0x5D}; // 112Hz
  result = writeDMPmems(ACCEL_ONLY_GAIN, 4, &accelOnlyGain[0]); if (result > worstResult) worstResult = result;
 80024ce:	f107 0318 	add.w	r3, r7, #24
 80024d2:	2204      	movs	r2, #4
 80024d4:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff fb88 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 80024de:	4603      	mov	r3, r0
 80024e0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80024e4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80024e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d903      	bls.n	80024f8 <_ZN9ICM_2094813initializeDMPEv+0x80c>
 80024f0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80024f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  // Configure the Accel Alpha Var: 1026019965 (225Hz) 977872018 (112Hz) 882002213 (56Hz)
  const unsigned char accelAlphaVar[4] = {0x34, 0x92, 0x49, 0x25}; // 56Hz
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <_ZN9ICM_2094813initializeDMPEv+0x824>)
 80024fa:	617b      	str	r3, [r7, #20]
  //const unsigned char accelAlphaVar[4] = {0x3D, 0x27, 0xD2, 0x7D}; // 225Hz
  //const unsigned char accelAlphaVar[4] = {0x3A, 0x49, 0x24, 0x92}; // 112Hz
  result = writeDMPmems(ACCEL_ALPHA_VAR, 4, &accelAlphaVar[0]); if (result > worstResult) worstResult = result;
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	2204      	movs	r2, #4
 8002502:	e007      	b.n	8002514 <_ZN9ICM_2094813initializeDMPEv+0x828>
 8002504:	99999909 	.word	0x99999909
 8002508:	676666f6 	.word	0x676666f6
 800250c:	4992a403 	.word	0x4992a403
 8002510:	25499234 	.word	0x25499234
 8002514:	f44f 61b6 	mov.w	r1, #1456	; 0x5b0
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff fb68 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 800251e:	4603      	mov	r3, r0
 8002520:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002524:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002528:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800252c:	429a      	cmp	r2, r3
 800252e:	d903      	bls.n	8002538 <_ZN9ICM_2094813initializeDMPEv+0x84c>
 8002530:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002534:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  // Configure the Accel A Var: 47721859 (225Hz) 95869806 (112Hz) 191739611 (56Hz)
  const unsigned char accelAVar[4] = {0x0B, 0x6D, 0xB6, 0xDB}; // 56Hz
 8002538:	4b25      	ldr	r3, [pc, #148]	; (80025d0 <_ZN9ICM_2094813initializeDMPEv+0x8e4>)
 800253a:	613b      	str	r3, [r7, #16]
  //const unsigned char accelAVar[4] = {0x02, 0xD8, 0x2D, 0x83}; // 225Hz
  //const unsigned char accelAVar[4] = {0x05, 0xB6, 0xDB, 0x6E}; // 112Hz
  result = writeDMPmems(ACCEL_A_VAR, 4, &accelAVar[0]); if (result > worstResult) worstResult = result;
 800253c:	f107 0310 	add.w	r3, r7, #16
 8002540:	2204      	movs	r2, #4
 8002542:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff fb51 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 800254c:	4603      	mov	r3, r0
 800254e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002552:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002556:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800255a:	429a      	cmp	r2, r3
 800255c:	d903      	bls.n	8002566 <_ZN9ICM_2094813initializeDMPEv+0x87a>
 800255e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002562:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  // Configure the Accel Cal Rate
  const unsigned char accelCalRate[4] = {0x00, 0x00}; // Value taken from InvenSense Nucleo example
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
  result = writeDMPmems(ACCEL_CAL_RATE, 2, &accelCalRate[0]); if (result > worstResult) worstResult = result;
 800256a:	f107 030c 	add.w	r3, r7, #12
 800256e:	2202      	movs	r2, #2
 8002570:	f240 51e4 	movw	r1, #1508	; 0x5e4
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff fb3a 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 800257a:	4603      	mov	r3, r0
 800257c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002580:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002584:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002588:	429a      	cmp	r2, r3
 800258a:	d903      	bls.n	8002594 <_ZN9ICM_2094813initializeDMPEv+0x8a8>
 800258c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002590:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  // Configure the Compass Time Buffer. The I2C Master ODR Configuration (see above) sets the magnetometer read rate to 68.75Hz.
  // Let's set the Compass Time Buffer to 69 (Hz).
  const unsigned char compassRate[2] = {0x00, 0x45}; // 69Hz
 8002594:	f44f 438a 	mov.w	r3, #17664	; 0x4500
 8002598:	813b      	strh	r3, [r7, #8]
  result = writeDMPmems(CPASS_TIME_BUFFER, 2, &compassRate[0]); if (result > worstResult) worstResult = result;
 800259a:	f107 0308 	add.w	r3, r7, #8
 800259e:	2202      	movs	r2, #2
 80025a0:	f240 710e 	movw	r1, #1806	; 0x70e
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff fb22 	bl	8001bee <_ZN9ICM_2094812writeDMPmemsEtjPKh>
 80025aa:	4603      	mov	r3, r0
 80025ac:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80025b0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80025b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d903      	bls.n	80025c4 <_ZN9ICM_2094813initializeDMPEv+0x8d8>
 80025bc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80025c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  // This would be the most efficient way of getting the DMP data, instead of polling the FIFO
  //result = intEnableDMP(true); if (result > worstResult) worstResult = result;

#endif

  return worstResult;
 80025c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3750      	adds	r7, #80	; 0x50
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	dbb66d0b 	.word	0xdbb66d0b

080025d4 <_ZN13ICM_20948_I2CC1Ev>:

// I2C
ICM_20948_I2C::ICM_20948_I2C()
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3304      	adds	r3, #4
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fed7 	bl	8001394 <_ZN9ICM_20948C1Ev>
 80025e6:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <_ZN13ICM_20948_I2CC1Ev+0x24>)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	601a      	str	r2, [r3, #0]
{
}
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	08009014 	.word	0x08009014

080025fc <_ZN13ICM_20948_I2C5beginEv>:

ICM_20948_Status_e ICM_20948_I2C::begin()
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
//  }

  // _i2c->begin(); // Moved into user's sketch

  // Set up the serif
  _serif.write = ICM_20948_write_I2C;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a1f      	ldr	r2, [pc, #124]	; (8002684 <_ZN13ICM_20948_I2C5beginEv+0x88>)
 8002608:	651a      	str	r2, [r3, #80]	; 0x50
  _serif.read = ICM_20948_read_I2C;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a1e      	ldr	r2, [pc, #120]	; (8002688 <_ZN13ICM_20948_I2C5beginEv+0x8c>)
 800260e:	655a      	str	r2, [r3, #84]	; 0x54
  _serif.user = (void *)this; // refer to yourself in the user field
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	659a      	str	r2, [r3, #88]	; 0x58

  // Link the serif
  _device._serif = &_serif;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	609a      	str	r2, [r3, #8]

#if defined(ICM_20948_USE_DMP)
  _device._dmp_firmware_available = true; // Initialize _dmp_firmware_available
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	731a      	strb	r2, [r3, #12]
#else
  _device._dmp_firmware_available = false; // Initialize _dmp_firmware_available
#endif

  _device._firmware_loaded = false; // Initialize _firmware_loaded
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	735a      	strb	r2, [r3, #13]
  _device._last_bank = 255;         // Initialize _last_bank. Make it invalid. It will be set by the first call of ICM_20948_set_bank.
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	22ff      	movs	r2, #255	; 0xff
 8002630:	739a      	strb	r2, [r3, #14]
  _device._last_mems_bank = 255;    // Initialize _last_mems_bank. Make it invalid. It will be set by the first call of inv_icm20948_write_mems.
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	22ff      	movs	r2, #255	; 0xff
 8002636:	73da      	strb	r2, [r3, #15]
  _device._gyroSF = 0;              // Use this to record the GyroSF, calculated by inv_icm20948_set_gyro_sf
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	611a      	str	r2, [r3, #16]
  _device._gyroSFpll = 0;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	751a      	strb	r2, [r3, #20]
  _device._enabled_Android_0 = 0;      // Keep track of which Android sensors are enabled: 0-31
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	619a      	str	r2, [r3, #24]
  _device._enabled_Android_1 = 0;      // Keep track of which Android sensors are enabled: 32-
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	61da      	str	r2, [r3, #28]
  _device._enabled_Android_intr_0 = 0; // Keep track of which Android sensor interrupts are enabled: 0-31
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	621a      	str	r2, [r3, #32]
  _device._enabled_Android_intr_1 = 0; // Keep track of which Android sensor interrupts are enabled: 32-
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	625a      	str	r2, [r3, #36]	; 0x24

  // Perform default startup
  // Do a minimal startupDefault if using the DMP. User can always call startupDefault(false) manually if required.
  status = startupDefault(_device._dmp_firmware_available);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	1d1a      	adds	r2, r3, #4
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	7b1b      	ldrb	r3, [r3, #12]
 8002664:	4619      	mov	r1, r3
 8002666:	4610      	mov	r0, r2
 8002668:	f7ff f8c7 	bl	80017fa <_ZN9ICM_2094814startupDefaultEb>
 800266c:	4603      	mov	r3, r0
 800266e:	461a      	mov	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  {
//    debugPrint(F("ICM_20948_I2C::begin: startupDefault returned: "));
//    debugPrintStatus(status);
//    debugPrintln(F(""));
  }
  return status;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	0800281b 	.word	0x0800281b
 8002688:	08002855 	.word	0x08002855

0800268c <_ZN9ICM_2094819startupMagnetometerEb>:

ICM_20948_Status_e ICM_20948::startupMagnetometer(bool minimal)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08c      	sub	sp, #48	; 0x30
 8002690:	af08      	add	r7, sp, #32
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	70fb      	strb	r3, [r7, #3]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8002698:	2300      	movs	r3, #0
 800269a:	73bb      	strb	r3, [r7, #14]

  i2cMasterPassthrough(false); //Do not connect the SDA/SCL pins to AUX_DA/AUX_CL
 800269c:	2100      	movs	r1, #0
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7fe fff4 	bl	800168c <_ZN9ICM_2094820i2cMasterPassthroughEb>
  i2cMasterEnable(true);
 80026a4:	2101      	movs	r1, #1
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff f809 	bl	80016be <_ZN9ICM_2094815i2cMasterEnableEb>

  resetMag();
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff f9bf 	bl	8001a30 <_ZN9ICM_209488resetMagEv>

  //After a ICM reset the Mag sensor may stop responding over the I2C master
  //Reset the Master I2C until it responds
  uint8_t tries = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	73fb      	strb	r3, [r7, #15]
  while (tries < MAX_MAGNETOMETER_STARTS)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	785b      	ldrb	r3, [r3, #1]
 80026ba:	7bfa      	ldrb	r2, [r7, #15]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d212      	bcs.n	80026e6 <_ZN9ICM_2094819startupMagnetometerEb+0x5a>
  {
    tries++;
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	3301      	adds	r3, #1
 80026c4:	73fb      	strb	r3, [r7, #15]

    //See if we can read the WhoIAm register correctly
    retval = magWhoIAm();
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f866 	bl	8002798 <_ZN9ICM_209489magWhoIAmEv>
 80026cc:	4603      	mov	r3, r0
 80026ce:	73bb      	strb	r3, [r7, #14]
    if (retval == ICM_20948_Stat_Ok)
 80026d0:	7bbb      	ldrb	r3, [r7, #14]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d006      	beq.n	80026e4 <_ZN9ICM_2094819startupMagnetometerEb+0x58>
      break; //WIA matched!

    i2cMasterReset(); //Otherwise, reset the master I2C and try again
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff f80a 	bl	80016f0 <_ZN9ICM_2094814i2cMasterResetEv>

    delay(10);
 80026dc:	200a      	movs	r0, #10
 80026de:	f003 ff39 	bl	8006554 <HAL_Delay>
  while (tries < MAX_MAGNETOMETER_STARTS)
 80026e2:	e7e8      	b.n	80026b6 <_ZN9ICM_2094819startupMagnetometerEb+0x2a>
      break; //WIA matched!
 80026e4:	bf00      	nop
  }

  if (tries == MAX_MAGNETOMETER_STARTS)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	785b      	ldrb	r3, [r3, #1]
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d107      	bne.n	8002700 <_ZN9ICM_2094819startupMagnetometerEb+0x74>
  {
//    debugPrint(F("ICM_20948::startupMagnetometer: reached MAX_MAGNETOMETER_STARTS ("));
//    debugPrintf((int)MAX_MAGNETOMETER_STARTS);
//    debugPrintln(F("). Returning ICM_20948_Stat_WrongID"));
    status = ICM_20948_Stat_WrongID;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2204      	movs	r2, #4
 80026f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return status;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80026fe:	e047      	b.n	8002790 <_ZN9ICM_2094819startupMagnetometerEb+0x104>
//    else
//      debugPrintln(F(" tries"));
  }

  //Return now if minimal is true. The mag will be configured manually for the DMP
  if (minimal) // Return now if minimal is true
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <_ZN9ICM_2094819startupMagnetometerEb+0x82>
  {
//    debugPrintln(F("ICM_20948::startupMagnetometer: minimal startup complete!"));
    return status;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800270c:	e040      	b.n	8002790 <_ZN9ICM_2094819startupMagnetometerEb+0x104>
  }

  //Set up magnetometer
  AK09916_CNTL2_Reg_t reg;
  reg.MODE = AK09916_mode_cont_100hz;
 800270e:	7b3b      	ldrb	r3, [r7, #12]
 8002710:	2208      	movs	r2, #8
 8002712:	f362 0304 	bfi	r3, r2, #0, #5
 8002716:	733b      	strb	r3, [r7, #12]
  reg.reserved_0 = 0; // Make sure the unused bits are clear. Probably redundant, but prevents confusion when looking at the I2C traffic
 8002718:	7b3b      	ldrb	r3, [r7, #12]
 800271a:	f36f 1347 	bfc	r3, #5, #3
 800271e:	733b      	strb	r3, [r7, #12]
  retval = writeMag(AK09916_REG_CNTL2, (uint8_t *)&reg);
 8002720:	f107 030c 	add.w	r3, r7, #12
 8002724:	461a      	mov	r2, r3
 8002726:	2131      	movs	r1, #49	; 0x31
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff f967 	bl	80019fc <_ZN9ICM_209488writeMagE18AK09916_Reg_Addr_ePh>
 800272e:	4603      	mov	r3, r0
 8002730:	73bb      	strb	r3, [r7, #14]
  if (retval != ICM_20948_Stat_Ok)
 8002732:	7bbb      	ldrb	r3, [r7, #14]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d007      	beq.n	8002748 <_ZN9ICM_2094819startupMagnetometerEb+0xbc>
  {
//    debugPrint(F("ICM_20948::startupMagnetometer: writeMag returned: "));
//    debugPrintStatus(retval);
//    debugPrintln(F(""));
    status = retval;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	7bba      	ldrb	r2, [r7, #14]
 800273c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return status;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002746:	e023      	b.n	8002790 <_ZN9ICM_2094819startupMagnetometerEb+0x104>
  }

  retval = i2cControllerConfigurePeripheral(0, MAG_AK09916_I2C_ADDR, AK09916_REG_ST1, 9, true, true, false, false, false);
 8002748:	2300      	movs	r3, #0
 800274a:	9306      	str	r3, [sp, #24]
 800274c:	2300      	movs	r3, #0
 800274e:	9305      	str	r3, [sp, #20]
 8002750:	2300      	movs	r3, #0
 8002752:	9304      	str	r3, [sp, #16]
 8002754:	2300      	movs	r3, #0
 8002756:	9303      	str	r3, [sp, #12]
 8002758:	2301      	movs	r3, #1
 800275a:	9302      	str	r3, [sp, #8]
 800275c:	2301      	movs	r3, #1
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	2309      	movs	r3, #9
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2310      	movs	r3, #16
 8002766:	220c      	movs	r2, #12
 8002768:	2100      	movs	r1, #0
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7fe ffd5 	bl	800171a <_ZN9ICM_2094832i2cControllerConfigurePeripheralEhhhhbbbbbh>
 8002770:	4603      	mov	r3, r0
 8002772:	73bb      	strb	r3, [r7, #14]
  if (retval != ICM_20948_Stat_Ok)
 8002774:	7bbb      	ldrb	r3, [r7, #14]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <_ZN9ICM_2094819startupMagnetometerEb+0xfe>
  {
//    debugPrint(F("ICM_20948::startupMagnetometer: i2cMasterConfigurePeripheral returned: "));
//    debugPrintStatus(retval);
//    debugPrintln(F(""));
    status = retval;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	7bba      	ldrb	r2, [r7, #14]
 800277e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return status;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002788:	e002      	b.n	8002790 <_ZN9ICM_2094819startupMagnetometerEb+0x104>
  }

  return status;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <_ZN9ICM_209489magWhoIAmEv>:

ICM_20948_Status_e ICM_20948::magWhoIAm(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 80027a0:	2300      	movs	r3, #0
 80027a2:	73fb      	strb	r3, [r7, #15]

  uint8_t whoiam1, whoiam2;
  whoiam1 = readMag(AK09916_REG_WIA1);
 80027a4:	2100      	movs	r1, #0
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff f915 	bl	80019d6 <_ZN9ICM_209487readMagE18AK09916_Reg_Addr_e>
 80027ac:	4603      	mov	r3, r0
 80027ae:	73bb      	strb	r3, [r7, #14]
  // readMag calls i2cMasterSingleR which calls ICM_20948_i2c_master_single_r
  // i2cMasterSingleR updates status so it is OK to set retval to status here
  retval = status;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80027b6:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <_ZN9ICM_209489magWhoIAmEv+0x2a>
//    debugPrint(F("ICM_20948::magWhoIAm: whoiam1: "));
//    debugPrintf((int)whoiam1);
//    debugPrint(F(" (should be 72) readMag set status to: "));
//    debugPrintStatus(status);
//    debugPrintln(F(""));
    return retval;
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	e027      	b.n	8002812 <_ZN9ICM_209489magWhoIAmEv+0x7a>
  }
  whoiam2 = readMag(AK09916_REG_WIA2);
 80027c2:	2101      	movs	r1, #1
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff f906 	bl	80019d6 <_ZN9ICM_209487readMagE18AK09916_Reg_Addr_e>
 80027ca:	4603      	mov	r3, r0
 80027cc:	737b      	strb	r3, [r7, #13]
  // readMag calls i2cMasterSingleR which calls ICM_20948_i2c_master_single_r
  // i2cMasterSingleR updates status so it is OK to set retval to status here
  retval = status;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80027d4:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <_ZN9ICM_209489magWhoIAmEv+0x48>
//    debugPrint(F(" (should be 72) whoiam2: "));
//    debugPrintf((int)whoiam2);
//    debugPrint(F(" (should be 9) readMag set status to: "));
//    debugPrintStatus(status);
//    debugPrintln(F(""));
    return retval;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	e018      	b.n	8002812 <_ZN9ICM_209489magWhoIAmEv+0x7a>
  }

  if ((whoiam1 == (MAG_AK09916_WHO_AM_I >> 8)) && (whoiam2 == (MAG_AK09916_WHO_AM_I & 0xFF)))
 80027e0:	7bbb      	ldrb	r3, [r7, #14]
 80027e2:	2b48      	cmp	r3, #72	; 0x48
 80027e4:	d10c      	bne.n	8002800 <_ZN9ICM_209489magWhoIAmEv+0x68>
 80027e6:	7b7b      	ldrb	r3, [r7, #13]
 80027e8:	2b09      	cmp	r3, #9
 80027ea:	d109      	bne.n	8002800 <_ZN9ICM_209489magWhoIAmEv+0x68>
  {
    retval = ICM_20948_Stat_Ok;
 80027ec:	2300      	movs	r3, #0
 80027ee:	73fb      	strb	r3, [r7, #15]
    status = retval;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return status;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80027fe:	e008      	b.n	8002812 <_ZN9ICM_209489magWhoIAmEv+0x7a>
//  debugPrintf((int)whoiam1);
//  debugPrint(F(" (should be 72) whoiam2: "));
//  debugPrintf((int)whoiam2);
//  debugPrintln(F(" (should be 9). Returning ICM_20948_Stat_WrongID"));

  retval = ICM_20948_Stat_WrongID;
 8002800:	2304      	movs	r3, #4
 8002802:	73fb      	strb	r3, [r7, #15]
  status = retval;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	7bfa      	ldrb	r2, [r7, #15]
 8002808:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  return status;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <_Z19ICM_20948_write_I2ChPhmPv>:
//  return status;
//}

// serif functions for the I2C and SPI classes
ICM_20948_Status_e ICM_20948_write_I2C(uint8_t reg, uint8_t *data, uint32_t len, void *user)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	4603      	mov	r3, r0
 8002828:	73fb      	strb	r3, [r7, #15]
  if (user == NULL)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <_Z19ICM_20948_write_I2ChPhmPv+0x1a>
  {
    return ICM_20948_Stat_ParamErr;
 8002830:	2303      	movs	r3, #3
 8002832:	e00b      	b.n	800284c <_Z19ICM_20948_write_I2ChPhmPv+0x32>
  }
//  TwoWire *_i2c = ((ICM_20948_I2C *)user)->_i2c; // Cast user field to ICM_20948_I2C type and extract the I2C interface pointer
  uint8_t addr = ((ICM_20948_I2C *)user)->_addr;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800283a:	75fb      	strb	r3, [r7, #23]
//  _i2c->beginTransmission(addr);
//  _i2c->write(reg);
//  _i2c->write(data, (uint8_t)len);
//  _i2c->endTransmission();

  I2C_write(0x68, reg, len, data);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	b2da      	uxtb	r2, r3
 8002840:	7bf9      	ldrb	r1, [r7, #15]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2068      	movs	r0, #104	; 0x68
 8002846:	f003 fcc7 	bl	80061d8 <I2C_write>
  //     delay(10);
  // }

  // delay(10);

  return ICM_20948_Stat_Ok;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <_Z18ICM_20948_read_I2ChPhmPv>:

ICM_20948_Status_e ICM_20948_read_I2C(uint8_t reg, uint8_t *buff, uint32_t len, void *user)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	4603      	mov	r3, r0
 8002862:	73fb      	strb	r3, [r7, #15]
  if (user == NULL)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <_Z18ICM_20948_read_I2ChPhmPv+0x1a>
  {
    return ICM_20948_Stat_ParamErr;
 800286a:	2303      	movs	r3, #3
 800286c:	e00b      	b.n	8002886 <_Z18ICM_20948_read_I2ChPhmPv+0x32>
  }
//  TwoWire *_i2c = ((ICM_20948_I2C *)user)->_i2c;
  uint8_t addr = ((ICM_20948_I2C *)user)->_addr;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002874:	75fb      	strb	r3, [r7, #23]
//    for (uint8_t i = 0; i < len; i++)
//    {
//      buff[i] = _i2c->read();
//    }

  I2C_read(0x68, reg, len, buff);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	b2da      	uxtb	r2, r3
 800287a:	7bf9      	ldrb	r1, [r7, #15]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2068      	movs	r0, #104	; 0x68
 8002880:	f003 fccc 	bl	800621c <I2C_read>
    return ICM_20948_Stat_Ok;
 8002884:	2300      	movs	r3, #0
  if (len != 0)
  {
    return ICM_20948_Stat_NoData;
  }
  return ICM_20948_Stat_Ok;
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <ICM_20948_init_struct>:

// Private function prototypes

// Function definitions
ICM_20948_Status_e ICM_20948_init_struct(ICM_20948_Device_t *pdev)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  // Initialize all elements by 0 except for _last_bank
  // Initialize _last_bank to 4 (invalid bank number)
  // so ICM_20948_set_bank function does not skip issuing bank change operation
  static const ICM_20948_Device_t init_device = { ._last_bank = 4 };
  *pdev = init_device;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4618      	mov	r0, r3
 800289a:	232c      	movs	r3, #44	; 0x2c
 800289c:	461a      	mov	r2, r3
 800289e:	2100      	movs	r1, #0
 80028a0:	f006 fb98 	bl	8008fd4 <memset>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2204      	movs	r2, #4
 80028a8:	719a      	strb	r2, [r3, #6]
  return ICM_20948_Stat_Ok;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <ICM_20948_execute_w>:
  pdev->_serif = s;
  return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
 80028b4:	b590      	push	{r4, r7, lr}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	460b      	mov	r3, r1
 80028c2:	72fb      	strb	r3, [r7, #11]
  if (pdev->_serif->write == NULL)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <ICM_20948_execute_w+0x1e>
  {
    return ICM_20948_Stat_NotImpl;
 80028ce:	2302      	movs	r3, #2
 80028d0:	e00a      	b.n	80028e8 <ICM_20948_execute_w+0x34>
  }
  return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681c      	ldr	r4, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	7af8      	ldrb	r0, [r7, #11]
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	47a0      	blx	r4
 80028e6:	4603      	mov	r3, r0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd90      	pop	{r4, r7, pc}

080028f0 <ICM_20948_execute_r>:

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	460b      	mov	r3, r1
 80028fe:	72fb      	strb	r3, [r7, #11]
  if (pdev->_serif->read == NULL)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <ICM_20948_execute_r+0x1e>
  {
    return ICM_20948_Stat_NotImpl;
 800290a:	2302      	movs	r3, #2
 800290c:	e00a      	b.n	8002924 <ICM_20948_execute_r+0x34>
  }
  return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685c      	ldr	r4, [r3, #4]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	7af8      	ldrb	r0, [r7, #11]
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	47a0      	blx	r4
 8002922:	4603      	mov	r3, r0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	bd90      	pop	{r4, r7, pc}

0800292c <ICM_20948_i2c_controller_periph4_txn>:

//Transact directly with an I2C device, one byte at a time
//Used to configure a device before it is setup into a normal 0-3 peripheral slot
ICM_20948_Status_e ICM_20948_i2c_controller_periph4_txn(ICM_20948_Device_t *pdev, uint8_t addr, uint8_t reg, uint8_t *data, uint8_t len, bool Rw, bool send_reg_addr)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	607b      	str	r3, [r7, #4]
 8002936:	460b      	mov	r3, r1
 8002938:	72fb      	strb	r3, [r7, #11]
 800293a:	4613      	mov	r3, r2
 800293c:	72bb      	strb	r3, [r7, #10]
  // Thanks MikeFair! // https://github.com/kriswiner/MPU9250/issues/86
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 800293e:	2300      	movs	r3, #0
 8002940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  addr = (((Rw) ? 0x80 : 0x00) | addr);
 8002944:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <ICM_20948_i2c_controller_periph4_txn+0x26>
 800294c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002950:	e000      	b.n	8002954 <ICM_20948_i2c_controller_periph4_txn+0x28>
 8002952:	2200      	movs	r2, #0
 8002954:	7afb      	ldrb	r3, [r7, #11]
 8002956:	b25b      	sxtb	r3, r3
 8002958:	4313      	orrs	r3, r2
 800295a:	b25b      	sxtb	r3, r3
 800295c:	b2db      	uxtb	r3, r3
 800295e:	72fb      	strb	r3, [r7, #11]

  retval = ICM_20948_set_bank(pdev, 3);
 8002960:	2103      	movs	r1, #3
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f938 	bl	8002bd8 <ICM_20948_set_bank>
 8002968:	4603      	mov	r3, r0
 800296a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_PERIPH4_ADDR, (uint8_t *)&addr, 1);
 800296e:	f107 020b 	add.w	r2, r7, #11
 8002972:	2301      	movs	r3, #1
 8002974:	2113      	movs	r1, #19
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f7ff ff9c 	bl	80028b4 <ICM_20948_execute_w>
 800297c:	4603      	mov	r3, r0
 800297e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (retval != ICM_20948_Stat_Ok)
 8002982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <ICM_20948_i2c_controller_periph4_txn+0x64>
  {
    return retval;
 800298a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800298e:	e0eb      	b.n	8002b68 <ICM_20948_i2c_controller_periph4_txn+0x23c>
  }

  retval = ICM_20948_set_bank(pdev, 3);
 8002990:	2103      	movs	r1, #3
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f920 	bl	8002bd8 <ICM_20948_set_bank>
 8002998:	4603      	mov	r3, r0
 800299a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_PERIPH4_REG, (uint8_t *)&reg, 1);
 800299e:	f107 020a 	add.w	r2, r7, #10
 80029a2:	2301      	movs	r3, #1
 80029a4:	2114      	movs	r1, #20
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f7ff ff84 	bl	80028b4 <ICM_20948_execute_w>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (retval != ICM_20948_Stat_Ok)
 80029b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <ICM_20948_i2c_controller_periph4_txn+0x94>
  {
    return retval;
 80029ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029be:	e0d3      	b.n	8002b68 <ICM_20948_i2c_controller_periph4_txn+0x23c>
  }

  ICM_20948_I2C_PERIPH4_CTRL_t ctrl;
  ctrl.EN = 1;
 80029c0:	7d3b      	ldrb	r3, [r7, #20]
 80029c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c6:	753b      	strb	r3, [r7, #20]
  ctrl.INT_EN = false;
 80029c8:	7d3b      	ldrb	r3, [r7, #20]
 80029ca:	f36f 1386 	bfc	r3, #6, #1
 80029ce:	753b      	strb	r3, [r7, #20]
  ctrl.DLY = 0;
 80029d0:	7d3b      	ldrb	r3, [r7, #20]
 80029d2:	f36f 0304 	bfc	r3, #0, #5
 80029d6:	753b      	strb	r3, [r7, #20]
  ctrl.REG_DIS = !send_reg_addr;
 80029d8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80029dc:	f083 0301 	eor.w	r3, r3, #1
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	7d3b      	ldrb	r3, [r7, #20]
 80029e4:	f362 1345 	bfi	r3, r2, #5, #1
 80029e8:	753b      	strb	r3, [r7, #20]

  ICM_20948_I2C_MST_STATUS_t i2c_mst_status;
  bool txn_failed = false;
 80029ea:	2300      	movs	r3, #0
 80029ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint16_t nByte = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	84bb      	strh	r3, [r7, #36]	; 0x24

  while (nByte < len)
 80029f4:	e0a7      	b.n	8002b46 <ICM_20948_i2c_controller_periph4_txn+0x21a>
  {
    if (!Rw)
 80029f6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80029fa:	f083 0301 	eor.w	r3, r3, #1
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d018      	beq.n	8002a36 <ICM_20948_i2c_controller_periph4_txn+0x10a>
    {
      retval = ICM_20948_set_bank(pdev, 3);
 8002a04:	2103      	movs	r1, #3
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 f8e6 	bl	8002bd8 <ICM_20948_set_bank>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_PERIPH4_DO, (uint8_t *)&(data[nByte]), 1);
 8002a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	441a      	add	r2, r3
 8002a18:	2301      	movs	r3, #1
 8002a1a:	2116      	movs	r1, #22
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f7ff ff49 	bl	80028b4 <ICM_20948_execute_w>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if (retval != ICM_20948_Stat_Ok)
 8002a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <ICM_20948_i2c_controller_periph4_txn+0x10a>
      {
        return retval;
 8002a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a34:	e098      	b.n	8002b68 <ICM_20948_i2c_controller_periph4_txn+0x23c>
      }
    }

    // Kick off txn
    retval = ICM_20948_set_bank(pdev, 3);
 8002a36:	2103      	movs	r1, #3
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 f8cd 	bl	8002bd8 <ICM_20948_set_bank>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_PERIPH4_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_PERIPH4_CTRL_t));
 8002a44:	f107 0214 	add.w	r2, r7, #20
 8002a48:	2301      	movs	r3, #1
 8002a4a:	2115      	movs	r1, #21
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f7ff ff31 	bl	80028b4 <ICM_20948_execute_w>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (retval != ICM_20948_Stat_Ok)
 8002a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <ICM_20948_i2c_controller_periph4_txn+0x13a>
    {
      return retval;
 8002a60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a64:	e080      	b.n	8002b68 <ICM_20948_i2c_controller_periph4_txn+0x23c>
    }

    // long tsTimeout = millis() + 3000;  // Emergency timeout for txn (hard coded to 3 secs)
    uint32_t max_cycles = 1000;
 8002a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a6a:	61bb      	str	r3, [r7, #24]
    uint32_t count = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	623b      	str	r3, [r7, #32]
    bool peripheral4Done = false;
 8002a70:	2300      	movs	r3, #0
 8002a72:	77fb      	strb	r3, [r7, #31]
    while (!peripheral4Done)
 8002a74:	e02a      	b.n	8002acc <ICM_20948_i2c_controller_periph4_txn+0x1a0>
    {
      retval = ICM_20948_set_bank(pdev, 0);
 8002a76:	2100      	movs	r1, #0
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 f8ad 	bl	8002bd8 <ICM_20948_set_bank>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      retval = ICM_20948_execute_r(pdev, AGB0_REG_I2C_MST_STATUS, (uint8_t *)&i2c_mst_status, 1);
 8002a84:	f107 0210 	add.w	r2, r7, #16
 8002a88:	2301      	movs	r3, #1
 8002a8a:	2117      	movs	r1, #23
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f7ff ff2f 	bl	80028f0 <ICM_20948_execute_r>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

      peripheral4Done = (i2c_mst_status.I2C_PERIPH4_DONE /*| (millis() > tsTimeout) */); //Avoid forever-loops
 8002a98:	7c3b      	ldrb	r3, [r7, #16]
 8002a9a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf14      	ite	ne
 8002aa4:	2301      	movne	r3, #1
 8002aa6:	2300      	moveq	r3, #0
 8002aa8:	77fb      	strb	r3, [r7, #31]
      peripheral4Done |= (count >= max_cycles);
 8002aaa:	7ffb      	ldrb	r3, [r7, #31]
 8002aac:	6a39      	ldr	r1, [r7, #32]
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4291      	cmp	r1, r2
 8002ab2:	bf2c      	ite	cs
 8002ab4:	2201      	movcs	r2, #1
 8002ab6:	2200      	movcc	r2, #0
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	4313      	orrs	r3, r2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf14      	ite	ne
 8002ac0:	2301      	movne	r3, #1
 8002ac2:	2300      	moveq	r3, #0
 8002ac4:	77fb      	strb	r3, [r7, #31]
      count++;
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	623b      	str	r3, [r7, #32]
    while (!peripheral4Done)
 8002acc:	7ffb      	ldrb	r3, [r7, #31]
 8002ace:	f083 0301 	eor.w	r3, r3, #1
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1ce      	bne.n	8002a76 <ICM_20948_i2c_controller_periph4_txn+0x14a>
    }
    txn_failed = (i2c_mst_status.I2C_PERIPH4_NACK /*| (millis() > tsTimeout) */);
 8002ad8:	7c3b      	ldrb	r3, [r7, #16]
 8002ada:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf14      	ite	ne
 8002ae4:	2301      	movne	r3, #1
 8002ae6:	2300      	moveq	r3, #0
 8002ae8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    txn_failed |= (count >= max_cycles);
 8002aec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002af0:	6a39      	ldr	r1, [r7, #32]
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4291      	cmp	r1, r2
 8002af6:	bf2c      	ite	cs
 8002af8:	2201      	movcs	r2, #1
 8002afa:	2200      	movcc	r2, #0
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	4313      	orrs	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf14      	ite	ne
 8002b04:	2301      	movne	r3, #1
 8002b06:	2300      	moveq	r3, #0
 8002b08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if (txn_failed)
 8002b0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d120      	bne.n	8002b56 <ICM_20948_i2c_controller_periph4_txn+0x22a>
      break;

    if (Rw)
 8002b14:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d011      	beq.n	8002b40 <ICM_20948_i2c_controller_periph4_txn+0x214>
    {
      retval = ICM_20948_set_bank(pdev, 3);
 8002b1c:	2103      	movs	r1, #3
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f85a 	bl	8002bd8 <ICM_20948_set_bank>
 8002b24:	4603      	mov	r3, r0
 8002b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      retval = ICM_20948_execute_r(pdev, AGB3_REG_I2C_PERIPH4_DI, &data[nByte], 1);
 8002b2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	441a      	add	r2, r3
 8002b30:	2301      	movs	r3, #1
 8002b32:	2117      	movs	r1, #23
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f7ff fedb 	bl	80028f0 <ICM_20948_execute_r>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    nByte++;
 8002b40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b42:	3301      	adds	r3, #1
 8002b44:	84bb      	strh	r3, [r7, #36]	; 0x24
  while (nByte < len)
 8002b46:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	f4ff af51 	bcc.w	80029f6 <ICM_20948_i2c_controller_periph4_txn+0xca>
 8002b54:	e000      	b.n	8002b58 <ICM_20948_i2c_controller_periph4_txn+0x22c>
      break;
 8002b56:	bf00      	nop
  }

  if (txn_failed)
 8002b58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <ICM_20948_i2c_controller_periph4_txn+0x238>
  {
    //We often fail here if mag is stuck
    return ICM_20948_Stat_Err;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e001      	b.n	8002b68 <ICM_20948_i2c_controller_periph4_txn+0x23c>
  }

  return retval;
 8002b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3728      	adds	r7, #40	; 0x28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <ICM_20948_i2c_master_single_w>:

ICM_20948_Status_e ICM_20948_i2c_master_single_w(ICM_20948_Device_t *pdev, uint8_t addr, uint8_t reg, uint8_t *data)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af04      	add	r7, sp, #16
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	607b      	str	r3, [r7, #4]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	72fb      	strb	r3, [r7, #11]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	72bb      	strb	r3, [r7, #10]
  return ICM_20948_i2c_controller_periph4_txn(pdev, addr, reg, data, 1, false, true);
 8002b82:	7aba      	ldrb	r2, [r7, #10]
 8002b84:	7af9      	ldrb	r1, [r7, #11]
 8002b86:	2301      	movs	r3, #1
 8002b88:	9302      	str	r3, [sp, #8]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	9301      	str	r3, [sp, #4]
 8002b8e:	2301      	movs	r3, #1
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f7ff fec9 	bl	800292c <ICM_20948_i2c_controller_periph4_txn>
 8002b9a:	4603      	mov	r3, r0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <ICM_20948_i2c_master_single_r>:

ICM_20948_Status_e ICM_20948_i2c_master_single_r(ICM_20948_Device_t *pdev, uint8_t addr, uint8_t reg, uint8_t *data)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af04      	add	r7, sp, #16
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	607b      	str	r3, [r7, #4]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	72fb      	strb	r3, [r7, #11]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	72bb      	strb	r3, [r7, #10]
  return ICM_20948_i2c_controller_periph4_txn(pdev, addr, reg, data, 1, true, true);
 8002bb6:	7aba      	ldrb	r2, [r7, #10]
 8002bb8:	7af9      	ldrb	r1, [r7, #11]
 8002bba:	2301      	movs	r3, #1
 8002bbc:	9302      	str	r3, [sp, #8]
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	9301      	str	r3, [sp, #4]
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f7ff feaf 	bl	800292c <ICM_20948_i2c_controller_periph4_txn>
 8002bce:	4603      	mov	r3, r0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <ICM_20948_set_bank>:

ICM_20948_Status_e ICM_20948_set_bank(ICM_20948_Device_t *pdev, uint8_t bank)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	70fb      	strb	r3, [r7, #3]
  if (bank > 3)
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d901      	bls.n	8002bee <ICM_20948_set_bank+0x16>
  {
    return ICM_20948_Stat_ParamErr;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e017      	b.n	8002c1e <ICM_20948_set_bank+0x46>
  } // Only 4 possible banks

  if (bank == pdev->_last_bank) // Do we need to change bank?
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	799a      	ldrb	r2, [r3, #6]
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d101      	bne.n	8002bfc <ICM_20948_set_bank+0x24>
    return ICM_20948_Stat_Ok;   // Bail if we don't need to change bank to avoid unnecessary bus traffic
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e010      	b.n	8002c1e <ICM_20948_set_bank+0x46>

  pdev->_last_bank = bank;   // Store the requested bank (before we bit-shift)
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	719a      	strb	r2, [r3, #6]
  bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	70fb      	strb	r3, [r7, #3]
  return ICM_20948_execute_w(pdev, REG_BANK_SEL, &bank, 1);
 8002c10:	1cfa      	adds	r2, r7, #3
 8002c12:	2301      	movs	r3, #1
 8002c14:	217f      	movs	r1, #127	; 0x7f
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff fe4c 	bl	80028b4 <ICM_20948_execute_w>
 8002c1c:	4603      	mov	r3, r0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <ICM_20948_sw_reset>:

ICM_20948_Status_e ICM_20948_sw_reset(ICM_20948_Device_t *pdev)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	73fb      	strb	r3, [r7, #15]
  ICM_20948_PWR_MGMT_1_t reg;

  ICM_20948_set_bank(pdev, 0); // Must be in the right bank
 8002c32:	2100      	movs	r1, #0
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff ffcf 	bl	8002bd8 <ICM_20948_set_bank>

  retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
 8002c3a:	f107 020c 	add.w	r2, r7, #12
 8002c3e:	2301      	movs	r3, #1
 8002c40:	2106      	movs	r1, #6
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff fe54 	bl	80028f0 <ICM_20948_execute_r>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <ICM_20948_sw_reset+0x30>
  {
    return retval;
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	e012      	b.n	8002c7c <ICM_20948_sw_reset+0x56>
  }

  reg.DEVICE_RESET = 1;
 8002c56:	7b3b      	ldrb	r3, [r7, #12]
 8002c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c5c:	733b      	strb	r3, [r7, #12]

  retval = ICM_20948_execute_w(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
 8002c5e:	f107 020c 	add.w	r2, r7, #12
 8002c62:	2301      	movs	r3, #1
 8002c64:	2106      	movs	r1, #6
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff fe24 	bl	80028b4 <ICM_20948_execute_w>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <ICM_20948_sw_reset+0x54>
  {
    return retval;
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	e000      	b.n	8002c7c <ICM_20948_sw_reset+0x56>
  }
  return retval;
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <ICM_20948_sleep>:

ICM_20948_Status_e ICM_20948_sleep(ICM_20948_Device_t *pdev, bool on)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	70fb      	strb	r3, [r7, #3]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]
  ICM_20948_PWR_MGMT_1_t reg;

  ICM_20948_set_bank(pdev, 0); // Must be in the right bank
 8002c94:	2100      	movs	r1, #0
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff ff9e 	bl	8002bd8 <ICM_20948_set_bank>

  retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
 8002c9c:	f107 020c 	add.w	r2, r7, #12
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	2106      	movs	r1, #6
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff fe23 	bl	80028f0 <ICM_20948_execute_r>
 8002caa:	4603      	mov	r3, r0
 8002cac:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <ICM_20948_sleep+0x34>
  {
    return retval;
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	e01a      	b.n	8002cee <ICM_20948_sleep+0x6a>
  }

  if (on)
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d004      	beq.n	8002cc8 <ICM_20948_sleep+0x44>
  {
    reg.SLEEP = 1;
 8002cbe:	7b3b      	ldrb	r3, [r7, #12]
 8002cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cc4:	733b      	strb	r3, [r7, #12]
 8002cc6:	e003      	b.n	8002cd0 <ICM_20948_sleep+0x4c>
  }
  else
  {
    reg.SLEEP = 0;
 8002cc8:	7b3b      	ldrb	r3, [r7, #12]
 8002cca:	f36f 1386 	bfc	r3, #6, #1
 8002cce:	733b      	strb	r3, [r7, #12]
  }

  retval = ICM_20948_execute_w(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
 8002cd0:	f107 020c 	add.w	r2, r7, #12
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	2106      	movs	r1, #6
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff fdeb 	bl	80028b4 <ICM_20948_execute_w>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <ICM_20948_sleep+0x68>
  {
    return retval;
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	e000      	b.n	8002cee <ICM_20948_sleep+0x6a>
  }
  return retval;
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <ICM_20948_low_power>:

ICM_20948_Status_e ICM_20948_low_power(ICM_20948_Device_t *pdev, bool on)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b084      	sub	sp, #16
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	70fb      	strb	r3, [r7, #3]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8002d02:	2300      	movs	r3, #0
 8002d04:	73fb      	strb	r3, [r7, #15]
  ICM_20948_PWR_MGMT_1_t reg;

  ICM_20948_set_bank(pdev, 0); // Must be in the right bank
 8002d06:	2100      	movs	r1, #0
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff ff65 	bl	8002bd8 <ICM_20948_set_bank>

  retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
 8002d0e:	f107 020c 	add.w	r2, r7, #12
 8002d12:	2301      	movs	r3, #1
 8002d14:	2106      	movs	r1, #6
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff fdea 	bl	80028f0 <ICM_20948_execute_r>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <ICM_20948_low_power+0x34>
  {
    return retval;
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	e01a      	b.n	8002d60 <ICM_20948_low_power+0x6a>
  }

  if (on)
 8002d2a:	78fb      	ldrb	r3, [r7, #3]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d004      	beq.n	8002d3a <ICM_20948_low_power+0x44>
  {
    reg.LP_EN = 1;
 8002d30:	7b3b      	ldrb	r3, [r7, #12]
 8002d32:	f043 0320 	orr.w	r3, r3, #32
 8002d36:	733b      	strb	r3, [r7, #12]
 8002d38:	e003      	b.n	8002d42 <ICM_20948_low_power+0x4c>
  }
  else
  {
    reg.LP_EN = 0;
 8002d3a:	7b3b      	ldrb	r3, [r7, #12]
 8002d3c:	f36f 1345 	bfc	r3, #5, #1
 8002d40:	733b      	strb	r3, [r7, #12]
  }

  retval = ICM_20948_execute_w(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
 8002d42:	f107 020c 	add.w	r2, r7, #12
 8002d46:	2301      	movs	r3, #1
 8002d48:	2106      	movs	r1, #6
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff fdb2 	bl	80028b4 <ICM_20948_execute_w>
 8002d50:	4603      	mov	r3, r0
 8002d52:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <ICM_20948_low_power+0x68>
  {
    return retval;
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	e000      	b.n	8002d60 <ICM_20948_low_power+0x6a>
  }
  return retval;
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <ICM_20948_set_clock_source>:

ICM_20948_Status_e ICM_20948_set_clock_source(ICM_20948_Device_t *pdev, ICM_20948_PWR_MGMT_1_CLKSEL_e source)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	70fb      	strb	r3, [r7, #3]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8002d74:	2300      	movs	r3, #0
 8002d76:	73fb      	strb	r3, [r7, #15]
  ICM_20948_PWR_MGMT_1_t reg;

  ICM_20948_set_bank(pdev, 0); // Must be in the right bank
 8002d78:	2100      	movs	r1, #0
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff ff2c 	bl	8002bd8 <ICM_20948_set_bank>

  retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
 8002d80:	f107 020c 	add.w	r2, r7, #12
 8002d84:	2301      	movs	r3, #1
 8002d86:	2106      	movs	r1, #6
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7ff fdb1 	bl	80028f0 <ICM_20948_execute_r>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <ICM_20948_set_clock_source+0x34>
  {
    return retval;
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	e016      	b.n	8002dca <ICM_20948_set_clock_source+0x62>
  }

  reg.CLKSEL = source;
 8002d9c:	78fb      	ldrb	r3, [r7, #3]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	7b3b      	ldrb	r3, [r7, #12]
 8002da6:	f362 0302 	bfi	r3, r2, #0, #3
 8002daa:	733b      	strb	r3, [r7, #12]

  retval = ICM_20948_execute_w(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
 8002dac:	f107 020c 	add.w	r2, r7, #12
 8002db0:	2301      	movs	r3, #1
 8002db2:	2106      	movs	r1, #6
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7ff fd7d 	bl	80028b4 <ICM_20948_execute_w>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <ICM_20948_set_clock_source+0x60>
  {
    return retval;
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	e000      	b.n	8002dca <ICM_20948_set_clock_source+0x62>
  }
  return retval;
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <ICM_20948_get_who_am_i>:

ICM_20948_Status_e ICM_20948_get_who_am_i(ICM_20948_Device_t *pdev, uint8_t *whoami)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	6039      	str	r1, [r7, #0]
  if (whoami == NULL)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <ICM_20948_get_who_am_i+0x14>
  {
    return ICM_20948_Stat_ParamErr;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e00a      	b.n	8002dfc <ICM_20948_get_who_am_i+0x2a>
  }
  ICM_20948_set_bank(pdev, 0); // Must be in the right bank
 8002de6:	2100      	movs	r1, #0
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff fef5 	bl	8002bd8 <ICM_20948_set_bank>
  return ICM_20948_execute_r(pdev, AGB0_REG_WHO_AM_I, whoami, 1);
 8002dee:	2301      	movs	r3, #1
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	2100      	movs	r1, #0
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff fd7b 	bl	80028f0 <ICM_20948_execute_r>
 8002dfa:	4603      	mov	r3, r0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <ICM_20948_check_id>:

ICM_20948_Status_e ICM_20948_check_id(ICM_20948_Device_t *pdev)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	73fb      	strb	r3, [r7, #15]
  uint8_t whoami = 0x00;
 8002e10:	2300      	movs	r3, #0
 8002e12:	73bb      	strb	r3, [r7, #14]
  retval = ICM_20948_get_who_am_i(pdev, &whoami);
 8002e14:	f107 030e 	add.w	r3, r7, #14
 8002e18:	4619      	mov	r1, r3
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff ffd9 	bl	8002dd2 <ICM_20948_get_who_am_i>
 8002e20:	4603      	mov	r3, r0
 8002e22:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <ICM_20948_check_id+0x2a>
  {
    return retval;
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	e005      	b.n	8002e3a <ICM_20948_check_id+0x36>
  }
  if (whoami != ICM_20948_WHOAMI)
 8002e2e:	7bbb      	ldrb	r3, [r7, #14]
 8002e30:	2bea      	cmp	r3, #234	; 0xea
 8002e32:	d001      	beq.n	8002e38 <ICM_20948_check_id+0x34>
  {
    return ICM_20948_Stat_WrongID;
 8002e34:	2304      	movs	r3, #4
 8002e36:	e000      	b.n	8002e3a <ICM_20948_check_id+0x36>
  }
  return retval;
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <ICM_20948_int_enable>:
  }
  return retval;
}

ICM_20948_Status_e ICM_20948_int_enable(ICM_20948_Device_t *pdev, ICM_20948_INT_enable_t *write, ICM_20948_INT_enable_t *read)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b088      	sub	sp, #32
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	77fb      	strb	r3, [r7, #31]
  ICM_20948_INT_ENABLE_t en_0;
  ICM_20948_INT_ENABLE_1_t en_1;
  ICM_20948_INT_ENABLE_2_t en_2;
  ICM_20948_INT_ENABLE_3_t en_3;

  retval = ICM_20948_set_bank(pdev, 0); // Must be in the right bank
 8002e52:	2100      	movs	r1, #0
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f7ff febf 	bl	8002bd8 <ICM_20948_set_bank>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	77fb      	strb	r3, [r7, #31]

  if (write != NULL)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80d8 	beq.w	8003016 <ICM_20948_int_enable+0x1d4>
  { // If the write pointer is not NULL then write to the registers BEFORE reading
    en_0.I2C_MST_INT_EN = write->I2C_MST_INT_EN;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	7f3b      	ldrb	r3, [r7, #28]
 8002e72:	f362 0300 	bfi	r3, r2, #0, #1
 8002e76:	773b      	strb	r3, [r7, #28]
    en_0.DMP_INT1_EN = write->DMP_INT1_EN;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	7f3b      	ldrb	r3, [r7, #28]
 8002e84:	f362 0341 	bfi	r3, r2, #1, #1
 8002e88:	773b      	strb	r3, [r7, #28]
    en_0.PLL_READY_EN = write->PLL_RDY_EN;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	7f3b      	ldrb	r3, [r7, #28]
 8002e96:	f362 0382 	bfi	r3, r2, #2, #1
 8002e9a:	773b      	strb	r3, [r7, #28]
    en_0.WOM_INT_EN = write->WOM_INT_EN;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	7f3b      	ldrb	r3, [r7, #28]
 8002ea8:	f362 03c3 	bfi	r3, r2, #3, #1
 8002eac:	773b      	strb	r3, [r7, #28]
    en_0.reserved_0 = 0; // Clear RAM garbage
 8002eae:	7f3b      	ldrb	r3, [r7, #28]
 8002eb0:	f36f 1306 	bfc	r3, #4, #3
 8002eb4:	773b      	strb	r3, [r7, #28]
    en_0.REG_WOF_EN = write->REG_WOF_EN;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	7f3b      	ldrb	r3, [r7, #28]
 8002ec2:	f362 13c7 	bfi	r3, r2, #7, #1
 8002ec6:	773b      	strb	r3, [r7, #28]
    en_1.RAW_DATA_0_RDY_EN = write->RAW_DATA_0_RDY_EN;
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	7e3b      	ldrb	r3, [r7, #24]
 8002ed4:	f362 0300 	bfi	r3, r2, #0, #1
 8002ed8:	763b      	strb	r3, [r7, #24]
    en_1.reserved_0 = 0; // Clear RAM garbage
 8002eda:	7e3b      	ldrb	r3, [r7, #24]
 8002edc:	f36f 0347 	bfc	r3, #1, #7
 8002ee0:	763b      	strb	r3, [r7, #24]
    en_2.individual.FIFO_OVERFLOW_EN_4 = write->FIFO_OVERFLOW_EN_4;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	7d3b      	ldrb	r3, [r7, #20]
 8002eee:	f362 1304 	bfi	r3, r2, #4, #1
 8002ef2:	753b      	strb	r3, [r7, #20]
    en_2.individual.FIFO_OVERFLOW_EN_3 = write->FIFO_OVERFLOW_EN_3;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	7d3b      	ldrb	r3, [r7, #20]
 8002f00:	f362 03c3 	bfi	r3, r2, #3, #1
 8002f04:	753b      	strb	r3, [r7, #20]
    en_2.individual.FIFO_OVERFLOW_EN_2 = write->FIFO_OVERFLOW_EN_2;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	785b      	ldrb	r3, [r3, #1]
 8002f0a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	7d3b      	ldrb	r3, [r7, #20]
 8002f12:	f362 0382 	bfi	r3, r2, #2, #1
 8002f16:	753b      	strb	r3, [r7, #20]
    en_2.individual.FIFO_OVERFLOW_EN_1 = write->FIFO_OVERFLOW_EN_1;
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	785b      	ldrb	r3, [r3, #1]
 8002f1c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	7d3b      	ldrb	r3, [r7, #20]
 8002f24:	f362 0341 	bfi	r3, r2, #1, #1
 8002f28:	753b      	strb	r3, [r7, #20]
    en_2.individual.FIFO_OVERFLOW_EN_0 = write->FIFO_OVERFLOW_EN_0;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	785b      	ldrb	r3, [r3, #1]
 8002f2e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	7d3b      	ldrb	r3, [r7, #20]
 8002f36:	f362 0300 	bfi	r3, r2, #0, #1
 8002f3a:	753b      	strb	r3, [r7, #20]
    en_2.individual.reserved_0 = 0; // Clear RAM garbage
 8002f3c:	7d3b      	ldrb	r3, [r7, #20]
 8002f3e:	f36f 1347 	bfc	r3, #5, #3
 8002f42:	753b      	strb	r3, [r7, #20]
    en_3.individual.FIFO_WM_EN_4 = write->FIFO_WM_EN_4;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	785b      	ldrb	r3, [r3, #1]
 8002f48:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	7c3b      	ldrb	r3, [r7, #16]
 8002f50:	f362 1304 	bfi	r3, r2, #4, #1
 8002f54:	743b      	strb	r3, [r7, #16]
    en_3.individual.FIFO_WM_EN_3 = write->FIFO_WM_EN_3;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	785b      	ldrb	r3, [r3, #1]
 8002f5a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	7c3b      	ldrb	r3, [r7, #16]
 8002f62:	f362 03c3 	bfi	r3, r2, #3, #1
 8002f66:	743b      	strb	r3, [r7, #16]
    en_3.individual.FIFO_WM_EN_2 = write->FIFO_WM_EN_2;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	785b      	ldrb	r3, [r3, #1]
 8002f6c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	7c3b      	ldrb	r3, [r7, #16]
 8002f74:	f362 0382 	bfi	r3, r2, #2, #1
 8002f78:	743b      	strb	r3, [r7, #16]
    en_3.individual.FIFO_WM_EN_1 = write->FIFO_WM_EN_1;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	785b      	ldrb	r3, [r3, #1]
 8002f7e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	7c3b      	ldrb	r3, [r7, #16]
 8002f86:	f362 0341 	bfi	r3, r2, #1, #1
 8002f8a:	743b      	strb	r3, [r7, #16]
    en_3.individual.FIFO_WM_EN_0 = write->FIFO_WM_EN_0;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	785b      	ldrb	r3, [r3, #1]
 8002f90:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	7c3b      	ldrb	r3, [r7, #16]
 8002f98:	f362 0300 	bfi	r3, r2, #0, #1
 8002f9c:	743b      	strb	r3, [r7, #16]
    en_3.individual.reserved_0 = 0; // Clear RAM garbage
 8002f9e:	7c3b      	ldrb	r3, [r7, #16]
 8002fa0:	f36f 1347 	bfc	r3, #5, #3
 8002fa4:	743b      	strb	r3, [r7, #16]

    retval = ICM_20948_execute_w(pdev, AGB0_REG_INT_ENABLE, (uint8_t *)&en_0, sizeof(ICM_20948_INT_ENABLE_t));
 8002fa6:	f107 021c 	add.w	r2, r7, #28
 8002faa:	2301      	movs	r3, #1
 8002fac:	2110      	movs	r1, #16
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f7ff fc80 	bl	80028b4 <ICM_20948_execute_w>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	77fb      	strb	r3, [r7, #31]
    if (retval != ICM_20948_Stat_Ok)
 8002fb8:	7ffb      	ldrb	r3, [r7, #31]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <ICM_20948_int_enable+0x180>
    {
      return retval;
 8002fbe:	7ffb      	ldrb	r3, [r7, #31]
 8002fc0:	e0f6      	b.n	80031b0 <ICM_20948_int_enable+0x36e>
    }
    retval = ICM_20948_execute_w(pdev, AGB0_REG_INT_ENABLE_1, (uint8_t *)&en_1, sizeof(ICM_20948_INT_ENABLE_1_t));
 8002fc2:	f107 0218 	add.w	r2, r7, #24
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	2111      	movs	r1, #17
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f7ff fc72 	bl	80028b4 <ICM_20948_execute_w>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	77fb      	strb	r3, [r7, #31]
    if (retval != ICM_20948_Stat_Ok)
 8002fd4:	7ffb      	ldrb	r3, [r7, #31]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <ICM_20948_int_enable+0x19c>
    {
      return retval;
 8002fda:	7ffb      	ldrb	r3, [r7, #31]
 8002fdc:	e0e8      	b.n	80031b0 <ICM_20948_int_enable+0x36e>
    }
    retval = ICM_20948_execute_w(pdev, AGB0_REG_INT_ENABLE_2, (uint8_t *)&en_2, sizeof(ICM_20948_INT_ENABLE_2_t));
 8002fde:	f107 0214 	add.w	r2, r7, #20
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	2112      	movs	r1, #18
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f7ff fc64 	bl	80028b4 <ICM_20948_execute_w>
 8002fec:	4603      	mov	r3, r0
 8002fee:	77fb      	strb	r3, [r7, #31]
    if (retval != ICM_20948_Stat_Ok)
 8002ff0:	7ffb      	ldrb	r3, [r7, #31]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <ICM_20948_int_enable+0x1b8>
    {
      return retval;
 8002ff6:	7ffb      	ldrb	r3, [r7, #31]
 8002ff8:	e0da      	b.n	80031b0 <ICM_20948_int_enable+0x36e>
    }
    retval = ICM_20948_execute_w(pdev, AGB0_REG_INT_ENABLE_3, (uint8_t *)&en_3, sizeof(ICM_20948_INT_ENABLE_3_t));
 8002ffa:	f107 0210 	add.w	r2, r7, #16
 8002ffe:	2301      	movs	r3, #1
 8003000:	2113      	movs	r1, #19
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f7ff fc56 	bl	80028b4 <ICM_20948_execute_w>
 8003008:	4603      	mov	r3, r0
 800300a:	77fb      	strb	r3, [r7, #31]
    if (retval != ICM_20948_Stat_Ok)
 800300c:	7ffb      	ldrb	r3, [r7, #31]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <ICM_20948_int_enable+0x1d4>
    {
      return retval;
 8003012:	7ffb      	ldrb	r3, [r7, #31]
 8003014:	e0cc      	b.n	80031b0 <ICM_20948_int_enable+0x36e>
    }
  }

  if (read != NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 80c8 	beq.w	80031ae <ICM_20948_int_enable+0x36c>
  { // If read pointer is not NULL then read the registers (if write is not NULL then this should read back the results of write into read)
    retval = ICM_20948_execute_r(pdev, AGB0_REG_INT_ENABLE, (uint8_t *)&en_0, sizeof(ICM_20948_INT_ENABLE_t));
 800301e:	f107 021c 	add.w	r2, r7, #28
 8003022:	2301      	movs	r3, #1
 8003024:	2110      	movs	r1, #16
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f7ff fc62 	bl	80028f0 <ICM_20948_execute_r>
 800302c:	4603      	mov	r3, r0
 800302e:	77fb      	strb	r3, [r7, #31]
    if (retval != ICM_20948_Stat_Ok)
 8003030:	7ffb      	ldrb	r3, [r7, #31]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <ICM_20948_int_enable+0x1f8>
    {
      return retval;
 8003036:	7ffb      	ldrb	r3, [r7, #31]
 8003038:	e0ba      	b.n	80031b0 <ICM_20948_int_enable+0x36e>
    }
    retval = ICM_20948_execute_r(pdev, AGB0_REG_INT_ENABLE_1, (uint8_t *)&en_1, sizeof(ICM_20948_INT_ENABLE_1_t));
 800303a:	f107 0218 	add.w	r2, r7, #24
 800303e:	2301      	movs	r3, #1
 8003040:	2111      	movs	r1, #17
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f7ff fc54 	bl	80028f0 <ICM_20948_execute_r>
 8003048:	4603      	mov	r3, r0
 800304a:	77fb      	strb	r3, [r7, #31]
    if (retval != ICM_20948_Stat_Ok)
 800304c:	7ffb      	ldrb	r3, [r7, #31]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <ICM_20948_int_enable+0x214>
    {
      return retval;
 8003052:	7ffb      	ldrb	r3, [r7, #31]
 8003054:	e0ac      	b.n	80031b0 <ICM_20948_int_enable+0x36e>
    }
    retval = ICM_20948_execute_r(pdev, AGB0_REG_INT_ENABLE_2, (uint8_t *)&en_2, sizeof(ICM_20948_INT_ENABLE_2_t));
 8003056:	f107 0214 	add.w	r2, r7, #20
 800305a:	2301      	movs	r3, #1
 800305c:	2112      	movs	r1, #18
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f7ff fc46 	bl	80028f0 <ICM_20948_execute_r>
 8003064:	4603      	mov	r3, r0
 8003066:	77fb      	strb	r3, [r7, #31]
    if (retval != ICM_20948_Stat_Ok)
 8003068:	7ffb      	ldrb	r3, [r7, #31]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <ICM_20948_int_enable+0x230>
    {
      return retval;
 800306e:	7ffb      	ldrb	r3, [r7, #31]
 8003070:	e09e      	b.n	80031b0 <ICM_20948_int_enable+0x36e>
    }
    retval = ICM_20948_execute_r(pdev, AGB0_REG_INT_ENABLE_3, (uint8_t *)&en_3, sizeof(ICM_20948_INT_ENABLE_3_t));
 8003072:	f107 0210 	add.w	r2, r7, #16
 8003076:	2301      	movs	r3, #1
 8003078:	2113      	movs	r1, #19
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f7ff fc38 	bl	80028f0 <ICM_20948_execute_r>
 8003080:	4603      	mov	r3, r0
 8003082:	77fb      	strb	r3, [r7, #31]
    if (retval != ICM_20948_Stat_Ok)
 8003084:	7ffb      	ldrb	r3, [r7, #31]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <ICM_20948_int_enable+0x24c>
    {
      return retval;
 800308a:	7ffb      	ldrb	r3, [r7, #31]
 800308c:	e090      	b.n	80031b0 <ICM_20948_int_enable+0x36e>
    }

    read->I2C_MST_INT_EN = en_0.I2C_MST_INT_EN;
 800308e:	7f3b      	ldrb	r3, [r7, #28]
 8003090:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003094:	b2d9      	uxtb	r1, r3
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	7813      	ldrb	r3, [r2, #0]
 800309a:	f361 0300 	bfi	r3, r1, #0, #1
 800309e:	7013      	strb	r3, [r2, #0]
    read->DMP_INT1_EN = en_0.DMP_INT1_EN;
 80030a0:	7f3b      	ldrb	r3, [r7, #28]
 80030a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80030a6:	b2d9      	uxtb	r1, r3
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	7813      	ldrb	r3, [r2, #0]
 80030ac:	f361 0341 	bfi	r3, r1, #1, #1
 80030b0:	7013      	strb	r3, [r2, #0]
    read->PLL_RDY_EN = en_0.PLL_READY_EN;
 80030b2:	7f3b      	ldrb	r3, [r7, #28]
 80030b4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80030b8:	b2d9      	uxtb	r1, r3
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	7813      	ldrb	r3, [r2, #0]
 80030be:	f361 0382 	bfi	r3, r1, #2, #1
 80030c2:	7013      	strb	r3, [r2, #0]
    read->WOM_INT_EN = en_0.WOM_INT_EN;
 80030c4:	7f3b      	ldrb	r3, [r7, #28]
 80030c6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80030ca:	b2d9      	uxtb	r1, r3
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	7813      	ldrb	r3, [r2, #0]
 80030d0:	f361 03c3 	bfi	r3, r1, #3, #1
 80030d4:	7013      	strb	r3, [r2, #0]
    read->REG_WOF_EN = en_0.REG_WOF_EN;
 80030d6:	7f3b      	ldrb	r3, [r7, #28]
 80030d8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80030dc:	b2d9      	uxtb	r1, r3
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	7813      	ldrb	r3, [r2, #0]
 80030e2:	f361 1304 	bfi	r3, r1, #4, #1
 80030e6:	7013      	strb	r3, [r2, #0]
    read->RAW_DATA_0_RDY_EN = en_1.RAW_DATA_0_RDY_EN;
 80030e8:	7e3b      	ldrb	r3, [r7, #24]
 80030ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80030ee:	b2d9      	uxtb	r1, r3
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	7813      	ldrb	r3, [r2, #0]
 80030f4:	f361 1345 	bfi	r3, r1, #5, #1
 80030f8:	7013      	strb	r3, [r2, #0]
    read->FIFO_OVERFLOW_EN_4 = en_2.individual.FIFO_OVERFLOW_EN_4;
 80030fa:	7d3b      	ldrb	r3, [r7, #20]
 80030fc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003100:	b2d9      	uxtb	r1, r3
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	7813      	ldrb	r3, [r2, #0]
 8003106:	f361 1386 	bfi	r3, r1, #6, #1
 800310a:	7013      	strb	r3, [r2, #0]
    read->FIFO_OVERFLOW_EN_3 = en_2.individual.FIFO_OVERFLOW_EN_3;
 800310c:	7d3b      	ldrb	r3, [r7, #20]
 800310e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003112:	b2d9      	uxtb	r1, r3
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	7813      	ldrb	r3, [r2, #0]
 8003118:	f361 13c7 	bfi	r3, r1, #7, #1
 800311c:	7013      	strb	r3, [r2, #0]
    read->FIFO_OVERFLOW_EN_2 = en_2.individual.FIFO_OVERFLOW_EN_2;
 800311e:	7d3b      	ldrb	r3, [r7, #20]
 8003120:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003124:	b2d9      	uxtb	r1, r3
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	7853      	ldrb	r3, [r2, #1]
 800312a:	f361 0300 	bfi	r3, r1, #0, #1
 800312e:	7053      	strb	r3, [r2, #1]
    read->FIFO_OVERFLOW_EN_1 = en_2.individual.FIFO_OVERFLOW_EN_1;
 8003130:	7d3b      	ldrb	r3, [r7, #20]
 8003132:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003136:	b2d9      	uxtb	r1, r3
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	7853      	ldrb	r3, [r2, #1]
 800313c:	f361 0341 	bfi	r3, r1, #1, #1
 8003140:	7053      	strb	r3, [r2, #1]
    read->FIFO_OVERFLOW_EN_0 = en_2.individual.FIFO_OVERFLOW_EN_0;
 8003142:	7d3b      	ldrb	r3, [r7, #20]
 8003144:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003148:	b2d9      	uxtb	r1, r3
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	7853      	ldrb	r3, [r2, #1]
 800314e:	f361 0382 	bfi	r3, r1, #2, #1
 8003152:	7053      	strb	r3, [r2, #1]
    read->FIFO_WM_EN_4 = en_3.individual.FIFO_WM_EN_4;
 8003154:	7c3b      	ldrb	r3, [r7, #16]
 8003156:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800315a:	b2d9      	uxtb	r1, r3
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	7853      	ldrb	r3, [r2, #1]
 8003160:	f361 03c3 	bfi	r3, r1, #3, #1
 8003164:	7053      	strb	r3, [r2, #1]
    read->FIFO_WM_EN_3 = en_3.individual.FIFO_WM_EN_3;
 8003166:	7c3b      	ldrb	r3, [r7, #16]
 8003168:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800316c:	b2d9      	uxtb	r1, r3
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	7853      	ldrb	r3, [r2, #1]
 8003172:	f361 1304 	bfi	r3, r1, #4, #1
 8003176:	7053      	strb	r3, [r2, #1]
    read->FIFO_WM_EN_2 = en_3.individual.FIFO_WM_EN_2;
 8003178:	7c3b      	ldrb	r3, [r7, #16]
 800317a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800317e:	b2d9      	uxtb	r1, r3
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	7853      	ldrb	r3, [r2, #1]
 8003184:	f361 1345 	bfi	r3, r1, #5, #1
 8003188:	7053      	strb	r3, [r2, #1]
    read->FIFO_WM_EN_1 = en_3.individual.FIFO_WM_EN_1;
 800318a:	7c3b      	ldrb	r3, [r7, #16]
 800318c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003190:	b2d9      	uxtb	r1, r3
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	7853      	ldrb	r3, [r2, #1]
 8003196:	f361 1386 	bfi	r3, r1, #6, #1
 800319a:	7053      	strb	r3, [r2, #1]
    read->FIFO_WM_EN_0 = en_3.individual.FIFO_WM_EN_0;
 800319c:	7c3b      	ldrb	r3, [r7, #16]
 800319e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80031a2:	b2d9      	uxtb	r1, r3
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	7853      	ldrb	r3, [r2, #1]
 80031a8:	f361 13c7 	bfi	r3, r1, #7, #1
 80031ac:	7053      	strb	r3, [r2, #1]
  }

  return retval;
 80031ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3720      	adds	r7, #32
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <ICM_20948_set_sample_mode>:

  return retval;
}

ICM_20948_Status_e ICM_20948_set_sample_mode(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_LP_CONFIG_CYCLE_e mode)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	70fb      	strb	r3, [r7, #3]
 80031c4:	4613      	mov	r3, r2
 80031c6:	70bb      	strb	r3, [r7, #2]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 80031c8:	2300      	movs	r3, #0
 80031ca:	73fb      	strb	r3, [r7, #15]
  ICM_20948_LP_CONFIG_t reg;

  if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr | ICM_20948_Internal_Mst)))
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	f003 0313 	and.w	r3, r3, #19
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <ICM_20948_set_sample_mode+0x22>
  {
    return ICM_20948_Stat_SensorNotSupported;
 80031d6:	2307      	movs	r3, #7
 80031d8:	e089      	b.n	80032ee <ICM_20948_set_sample_mode+0x136>
  }

  retval = ICM_20948_set_bank(pdev, 0); // Must be in the right bank
 80031da:	2100      	movs	r1, #0
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff fcfb 	bl	8002bd8 <ICM_20948_set_bank>
 80031e2:	4603      	mov	r3, r0
 80031e4:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <ICM_20948_set_sample_mode+0x38>
  {
    return retval;
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	e07e      	b.n	80032ee <ICM_20948_set_sample_mode+0x136>
  }
  retval = ICM_20948_execute_r(pdev, AGB0_REG_LP_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t));
 80031f0:	f107 020c 	add.w	r2, r7, #12
 80031f4:	2301      	movs	r3, #1
 80031f6:	2105      	movs	r1, #5
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff fb79 	bl	80028f0 <ICM_20948_execute_r>
 80031fe:	4603      	mov	r3, r0
 8003200:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <ICM_20948_set_sample_mode+0x54>
  {
    return retval;
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	e070      	b.n	80032ee <ICM_20948_set_sample_mode+0x136>
  }

  if (sensors & ICM_20948_Internal_Acc)
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <ICM_20948_set_sample_mode+0x6e>
  {
    reg.ACCEL_CYCLE = mode;
 8003216:	78bb      	ldrb	r3, [r7, #2]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	b2da      	uxtb	r2, r3
 800321e:	7b3b      	ldrb	r3, [r7, #12]
 8003220:	f362 1345 	bfi	r3, r2, #5, #1
 8003224:	733b      	strb	r3, [r7, #12]
  } // Set all desired sensors to this setting
  if (sensors & ICM_20948_Internal_Gyr)
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d007      	beq.n	8003240 <ICM_20948_set_sample_mode+0x88>
  {
    reg.GYRO_CYCLE = mode;
 8003230:	78bb      	ldrb	r3, [r7, #2]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	b2da      	uxtb	r2, r3
 8003238:	7b3b      	ldrb	r3, [r7, #12]
 800323a:	f362 1304 	bfi	r3, r2, #4, #1
 800323e:	733b      	strb	r3, [r7, #12]
  }
  if (sensors & ICM_20948_Internal_Mst)
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	2b00      	cmp	r3, #0
 8003248:	d007      	beq.n	800325a <ICM_20948_set_sample_mode+0xa2>
  {
    reg.I2C_MST_CYCLE = mode;
 800324a:	78bb      	ldrb	r3, [r7, #2]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	b2da      	uxtb	r2, r3
 8003252:	7b3b      	ldrb	r3, [r7, #12]
 8003254:	f362 1386 	bfi	r3, r2, #6, #1
 8003258:	733b      	strb	r3, [r7, #12]
  }

  retval = ICM_20948_execute_w(pdev, AGB0_REG_LP_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t));
 800325a:	f107 020c 	add.w	r2, r7, #12
 800325e:	2301      	movs	r3, #1
 8003260:	2105      	movs	r1, #5
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff fb26 	bl	80028b4 <ICM_20948_execute_w>
 8003268:	4603      	mov	r3, r0
 800326a:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <ICM_20948_set_sample_mode+0xbe>
  {
    return retval;
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	e03b      	b.n	80032ee <ICM_20948_set_sample_mode+0x136>
  }

  // Check the data was written correctly
  retval = ICM_20948_execute_r(pdev, AGB0_REG_LP_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t));
 8003276:	f107 020c 	add.w	r2, r7, #12
 800327a:	2301      	movs	r3, #1
 800327c:	2105      	movs	r1, #5
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff fb36 	bl	80028f0 <ICM_20948_execute_r>
 8003284:	4603      	mov	r3, r0
 8003286:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <ICM_20948_set_sample_mode+0xda>
  {
    return retval;
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	e02d      	b.n	80032ee <ICM_20948_set_sample_mode+0x136>
  }
  if (sensors & ICM_20948_Internal_Acc)
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d009      	beq.n	80032b0 <ICM_20948_set_sample_mode+0xf8>
  {
    if (reg.ACCEL_CYCLE != mode) retval = ICM_20948_Stat_Err;
 800329c:	7b3b      	ldrb	r3, [r7, #12]
 800329e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	78bb      	ldrb	r3, [r7, #2]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d001      	beq.n	80032b0 <ICM_20948_set_sample_mode+0xf8>
 80032ac:	2301      	movs	r3, #1
 80032ae:	73fb      	strb	r3, [r7, #15]
  }
  if (sensors & ICM_20948_Internal_Gyr)
 80032b0:	78fb      	ldrb	r3, [r7, #3]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d009      	beq.n	80032ce <ICM_20948_set_sample_mode+0x116>
  {
    if (reg.GYRO_CYCLE != mode) retval = ICM_20948_Stat_Err;
 80032ba:	7b3b      	ldrb	r3, [r7, #12]
 80032bc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	461a      	mov	r2, r3
 80032c4:	78bb      	ldrb	r3, [r7, #2]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d001      	beq.n	80032ce <ICM_20948_set_sample_mode+0x116>
 80032ca:	2301      	movs	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
  }
  if (sensors & ICM_20948_Internal_Mst)
 80032ce:	78fb      	ldrb	r3, [r7, #3]
 80032d0:	f003 0310 	and.w	r3, r3, #16
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d009      	beq.n	80032ec <ICM_20948_set_sample_mode+0x134>
  {
    if (reg.I2C_MST_CYCLE != mode) retval = ICM_20948_Stat_Err;
 80032d8:	7b3b      	ldrb	r3, [r7, #12]
 80032da:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	461a      	mov	r2, r3
 80032e2:	78bb      	ldrb	r3, [r7, #2]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d001      	beq.n	80032ec <ICM_20948_set_sample_mode+0x134>
 80032e8:	2301      	movs	r3, #1
 80032ea:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <ICM_20948_set_full_scale>:

ICM_20948_Status_e ICM_20948_set_full_scale(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_fss_t fss)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b084      	sub	sp, #16
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
 80032fe:	460b      	mov	r3, r1
 8003300:	703a      	strb	r2, [r7, #0]
 8003302:	70fb      	strb	r3, [r7, #3]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8003304:	2300      	movs	r3, #0
 8003306:	73fb      	strb	r3, [r7, #15]

  if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <ICM_20948_set_full_scale+0x20>
  {
    return ICM_20948_Stat_SensorNotSupported;
 8003312:	2307      	movs	r3, #7
 8003314:	e090      	b.n	8003438 <ICM_20948_set_full_scale+0x142>
  }

  if (sensors & ICM_20948_Internal_Acc)
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d042      	beq.n	80033a6 <ICM_20948_set_full_scale+0xb0>
  {
    ICM_20948_ACCEL_CONFIG_t reg;
    retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
 8003320:	2102      	movs	r1, #2
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff fc58 	bl	8002bd8 <ICM_20948_set_bank>
 8003328:	4603      	mov	r3, r0
 800332a:	461a      	mov	r2, r3
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	4313      	orrs	r3, r2
 8003330:	73fb      	strb	r3, [r7, #15]
    retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
 8003332:	f107 020c 	add.w	r2, r7, #12
 8003336:	2301      	movs	r3, #1
 8003338:	2114      	movs	r1, #20
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff fad8 	bl	80028f0 <ICM_20948_execute_r>
 8003340:	4603      	mov	r3, r0
 8003342:	461a      	mov	r2, r3
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	4313      	orrs	r3, r2
 8003348:	73fb      	strb	r3, [r7, #15]
    reg.ACCEL_FS_SEL = fss.a;
 800334a:	783b      	ldrb	r3, [r7, #0]
 800334c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003350:	b2da      	uxtb	r2, r3
 8003352:	7b3b      	ldrb	r3, [r7, #12]
 8003354:	f362 0342 	bfi	r3, r2, #1, #2
 8003358:	733b      	strb	r3, [r7, #12]
    retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
 800335a:	f107 020c 	add.w	r2, r7, #12
 800335e:	2301      	movs	r3, #1
 8003360:	2114      	movs	r1, #20
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff faa6 	bl	80028b4 <ICM_20948_execute_w>
 8003368:	4603      	mov	r3, r0
 800336a:	461a      	mov	r2, r3
 800336c:	7bfb      	ldrb	r3, [r7, #15]
 800336e:	4313      	orrs	r3, r2
 8003370:	73fb      	strb	r3, [r7, #15]
    // Check the data was written correctly
    retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
 8003372:	f107 020c 	add.w	r2, r7, #12
 8003376:	2301      	movs	r3, #1
 8003378:	2114      	movs	r1, #20
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff fab8 	bl	80028f0 <ICM_20948_execute_r>
 8003380:	4603      	mov	r3, r0
 8003382:	461a      	mov	r2, r3
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	4313      	orrs	r3, r2
 8003388:	73fb      	strb	r3, [r7, #15]
    if (reg.ACCEL_FS_SEL != fss.a) retval |= ICM_20948_Stat_Err;
 800338a:	7b3b      	ldrb	r3, [r7, #12]
 800338c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8003390:	b2da      	uxtb	r2, r3
 8003392:	783b      	ldrb	r3, [r7, #0]
 8003394:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003398:	b2db      	uxtb	r3, r3
 800339a:	429a      	cmp	r2, r3
 800339c:	d003      	beq.n	80033a6 <ICM_20948_set_full_scale+0xb0>
 800339e:	7bfb      	ldrb	r3, [r7, #15]
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
  }
  if (sensors & ICM_20948_Internal_Gyr)
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d042      	beq.n	8003436 <ICM_20948_set_full_scale+0x140>
  {
    ICM_20948_GYRO_CONFIG_1_t reg;
    retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
 80033b0:	2102      	movs	r1, #2
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff fc10 	bl	8002bd8 <ICM_20948_set_bank>
 80033b8:	4603      	mov	r3, r0
 80033ba:	461a      	mov	r2, r3
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	4313      	orrs	r3, r2
 80033c0:	73fb      	strb	r3, [r7, #15]
    retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
 80033c2:	f107 0208 	add.w	r2, r7, #8
 80033c6:	2301      	movs	r3, #1
 80033c8:	2101      	movs	r1, #1
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff fa90 	bl	80028f0 <ICM_20948_execute_r>
 80033d0:	4603      	mov	r3, r0
 80033d2:	461a      	mov	r2, r3
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	73fb      	strb	r3, [r7, #15]
    reg.GYRO_FS_SEL = fss.g;
 80033da:	783b      	ldrb	r3, [r7, #0]
 80033dc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	7a3b      	ldrb	r3, [r7, #8]
 80033e4:	f362 0342 	bfi	r3, r2, #1, #2
 80033e8:	723b      	strb	r3, [r7, #8]
    retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
 80033ea:	f107 0208 	add.w	r2, r7, #8
 80033ee:	2301      	movs	r3, #1
 80033f0:	2101      	movs	r1, #1
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff fa5e 	bl	80028b4 <ICM_20948_execute_w>
 80033f8:	4603      	mov	r3, r0
 80033fa:	461a      	mov	r2, r3
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	4313      	orrs	r3, r2
 8003400:	73fb      	strb	r3, [r7, #15]
    // Check the data was written correctly
    retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
 8003402:	f107 0208 	add.w	r2, r7, #8
 8003406:	2301      	movs	r3, #1
 8003408:	2101      	movs	r1, #1
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff fa70 	bl	80028f0 <ICM_20948_execute_r>
 8003410:	4603      	mov	r3, r0
 8003412:	461a      	mov	r2, r3
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	4313      	orrs	r3, r2
 8003418:	73fb      	strb	r3, [r7, #15]
    if (reg.GYRO_FS_SEL != fss.g) retval |= ICM_20948_Stat_Err;
 800341a:	7a3b      	ldrb	r3, [r7, #8]
 800341c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8003420:	b2da      	uxtb	r2, r3
 8003422:	783b      	ldrb	r3, [r7, #0]
 8003424:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003428:	b2db      	uxtb	r3, r3
 800342a:	429a      	cmp	r2, r3
 800342c:	d003      	beq.n	8003436 <ICM_20948_set_full_scale+0x140>
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	73fb      	strb	r3, [r7, #15]
  }
  return retval;
 8003436:	7bfb      	ldrb	r3, [r7, #15]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <ICM_20948_set_dlpf_cfg>:

ICM_20948_Status_e ICM_20948_set_dlpf_cfg(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_dlpcfg_t cfg)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	460b      	mov	r3, r1
 800344a:	80ba      	strh	r2, [r7, #4]
 800344c:	72fb      	strb	r3, [r7, #11]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 800344e:	2300      	movs	r3, #0
 8003450:	75fb      	strb	r3, [r7, #23]

  if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
 8003452:	7afb      	ldrb	r3, [r7, #11]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <ICM_20948_set_dlpf_cfg+0x20>
  {
    return ICM_20948_Stat_SensorNotSupported;
 800345c:	2307      	movs	r3, #7
 800345e:	e08c      	b.n	800357a <ICM_20948_set_dlpf_cfg+0x13a>
  }

  if (sensors & ICM_20948_Internal_Acc)
 8003460:	7afb      	ldrb	r3, [r7, #11]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d040      	beq.n	80034ec <ICM_20948_set_dlpf_cfg+0xac>
  {
    ICM_20948_ACCEL_CONFIG_t reg;
    retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
 800346a:	2102      	movs	r1, #2
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f7ff fbb3 	bl	8002bd8 <ICM_20948_set_bank>
 8003472:	4603      	mov	r3, r0
 8003474:	461a      	mov	r2, r3
 8003476:	7dfb      	ldrb	r3, [r7, #23]
 8003478:	4313      	orrs	r3, r2
 800347a:	75fb      	strb	r3, [r7, #23]
    retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
 800347c:	f107 0214 	add.w	r2, r7, #20
 8003480:	2301      	movs	r3, #1
 8003482:	2114      	movs	r1, #20
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7ff fa33 	bl	80028f0 <ICM_20948_execute_r>
 800348a:	4603      	mov	r3, r0
 800348c:	461a      	mov	r2, r3
 800348e:	7dfb      	ldrb	r3, [r7, #23]
 8003490:	4313      	orrs	r3, r2
 8003492:	75fb      	strb	r3, [r7, #23]
    reg.ACCEL_DLPFCFG = cfg.a;
 8003494:	793b      	ldrb	r3, [r7, #4]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	b2da      	uxtb	r2, r3
 800349c:	7d3b      	ldrb	r3, [r7, #20]
 800349e:	f362 03c5 	bfi	r3, r2, #3, #3
 80034a2:	753b      	strb	r3, [r7, #20]
    retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
 80034a4:	f107 0214 	add.w	r2, r7, #20
 80034a8:	2301      	movs	r3, #1
 80034aa:	2114      	movs	r1, #20
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f7ff fa01 	bl	80028b4 <ICM_20948_execute_w>
 80034b2:	4603      	mov	r3, r0
 80034b4:	461a      	mov	r2, r3
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	75fb      	strb	r3, [r7, #23]
    // Check the data was written correctly
    retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
 80034bc:	f107 0214 	add.w	r2, r7, #20
 80034c0:	2301      	movs	r3, #1
 80034c2:	2114      	movs	r1, #20
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f7ff fa13 	bl	80028f0 <ICM_20948_execute_r>
 80034ca:	4603      	mov	r3, r0
 80034cc:	461a      	mov	r2, r3
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	75fb      	strb	r3, [r7, #23]
    if (reg.ACCEL_DLPFCFG != cfg.a) retval |= ICM_20948_Stat_Err;
 80034d4:	7d3b      	ldrb	r3, [r7, #20]
 80034d6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	461a      	mov	r2, r3
 80034de:	793b      	ldrb	r3, [r7, #4]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d003      	beq.n	80034ec <ICM_20948_set_dlpf_cfg+0xac>
 80034e4:	7dfb      	ldrb	r3, [r7, #23]
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	75fb      	strb	r3, [r7, #23]
  }
  if (sensors & ICM_20948_Internal_Gyr)
 80034ec:	7afb      	ldrb	r3, [r7, #11]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d040      	beq.n	8003578 <ICM_20948_set_dlpf_cfg+0x138>
  {
    ICM_20948_GYRO_CONFIG_1_t reg;
    retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
 80034f6:	2102      	movs	r1, #2
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f7ff fb6d 	bl	8002bd8 <ICM_20948_set_bank>
 80034fe:	4603      	mov	r3, r0
 8003500:	461a      	mov	r2, r3
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	4313      	orrs	r3, r2
 8003506:	75fb      	strb	r3, [r7, #23]
    retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
 8003508:	f107 0210 	add.w	r2, r7, #16
 800350c:	2301      	movs	r3, #1
 800350e:	2101      	movs	r1, #1
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f7ff f9ed 	bl	80028f0 <ICM_20948_execute_r>
 8003516:	4603      	mov	r3, r0
 8003518:	461a      	mov	r2, r3
 800351a:	7dfb      	ldrb	r3, [r7, #23]
 800351c:	4313      	orrs	r3, r2
 800351e:	75fb      	strb	r3, [r7, #23]
    reg.GYRO_DLPFCFG = cfg.g;
 8003520:	797b      	ldrb	r3, [r7, #5]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	b2da      	uxtb	r2, r3
 8003528:	7c3b      	ldrb	r3, [r7, #16]
 800352a:	f362 03c5 	bfi	r3, r2, #3, #3
 800352e:	743b      	strb	r3, [r7, #16]
    retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
 8003530:	f107 0210 	add.w	r2, r7, #16
 8003534:	2301      	movs	r3, #1
 8003536:	2101      	movs	r1, #1
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f7ff f9bb 	bl	80028b4 <ICM_20948_execute_w>
 800353e:	4603      	mov	r3, r0
 8003540:	461a      	mov	r2, r3
 8003542:	7dfb      	ldrb	r3, [r7, #23]
 8003544:	4313      	orrs	r3, r2
 8003546:	75fb      	strb	r3, [r7, #23]
    // Check the data was written correctly
    retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
 8003548:	f107 0210 	add.w	r2, r7, #16
 800354c:	2301      	movs	r3, #1
 800354e:	2101      	movs	r1, #1
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f7ff f9cd 	bl	80028f0 <ICM_20948_execute_r>
 8003556:	4603      	mov	r3, r0
 8003558:	461a      	mov	r2, r3
 800355a:	7dfb      	ldrb	r3, [r7, #23]
 800355c:	4313      	orrs	r3, r2
 800355e:	75fb      	strb	r3, [r7, #23]
    if (reg.GYRO_DLPFCFG != cfg.g) retval |= ICM_20948_Stat_Err;
 8003560:	7c3b      	ldrb	r3, [r7, #16]
 8003562:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	797b      	ldrb	r3, [r7, #5]
 800356c:	429a      	cmp	r2, r3
 800356e:	d003      	beq.n	8003578 <ICM_20948_set_dlpf_cfg+0x138>
 8003570:	7dfb      	ldrb	r3, [r7, #23]
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	75fb      	strb	r3, [r7, #23]
  }
  return retval;
 8003578:	7dfb      	ldrb	r3, [r7, #23]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <ICM_20948_enable_dlpf>:

ICM_20948_Status_e ICM_20948_enable_dlpf(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, bool enable)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b084      	sub	sp, #16
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	460b      	mov	r3, r1
 800358c:	70fb      	strb	r3, [r7, #3]
 800358e:	4613      	mov	r3, r2
 8003590:	70bb      	strb	r3, [r7, #2]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8003592:	2300      	movs	r3, #0
 8003594:	73fb      	strb	r3, [r7, #15]

  if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
 8003596:	78fb      	ldrb	r3, [r7, #3]
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <ICM_20948_enable_dlpf+0x22>
  {
    return ICM_20948_Stat_SensorNotSupported;
 80035a0:	2307      	movs	r3, #7
 80035a2:	e0ac      	b.n	80036fe <ICM_20948_enable_dlpf+0x17c>
  }

  if (sensors & ICM_20948_Internal_Acc)
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d050      	beq.n	8003650 <ICM_20948_enable_dlpf+0xce>
  {
    ICM_20948_ACCEL_CONFIG_t reg;
    retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
 80035ae:	2102      	movs	r1, #2
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff fb11 	bl	8002bd8 <ICM_20948_set_bank>
 80035b6:	4603      	mov	r3, r0
 80035b8:	461a      	mov	r2, r3
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
 80035bc:	4313      	orrs	r3, r2
 80035be:	73fb      	strb	r3, [r7, #15]
    retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
 80035c0:	f107 020c 	add.w	r2, r7, #12
 80035c4:	2301      	movs	r3, #1
 80035c6:	2114      	movs	r1, #20
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff f991 	bl	80028f0 <ICM_20948_execute_r>
 80035ce:	4603      	mov	r3, r0
 80035d0:	461a      	mov	r2, r3
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	73fb      	strb	r3, [r7, #15]
    if (enable)
 80035d8:	78bb      	ldrb	r3, [r7, #2]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d004      	beq.n	80035e8 <ICM_20948_enable_dlpf+0x66>
    {
      reg.ACCEL_FCHOICE = 1;
 80035de:	7b3b      	ldrb	r3, [r7, #12]
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	733b      	strb	r3, [r7, #12]
 80035e6:	e003      	b.n	80035f0 <ICM_20948_enable_dlpf+0x6e>
    }
    else
    {
      reg.ACCEL_FCHOICE = 0;
 80035e8:	7b3b      	ldrb	r3, [r7, #12]
 80035ea:	f36f 0300 	bfc	r3, #0, #1
 80035ee:	733b      	strb	r3, [r7, #12]
    }
    retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
 80035f0:	f107 020c 	add.w	r2, r7, #12
 80035f4:	2301      	movs	r3, #1
 80035f6:	2114      	movs	r1, #20
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff f95b 	bl	80028b4 <ICM_20948_execute_w>
 80035fe:	4603      	mov	r3, r0
 8003600:	461a      	mov	r2, r3
 8003602:	7bfb      	ldrb	r3, [r7, #15]
 8003604:	4313      	orrs	r3, r2
 8003606:	73fb      	strb	r3, [r7, #15]
    // Check the data was written correctly
    retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
 8003608:	f107 020c 	add.w	r2, r7, #12
 800360c:	2301      	movs	r3, #1
 800360e:	2114      	movs	r1, #20
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff f96d 	bl	80028f0 <ICM_20948_execute_r>
 8003616:	4603      	mov	r3, r0
 8003618:	461a      	mov	r2, r3
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	4313      	orrs	r3, r2
 800361e:	73fb      	strb	r3, [r7, #15]
    if (enable)
 8003620:	78bb      	ldrb	r3, [r7, #2]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <ICM_20948_enable_dlpf+0xba>
    {
      if (reg.ACCEL_FCHOICE != 1) retval |= ICM_20948_Stat_Err;
 8003626:	7b3b      	ldrb	r3, [r7, #12]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10e      	bne.n	8003650 <ICM_20948_enable_dlpf+0xce>
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	f043 0301 	orr.w	r3, r3, #1
 8003638:	73fb      	strb	r3, [r7, #15]
 800363a:	e009      	b.n	8003650 <ICM_20948_enable_dlpf+0xce>
    }
    else
    {
      if (reg.ACCEL_FCHOICE != 0) retval |= ICM_20948_Stat_Err;
 800363c:	7b3b      	ldrb	r3, [r7, #12]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <ICM_20948_enable_dlpf+0xce>
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
    }
  }
  if (sensors & ICM_20948_Internal_Gyr)
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d050      	beq.n	80036fc <ICM_20948_enable_dlpf+0x17a>
  {
    ICM_20948_GYRO_CONFIG_1_t reg;
    retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
 800365a:	2102      	movs	r1, #2
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff fabb 	bl	8002bd8 <ICM_20948_set_bank>
 8003662:	4603      	mov	r3, r0
 8003664:	461a      	mov	r2, r3
 8003666:	7bfb      	ldrb	r3, [r7, #15]
 8003668:	4313      	orrs	r3, r2
 800366a:	73fb      	strb	r3, [r7, #15]
    retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
 800366c:	f107 0208 	add.w	r2, r7, #8
 8003670:	2301      	movs	r3, #1
 8003672:	2101      	movs	r1, #1
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff f93b 	bl	80028f0 <ICM_20948_execute_r>
 800367a:	4603      	mov	r3, r0
 800367c:	461a      	mov	r2, r3
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	4313      	orrs	r3, r2
 8003682:	73fb      	strb	r3, [r7, #15]
    if (enable)
 8003684:	78bb      	ldrb	r3, [r7, #2]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d004      	beq.n	8003694 <ICM_20948_enable_dlpf+0x112>
    {
      reg.GYRO_FCHOICE = 1;
 800368a:	7a3b      	ldrb	r3, [r7, #8]
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	723b      	strb	r3, [r7, #8]
 8003692:	e003      	b.n	800369c <ICM_20948_enable_dlpf+0x11a>
    }
    else
    {
      reg.GYRO_FCHOICE = 0;
 8003694:	7a3b      	ldrb	r3, [r7, #8]
 8003696:	f36f 0300 	bfc	r3, #0, #1
 800369a:	723b      	strb	r3, [r7, #8]
    }
    retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
 800369c:	f107 0208 	add.w	r2, r7, #8
 80036a0:	2301      	movs	r3, #1
 80036a2:	2101      	movs	r1, #1
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff f905 	bl	80028b4 <ICM_20948_execute_w>
 80036aa:	4603      	mov	r3, r0
 80036ac:	461a      	mov	r2, r3
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	73fb      	strb	r3, [r7, #15]
    // Check the data was written correctly
    retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
 80036b4:	f107 0208 	add.w	r2, r7, #8
 80036b8:	2301      	movs	r3, #1
 80036ba:	2101      	movs	r1, #1
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff f917 	bl	80028f0 <ICM_20948_execute_r>
 80036c2:	4603      	mov	r3, r0
 80036c4:	461a      	mov	r2, r3
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	73fb      	strb	r3, [r7, #15]
    if (enable)
 80036cc:	78bb      	ldrb	r3, [r7, #2]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <ICM_20948_enable_dlpf+0x166>
    {
      if (reg.GYRO_FCHOICE != 1) retval |= ICM_20948_Stat_Err;
 80036d2:	7a3b      	ldrb	r3, [r7, #8]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10e      	bne.n	80036fc <ICM_20948_enable_dlpf+0x17a>
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
 80036e6:	e009      	b.n	80036fc <ICM_20948_enable_dlpf+0x17a>
    }
    else
    {
      if (reg.GYRO_FCHOICE != 0) retval |= ICM_20948_Stat_Err;
 80036e8:	7a3b      	ldrb	r3, [r7, #8]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <ICM_20948_enable_dlpf+0x17a>
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	f043 0301 	orr.w	r3, r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  return retval;
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <ICM_20948_set_sample_rate>:

ICM_20948_Status_e ICM_20948_set_sample_rate(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_smplrt_t smplrt)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b086      	sub	sp, #24
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	460b      	mov	r3, r1
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	72fb      	strb	r3, [r7, #11]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8003714:	2300      	movs	r3, #0
 8003716:	75fb      	strb	r3, [r7, #23]

  if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
 8003718:	7afb      	ldrb	r3, [r7, #11]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <ICM_20948_set_sample_rate+0x20>
  {
    return ICM_20948_Stat_SensorNotSupported;
 8003722:	2307      	movs	r3, #7
 8003724:	e047      	b.n	80037b6 <ICM_20948_set_sample_rate+0xb0>
  }

  if (sensors & ICM_20948_Internal_Acc)
 8003726:	7afb      	ldrb	r3, [r7, #11]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d025      	beq.n	800377c <ICM_20948_set_sample_rate+0x76>
  {
    retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
 8003730:	2102      	movs	r1, #2
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f7ff fa50 	bl	8002bd8 <ICM_20948_set_bank>
 8003738:	4603      	mov	r3, r0
 800373a:	461a      	mov	r2, r3
 800373c:	7dfb      	ldrb	r3, [r7, #23]
 800373e:	4313      	orrs	r3, r2
 8003740:	75fb      	strb	r3, [r7, #23]
    uint8_t div1 = (smplrt.a << 8);
 8003742:	2300      	movs	r3, #0
 8003744:	75bb      	strb	r3, [r7, #22]
    uint8_t div2 = (smplrt.a & 0xFF);
 8003746:	88bb      	ldrh	r3, [r7, #4]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	757b      	strb	r3, [r7, #21]
    retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_SMPLRT_DIV_1, &div1, 1);
 800374c:	f107 0216 	add.w	r2, r7, #22
 8003750:	2301      	movs	r3, #1
 8003752:	2110      	movs	r1, #16
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f7ff f8ad 	bl	80028b4 <ICM_20948_execute_w>
 800375a:	4603      	mov	r3, r0
 800375c:	461a      	mov	r2, r3
 800375e:	7dfb      	ldrb	r3, [r7, #23]
 8003760:	4313      	orrs	r3, r2
 8003762:	75fb      	strb	r3, [r7, #23]
    retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_SMPLRT_DIV_2, &div2, 1);
 8003764:	f107 0215 	add.w	r2, r7, #21
 8003768:	2301      	movs	r3, #1
 800376a:	2111      	movs	r1, #17
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f7ff f8a1 	bl	80028b4 <ICM_20948_execute_w>
 8003772:	4603      	mov	r3, r0
 8003774:	461a      	mov	r2, r3
 8003776:	7dfb      	ldrb	r3, [r7, #23]
 8003778:	4313      	orrs	r3, r2
 800377a:	75fb      	strb	r3, [r7, #23]
  }
  if (sensors & ICM_20948_Internal_Gyr)
 800377c:	7afb      	ldrb	r3, [r7, #11]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d016      	beq.n	80037b4 <ICM_20948_set_sample_rate+0xae>
  {
    retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
 8003786:	2102      	movs	r1, #2
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f7ff fa25 	bl	8002bd8 <ICM_20948_set_bank>
 800378e:	4603      	mov	r3, r0
 8003790:	461a      	mov	r2, r3
 8003792:	7dfb      	ldrb	r3, [r7, #23]
 8003794:	4313      	orrs	r3, r2
 8003796:	75fb      	strb	r3, [r7, #23]
    uint8_t div = (smplrt.g);
 8003798:	79bb      	ldrb	r3, [r7, #6]
 800379a:	753b      	strb	r3, [r7, #20]
    retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_SMPLRT_DIV, &div, 1);
 800379c:	f107 0214 	add.w	r2, r7, #20
 80037a0:	2301      	movs	r3, #1
 80037a2:	2100      	movs	r1, #0
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f7ff f885 	bl	80028b4 <ICM_20948_execute_w>
 80037aa:	4603      	mov	r3, r0
 80037ac:	461a      	mov	r2, r3
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	75fb      	strb	r3, [r7, #23]
  }
  return retval;
 80037b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <ICM_20948_i2c_master_passthrough>:

// Interface Things
ICM_20948_Status_e ICM_20948_i2c_master_passthrough(ICM_20948_Device_t *pdev, bool passthrough)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	460b      	mov	r3, r1
 80037c8:	70fb      	strb	r3, [r7, #3]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 80037ca:	2300      	movs	r3, #0
 80037cc:	73fb      	strb	r3, [r7, #15]

  ICM_20948_INT_PIN_CFG_t reg;
  retval = ICM_20948_set_bank(pdev, 0);
 80037ce:	2100      	movs	r1, #0
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff fa01 	bl	8002bd8 <ICM_20948_set_bank>
 80037d6:	4603      	mov	r3, r0
 80037d8:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <ICM_20948_i2c_master_passthrough+0x26>
  {
    return retval;
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
 80037e2:	e021      	b.n	8003828 <ICM_20948_i2c_master_passthrough+0x6a>
  }
  retval = ICM_20948_execute_r(pdev, AGB0_REG_INT_PIN_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_INT_PIN_CFG_t));
 80037e4:	f107 020c 	add.w	r2, r7, #12
 80037e8:	2301      	movs	r3, #1
 80037ea:	210f      	movs	r1, #15
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff f87f 	bl	80028f0 <ICM_20948_execute_r>
 80037f2:	4603      	mov	r3, r0
 80037f4:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <ICM_20948_i2c_master_passthrough+0x42>
  {
    return retval;
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	e013      	b.n	8003828 <ICM_20948_i2c_master_passthrough+0x6a>
  }
  reg.BYPASS_EN = passthrough;
 8003800:	7b3b      	ldrb	r3, [r7, #12]
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	f362 0341 	bfi	r3, r2, #1, #1
 8003808:	733b      	strb	r3, [r7, #12]
  retval = ICM_20948_execute_w(pdev, AGB0_REG_INT_PIN_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_INT_PIN_CFG_t));
 800380a:	f107 020c 	add.w	r2, r7, #12
 800380e:	2301      	movs	r3, #1
 8003810:	210f      	movs	r1, #15
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff f84e 	bl	80028b4 <ICM_20948_execute_w>
 8003818:	4603      	mov	r3, r0
 800381a:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <ICM_20948_i2c_master_passthrough+0x68>
  {
    return retval;
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	e000      	b.n	8003828 <ICM_20948_i2c_master_passthrough+0x6a>
  }

  return retval;
 8003826:	7bfb      	ldrb	r3, [r7, #15]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <ICM_20948_i2c_master_enable>:

ICM_20948_Status_e ICM_20948_i2c_master_enable(ICM_20948_Device_t *pdev, bool enable)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	70fb      	strb	r3, [r7, #3]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 800383c:	2300      	movs	r3, #0
 800383e:	73fb      	strb	r3, [r7, #15]

  // Disable BYPASS_EN
  retval = ICM_20948_i2c_master_passthrough(pdev, false);
 8003840:	2100      	movs	r1, #0
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff ffbb 	bl	80037be <ICM_20948_i2c_master_passthrough>
 8003848:	4603      	mov	r3, r0
 800384a:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <ICM_20948_i2c_master_enable+0x26>
  {
    return retval;
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	e063      	b.n	800391e <ICM_20948_i2c_master_enable+0xee>
  }

  ICM_20948_I2C_MST_CTRL_t ctrl;
  retval = ICM_20948_set_bank(pdev, 3);
 8003856:	2103      	movs	r1, #3
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff f9bd 	bl	8002bd8 <ICM_20948_set_bank>
 800385e:	4603      	mov	r3, r0
 8003860:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <ICM_20948_i2c_master_enable+0x3c>
  {
    return retval;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	e058      	b.n	800391e <ICM_20948_i2c_master_enable+0xee>
  }
  retval = ICM_20948_execute_r(pdev, AGB3_REG_I2C_MST_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_MST_CTRL_t));
 800386c:	f107 020c 	add.w	r2, r7, #12
 8003870:	2301      	movs	r3, #1
 8003872:	2101      	movs	r1, #1
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7ff f83b 	bl	80028f0 <ICM_20948_execute_r>
 800387a:	4603      	mov	r3, r0
 800387c:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <ICM_20948_i2c_master_enable+0x58>
  {
    return retval;
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	e04a      	b.n	800391e <ICM_20948_i2c_master_enable+0xee>
  }
  ctrl.I2C_MST_CLK = 0x07; // corresponds to 345.6 kHz, good for up to 400 kHz
 8003888:	7b3b      	ldrb	r3, [r7, #12]
 800388a:	2207      	movs	r2, #7
 800388c:	f362 0303 	bfi	r3, r2, #0, #4
 8003890:	733b      	strb	r3, [r7, #12]
  ctrl.I2C_MST_P_NSR = 1;
 8003892:	7b3b      	ldrb	r3, [r7, #12]
 8003894:	f043 0310 	orr.w	r3, r3, #16
 8003898:	733b      	strb	r3, [r7, #12]
  retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_MST_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_MST_CTRL_t));
 800389a:	f107 020c 	add.w	r2, r7, #12
 800389e:	2301      	movs	r3, #1
 80038a0:	2101      	movs	r1, #1
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff f806 	bl	80028b4 <ICM_20948_execute_w>
 80038a8:	4603      	mov	r3, r0
 80038aa:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <ICM_20948_i2c_master_enable+0x86>
  {
    return retval;
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
 80038b4:	e033      	b.n	800391e <ICM_20948_i2c_master_enable+0xee>
  }

  ICM_20948_USER_CTRL_t reg;
  retval = ICM_20948_set_bank(pdev, 0);
 80038b6:	2100      	movs	r1, #0
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff f98d 	bl	8002bd8 <ICM_20948_set_bank>
 80038be:	4603      	mov	r3, r0
 80038c0:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <ICM_20948_i2c_master_enable+0x9c>
  {
    return retval;
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	e028      	b.n	800391e <ICM_20948_i2c_master_enable+0xee>
  }
  retval = ICM_20948_execute_r(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&reg, sizeof(ICM_20948_USER_CTRL_t));
 80038cc:	f107 0208 	add.w	r2, r7, #8
 80038d0:	2301      	movs	r3, #1
 80038d2:	2103      	movs	r1, #3
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff f80b 	bl	80028f0 <ICM_20948_execute_r>
 80038da:	4603      	mov	r3, r0
 80038dc:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <ICM_20948_i2c_master_enable+0xb8>
  {
    return retval;
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	e01a      	b.n	800391e <ICM_20948_i2c_master_enable+0xee>
  }
  if (enable)
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d004      	beq.n	80038f8 <ICM_20948_i2c_master_enable+0xc8>
  {
    reg.I2C_MST_EN = 1;
 80038ee:	7a3b      	ldrb	r3, [r7, #8]
 80038f0:	f043 0320 	orr.w	r3, r3, #32
 80038f4:	723b      	strb	r3, [r7, #8]
 80038f6:	e003      	b.n	8003900 <ICM_20948_i2c_master_enable+0xd0>
  }
  else
  {
    reg.I2C_MST_EN = 0;
 80038f8:	7a3b      	ldrb	r3, [r7, #8]
 80038fa:	f36f 1345 	bfc	r3, #5, #1
 80038fe:	723b      	strb	r3, [r7, #8]
  }
  retval = ICM_20948_execute_w(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&reg, sizeof(ICM_20948_USER_CTRL_t));
 8003900:	f107 0208 	add.w	r2, r7, #8
 8003904:	2301      	movs	r3, #1
 8003906:	2103      	movs	r1, #3
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7fe ffd3 	bl	80028b4 <ICM_20948_execute_w>
 800390e:	4603      	mov	r3, r0
 8003910:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <ICM_20948_i2c_master_enable+0xec>
  {
    return retval;
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	e000      	b.n	800391e <ICM_20948_i2c_master_enable+0xee>
  }

  return retval;
 800391c:	7bfb      	ldrb	r3, [r7, #15]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <ICM_20948_i2c_master_reset>:

ICM_20948_Status_e ICM_20948_i2c_master_reset(ICM_20948_Device_t *pdev)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 800392e:	2300      	movs	r3, #0
 8003930:	73fb      	strb	r3, [r7, #15]

  ICM_20948_USER_CTRL_t ctrl;
  retval = ICM_20948_set_bank(pdev, 0);
 8003932:	2100      	movs	r1, #0
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff f94f 	bl	8002bd8 <ICM_20948_set_bank>
 800393a:	4603      	mov	r3, r0
 800393c:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <ICM_20948_i2c_master_reset+0x22>
  {
    return retval;
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	e020      	b.n	800398a <ICM_20948_i2c_master_reset+0x64>
  }

  retval = ICM_20948_execute_r(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
 8003948:	f107 020c 	add.w	r2, r7, #12
 800394c:	2301      	movs	r3, #1
 800394e:	2103      	movs	r1, #3
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7fe ffcd 	bl	80028f0 <ICM_20948_execute_r>
 8003956:	4603      	mov	r3, r0
 8003958:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 800395a:	7bfb      	ldrb	r3, [r7, #15]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <ICM_20948_i2c_master_reset+0x3e>
  {
    return retval;
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	e012      	b.n	800398a <ICM_20948_i2c_master_reset+0x64>
  }

  ctrl.I2C_MST_RST = 1; //Reset!
 8003964:	7b3b      	ldrb	r3, [r7, #12]
 8003966:	f043 0302 	orr.w	r3, r3, #2
 800396a:	733b      	strb	r3, [r7, #12]

  retval = ICM_20948_execute_w(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
 800396c:	f107 020c 	add.w	r2, r7, #12
 8003970:	2301      	movs	r3, #1
 8003972:	2103      	movs	r1, #3
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7fe ff9d 	bl	80028b4 <ICM_20948_execute_w>
 800397a:	4603      	mov	r3, r0
 800397c:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <ICM_20948_i2c_master_reset+0x62>
  {
    return retval;
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	e000      	b.n	800398a <ICM_20948_i2c_master_reset+0x64>
  }
  return retval;
 8003988:	7bfb      	ldrb	r3, [r7, #15]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <ICM_20948_i2c_controller_configure_peripheral>:

ICM_20948_Status_e ICM_20948_i2c_controller_configure_peripheral(ICM_20948_Device_t *pdev, uint8_t peripheral, uint8_t addr, uint8_t reg, uint8_t len, bool Rw, bool enable, bool data_only, bool grp, bool swap, uint8_t dataOut)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	4608      	mov	r0, r1
 800399e:	4611      	mov	r1, r2
 80039a0:	461a      	mov	r2, r3
 80039a2:	4603      	mov	r3, r0
 80039a4:	70fb      	strb	r3, [r7, #3]
 80039a6:	460b      	mov	r3, r1
 80039a8:	70bb      	strb	r3, [r7, #2]
 80039aa:	4613      	mov	r3, r2
 80039ac:	707b      	strb	r3, [r7, #1]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 80039ae:	2300      	movs	r3, #0
 80039b0:	76fb      	strb	r3, [r7, #27]
  uint8_t periph_addr_reg;
  uint8_t periph_reg_reg;
  uint8_t periph_ctrl_reg;
  uint8_t periph_do_reg;

  switch (peripheral)
 80039b2:	78fb      	ldrb	r3, [r7, #3]
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d82f      	bhi.n	8003a18 <ICM_20948_i2c_controller_configure_peripheral+0x84>
 80039b8:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <ICM_20948_i2c_controller_configure_peripheral+0x2c>)
 80039ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039be:	bf00      	nop
 80039c0:	080039d1 	.word	0x080039d1
 80039c4:	080039e3 	.word	0x080039e3
 80039c8:	080039f5 	.word	0x080039f5
 80039cc:	08003a07 	.word	0x08003a07
  {
  case 0:
    periph_addr_reg = AGB3_REG_I2C_PERIPH0_ADDR;
 80039d0:	2303      	movs	r3, #3
 80039d2:	77fb      	strb	r3, [r7, #31]
    periph_reg_reg = AGB3_REG_I2C_PERIPH0_REG;
 80039d4:	2304      	movs	r3, #4
 80039d6:	77bb      	strb	r3, [r7, #30]
    periph_ctrl_reg = AGB3_REG_I2C_PERIPH0_CTRL;
 80039d8:	2305      	movs	r3, #5
 80039da:	777b      	strb	r3, [r7, #29]
    periph_do_reg = AGB3_REG_I2C_PERIPH0_DO;
 80039dc:	2306      	movs	r3, #6
 80039de:	773b      	strb	r3, [r7, #28]
    break;
 80039e0:	e01c      	b.n	8003a1c <ICM_20948_i2c_controller_configure_peripheral+0x88>
  case 1:
    periph_addr_reg = AGB3_REG_I2C_PERIPH1_ADDR;
 80039e2:	2307      	movs	r3, #7
 80039e4:	77fb      	strb	r3, [r7, #31]
    periph_reg_reg = AGB3_REG_I2C_PERIPH1_REG;
 80039e6:	2308      	movs	r3, #8
 80039e8:	77bb      	strb	r3, [r7, #30]
    periph_ctrl_reg = AGB3_REG_I2C_PERIPH1_CTRL;
 80039ea:	2309      	movs	r3, #9
 80039ec:	777b      	strb	r3, [r7, #29]
    periph_do_reg = AGB3_REG_I2C_PERIPH1_DO;
 80039ee:	230a      	movs	r3, #10
 80039f0:	773b      	strb	r3, [r7, #28]
    break;
 80039f2:	e013      	b.n	8003a1c <ICM_20948_i2c_controller_configure_peripheral+0x88>
  case 2:
    periph_addr_reg = AGB3_REG_I2C_PERIPH2_ADDR;
 80039f4:	230b      	movs	r3, #11
 80039f6:	77fb      	strb	r3, [r7, #31]
    periph_reg_reg = AGB3_REG_I2C_PERIPH2_REG;
 80039f8:	230c      	movs	r3, #12
 80039fa:	77bb      	strb	r3, [r7, #30]
    periph_ctrl_reg = AGB3_REG_I2C_PERIPH2_CTRL;
 80039fc:	230d      	movs	r3, #13
 80039fe:	777b      	strb	r3, [r7, #29]
    periph_do_reg = AGB3_REG_I2C_PERIPH2_DO;
 8003a00:	230e      	movs	r3, #14
 8003a02:	773b      	strb	r3, [r7, #28]
    break;
 8003a04:	e00a      	b.n	8003a1c <ICM_20948_i2c_controller_configure_peripheral+0x88>
  case 3:
    periph_addr_reg = AGB3_REG_I2C_PERIPH3_ADDR;
 8003a06:	230f      	movs	r3, #15
 8003a08:	77fb      	strb	r3, [r7, #31]
    periph_reg_reg = AGB3_REG_I2C_PERIPH3_REG;
 8003a0a:	2310      	movs	r3, #16
 8003a0c:	77bb      	strb	r3, [r7, #30]
    periph_ctrl_reg = AGB3_REG_I2C_PERIPH3_CTRL;
 8003a0e:	2311      	movs	r3, #17
 8003a10:	777b      	strb	r3, [r7, #29]
    periph_do_reg = AGB3_REG_I2C_PERIPH3_DO;
 8003a12:	2312      	movs	r3, #18
 8003a14:	773b      	strb	r3, [r7, #28]
    break;
 8003a16:	e001      	b.n	8003a1c <ICM_20948_i2c_controller_configure_peripheral+0x88>
  default:
    return ICM_20948_Stat_ParamErr;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e085      	b.n	8003b28 <ICM_20948_i2c_controller_configure_peripheral+0x194>
  }

  retval = ICM_20948_set_bank(pdev, 3);
 8003a1c:	2103      	movs	r1, #3
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff f8da 	bl	8002bd8 <ICM_20948_set_bank>
 8003a24:	4603      	mov	r3, r0
 8003a26:	76fb      	strb	r3, [r7, #27]
  if (retval != ICM_20948_Stat_Ok)
 8003a28:	7efb      	ldrb	r3, [r7, #27]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <ICM_20948_i2c_controller_configure_peripheral+0x9e>
  {
    return retval;
 8003a2e:	7efb      	ldrb	r3, [r7, #27]
 8003a30:	e07a      	b.n	8003b28 <ICM_20948_i2c_controller_configure_peripheral+0x194>
  }

  // Set the peripheral address and the Rw flag
  ICM_20948_I2C_PERIPHX_ADDR_t address;
  address.ID = addr;
 8003a32:	78bb      	ldrb	r3, [r7, #2]
 8003a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	7e3b      	ldrb	r3, [r7, #24]
 8003a3c:	f362 0306 	bfi	r3, r2, #0, #7
 8003a40:	763b      	strb	r3, [r7, #24]
  if (Rw)
 8003a42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d004      	beq.n	8003a54 <ICM_20948_i2c_controller_configure_peripheral+0xc0>
  {
    address.RNW = 1;
 8003a4a:	7e3b      	ldrb	r3, [r7, #24]
 8003a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a50:	763b      	strb	r3, [r7, #24]
 8003a52:	e003      	b.n	8003a5c <ICM_20948_i2c_controller_configure_peripheral+0xc8>
  }
  else
  {
    address.RNW = 0; // Make sure bit is clear (just in case there is any garbage in that RAM location)
 8003a54:	7e3b      	ldrb	r3, [r7, #24]
 8003a56:	f36f 13c7 	bfc	r3, #7, #1
 8003a5a:	763b      	strb	r3, [r7, #24]
  }
  retval = ICM_20948_execute_w(pdev, periph_addr_reg, (uint8_t *)&address, sizeof(ICM_20948_I2C_PERIPHX_ADDR_t));
 8003a5c:	f107 0218 	add.w	r2, r7, #24
 8003a60:	7ff9      	ldrb	r1, [r7, #31]
 8003a62:	2301      	movs	r3, #1
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7fe ff25 	bl	80028b4 <ICM_20948_execute_w>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	76fb      	strb	r3, [r7, #27]
  if (retval != ICM_20948_Stat_Ok)
 8003a6e:	7efb      	ldrb	r3, [r7, #27]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <ICM_20948_i2c_controller_configure_peripheral+0xe4>
  {
    return retval;
 8003a74:	7efb      	ldrb	r3, [r7, #27]
 8003a76:	e057      	b.n	8003b28 <ICM_20948_i2c_controller_configure_peripheral+0x194>
  }

  // If we are setting up a write, configure the Data Out register too
  if (!Rw)
 8003a78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003a7c:	f083 0301 	eor.w	r3, r3, #1
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d010      	beq.n	8003aa8 <ICM_20948_i2c_controller_configure_peripheral+0x114>
  {
    ICM_20948_I2C_PERIPHX_DO_t dataOutByte;
    dataOutByte.DO = dataOut;
 8003a86:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003a8a:	733b      	strb	r3, [r7, #12]
    retval = ICM_20948_execute_w(pdev, periph_do_reg, (uint8_t *)&dataOutByte, sizeof(ICM_20948_I2C_PERIPHX_DO_t));
 8003a8c:	f107 020c 	add.w	r2, r7, #12
 8003a90:	7f39      	ldrb	r1, [r7, #28]
 8003a92:	2301      	movs	r3, #1
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7fe ff0d 	bl	80028b4 <ICM_20948_execute_w>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	76fb      	strb	r3, [r7, #27]
    if (retval != ICM_20948_Stat_Ok)
 8003a9e:	7efb      	ldrb	r3, [r7, #27]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <ICM_20948_i2c_controller_configure_peripheral+0x114>
    {
      return retval;
 8003aa4:	7efb      	ldrb	r3, [r7, #27]
 8003aa6:	e03f      	b.n	8003b28 <ICM_20948_i2c_controller_configure_peripheral+0x194>
    }
  }

  // Set the peripheral sub-address (register address)
  ICM_20948_I2C_PERIPHX_REG_t subaddress;
  subaddress.REG = reg;
 8003aa8:	787b      	ldrb	r3, [r7, #1]
 8003aaa:	753b      	strb	r3, [r7, #20]
  retval = ICM_20948_execute_w(pdev, periph_reg_reg, (uint8_t *)&subaddress, sizeof(ICM_20948_I2C_PERIPHX_REG_t));
 8003aac:	f107 0214 	add.w	r2, r7, #20
 8003ab0:	7fb9      	ldrb	r1, [r7, #30]
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7fe fefd 	bl	80028b4 <ICM_20948_execute_w>
 8003aba:	4603      	mov	r3, r0
 8003abc:	76fb      	strb	r3, [r7, #27]
  if (retval != ICM_20948_Stat_Ok)
 8003abe:	7efb      	ldrb	r3, [r7, #27]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <ICM_20948_i2c_controller_configure_peripheral+0x134>
  {
    return retval;
 8003ac4:	7efb      	ldrb	r3, [r7, #27]
 8003ac6:	e02f      	b.n	8003b28 <ICM_20948_i2c_controller_configure_peripheral+0x194>
  }

  // Set up the control info
  ICM_20948_I2C_PERIPHX_CTRL_t ctrl;
  ctrl.LENG = len;
 8003ac8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	7c3b      	ldrb	r3, [r7, #16]
 8003ad4:	f362 0303 	bfi	r3, r2, #0, #4
 8003ad8:	743b      	strb	r3, [r7, #16]
  ctrl.EN = enable;
 8003ada:	7c3b      	ldrb	r3, [r7, #16]
 8003adc:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003ae0:	f362 13c7 	bfi	r3, r2, #7, #1
 8003ae4:	743b      	strb	r3, [r7, #16]
  ctrl.REG_DIS = data_only;
 8003ae6:	7c3b      	ldrb	r3, [r7, #16]
 8003ae8:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8003aec:	f362 1345 	bfi	r3, r2, #5, #1
 8003af0:	743b      	strb	r3, [r7, #16]
  ctrl.GRP = grp;
 8003af2:	7c3b      	ldrb	r3, [r7, #16]
 8003af4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003af8:	f362 1304 	bfi	r3, r2, #4, #1
 8003afc:	743b      	strb	r3, [r7, #16]
  ctrl.BYTE_SW = swap;
 8003afe:	7c3b      	ldrb	r3, [r7, #16]
 8003b00:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8003b04:	f362 1386 	bfi	r3, r2, #6, #1
 8003b08:	743b      	strb	r3, [r7, #16]
  retval = ICM_20948_execute_w(pdev, periph_ctrl_reg, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_PERIPHX_CTRL_t));
 8003b0a:	f107 0210 	add.w	r2, r7, #16
 8003b0e:	7f79      	ldrb	r1, [r7, #29]
 8003b10:	2301      	movs	r3, #1
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fe fece 	bl	80028b4 <ICM_20948_execute_w>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	76fb      	strb	r3, [r7, #27]
  if (retval != ICM_20948_Stat_Ok)
 8003b1c:	7efb      	ldrb	r3, [r7, #27]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <ICM_20948_i2c_controller_configure_peripheral+0x192>
  {
    return retval;
 8003b22:	7efb      	ldrb	r3, [r7, #27]
 8003b24:	e000      	b.n	8003b28 <ICM_20948_i2c_controller_configure_peripheral+0x194>
  }

  return retval;
 8003b26:	7efb      	ldrb	r3, [r7, #27]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3720      	adds	r7, #32
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <ICM_20948_enable_FIFO>:
}

// FIFO

ICM_20948_Status_e ICM_20948_enable_FIFO(ICM_20948_Device_t *pdev, bool enable)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	70fb      	strb	r3, [r7, #3]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	73fb      	strb	r3, [r7, #15]

  ICM_20948_USER_CTRL_t ctrl;
  retval = ICM_20948_set_bank(pdev, 0);
 8003b40:	2100      	movs	r1, #0
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff f848 	bl	8002bd8 <ICM_20948_set_bank>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <ICM_20948_enable_FIFO+0x26>
  {
    return retval;
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	e028      	b.n	8003ba8 <ICM_20948_enable_FIFO+0x78>
  }

  retval = ICM_20948_execute_r(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
 8003b56:	f107 020c 	add.w	r2, r7, #12
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	2103      	movs	r1, #3
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fe fec6 	bl	80028f0 <ICM_20948_execute_r>
 8003b64:	4603      	mov	r3, r0
 8003b66:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <ICM_20948_enable_FIFO+0x42>
  {
    return retval;
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	e01a      	b.n	8003ba8 <ICM_20948_enable_FIFO+0x78>
  }

  if (enable)
 8003b72:	78fb      	ldrb	r3, [r7, #3]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d004      	beq.n	8003b82 <ICM_20948_enable_FIFO+0x52>
    ctrl.FIFO_EN = 1;
 8003b78:	7b3b      	ldrb	r3, [r7, #12]
 8003b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b7e:	733b      	strb	r3, [r7, #12]
 8003b80:	e003      	b.n	8003b8a <ICM_20948_enable_FIFO+0x5a>
  else
    ctrl.FIFO_EN = 0;
 8003b82:	7b3b      	ldrb	r3, [r7, #12]
 8003b84:	f36f 1386 	bfc	r3, #6, #1
 8003b88:	733b      	strb	r3, [r7, #12]

  retval = ICM_20948_execute_w(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
 8003b8a:	f107 020c 	add.w	r2, r7, #12
 8003b8e:	2301      	movs	r3, #1
 8003b90:	2103      	movs	r1, #3
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fe fe8e 	bl	80028b4 <ICM_20948_execute_w>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <ICM_20948_enable_FIFO+0x76>
  {
    return retval;
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
 8003ba4:	e000      	b.n	8003ba8 <ICM_20948_enable_FIFO+0x78>
  }
  return retval;
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <ICM_20948_reset_FIFO>:

ICM_20948_Status_e ICM_20948_reset_FIFO(ICM_20948_Device_t *pdev)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	73fb      	strb	r3, [r7, #15]

  ICM_20948_FIFO_RST_t ctrl;
  retval = ICM_20948_set_bank(pdev, 0);
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff f80a 	bl	8002bd8 <ICM_20948_set_bank>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <ICM_20948_reset_FIFO+0x22>
  {
    return retval;
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	e033      	b.n	8003c3a <ICM_20948_reset_FIFO+0x8a>
  }

  retval = ICM_20948_execute_r(pdev, AGB0_REG_FIFO_RST, (uint8_t *)&ctrl, sizeof(ICM_20948_FIFO_RST_t));
 8003bd2:	f107 020c 	add.w	r2, r7, #12
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	2168      	movs	r1, #104	; 0x68
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7fe fe88 	bl	80028f0 <ICM_20948_execute_r>
 8003be0:	4603      	mov	r3, r0
 8003be2:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <ICM_20948_reset_FIFO+0x3e>
  {
    return retval;
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	e025      	b.n	8003c3a <ICM_20948_reset_FIFO+0x8a>
  }

  ctrl.FIFO_RESET = 0x1F; // Datasheet says "FIFO_RESET[4:0]"
 8003bee:	7b3b      	ldrb	r3, [r7, #12]
 8003bf0:	f043 031f 	orr.w	r3, r3, #31
 8003bf4:	733b      	strb	r3, [r7, #12]

  retval = ICM_20948_execute_w(pdev, AGB0_REG_FIFO_RST, (uint8_t *)&ctrl, sizeof(ICM_20948_FIFO_RST_t));
 8003bf6:	f107 020c 	add.w	r2, r7, #12
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	2168      	movs	r1, #104	; 0x68
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fe fe58 	bl	80028b4 <ICM_20948_execute_w>
 8003c04:	4603      	mov	r3, r0
 8003c06:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <ICM_20948_reset_FIFO+0x62>
  {
    return retval;
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	e013      	b.n	8003c3a <ICM_20948_reset_FIFO+0x8a>
  }

  //delay ???

  ctrl.FIFO_RESET = 0x1E; // The InvenSense Nucleo examples write 0x1F followed by 0x1E
 8003c12:	7b3b      	ldrb	r3, [r7, #12]
 8003c14:	221e      	movs	r2, #30
 8003c16:	f362 0304 	bfi	r3, r2, #0, #5
 8003c1a:	733b      	strb	r3, [r7, #12]

  retval = ICM_20948_execute_w(pdev, AGB0_REG_FIFO_RST, (uint8_t *)&ctrl, sizeof(ICM_20948_FIFO_RST_t));
 8003c1c:	f107 020c 	add.w	r2, r7, #12
 8003c20:	2301      	movs	r3, #1
 8003c22:	2168      	movs	r1, #104	; 0x68
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7fe fe45 	bl	80028b4 <ICM_20948_execute_w>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <ICM_20948_reset_FIFO+0x88>
  {
    return retval;
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	e000      	b.n	8003c3a <ICM_20948_reset_FIFO+0x8a>
  }

  return retval;
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <ICM_20948_get_FIFO_count>:
  }
  return retval;
}

ICM_20948_Status_e ICM_20948_get_FIFO_count(ICM_20948_Device_t *pdev, uint16_t *count)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b084      	sub	sp, #16
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	6039      	str	r1, [r7, #0]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	73fb      	strb	r3, [r7, #15]

  ICM_20948_FIFO_COUNTH_t ctrlh;
  ICM_20948_FIFO_COUNTL_t ctrll;
  retval = ICM_20948_set_bank(pdev, 0);
 8003c50:	2100      	movs	r1, #0
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fe ffc0 	bl	8002bd8 <ICM_20948_set_bank>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <ICM_20948_get_FIFO_count+0x24>
  {
    return retval;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	e02b      	b.n	8003cbe <ICM_20948_get_FIFO_count+0x7c>
  }

  retval = ICM_20948_execute_r(pdev, AGB0_REG_FIFO_COUNT_H, (uint8_t *)&ctrlh, sizeof(ICM_20948_FIFO_COUNTH_t));
 8003c66:	f107 020c 	add.w	r2, r7, #12
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	2170      	movs	r1, #112	; 0x70
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fe fe3e 	bl	80028f0 <ICM_20948_execute_r>
 8003c74:	4603      	mov	r3, r0
 8003c76:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <ICM_20948_get_FIFO_count+0x40>
  {
    return retval;
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	e01d      	b.n	8003cbe <ICM_20948_get_FIFO_count+0x7c>
  }

  ctrlh.FIFO_COUNTH &= 0x1F; // Datasheet says "FIFO_CNT[12:8]"
 8003c82:	7b3b      	ldrb	r3, [r7, #12]
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	733b      	strb	r3, [r7, #12]

  retval = ICM_20948_execute_r(pdev, AGB0_REG_FIFO_COUNT_L, (uint8_t *)&ctrll, sizeof(ICM_20948_FIFO_COUNTL_t));
 8003c8c:	f107 0208 	add.w	r2, r7, #8
 8003c90:	2301      	movs	r3, #1
 8003c92:	2171      	movs	r1, #113	; 0x71
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7fe fe2b 	bl	80028f0 <ICM_20948_execute_r>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <ICM_20948_get_FIFO_count+0x66>
  {
    return retval;
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	e00a      	b.n	8003cbe <ICM_20948_get_FIFO_count+0x7c>
  }

  *count = (((uint16_t)ctrlh.FIFO_COUNTH) << 8) | (uint16_t)ctrll.FIFO_COUNTL;
 8003ca8:	7b3b      	ldrb	r3, [r7, #12]
 8003caa:	021b      	lsls	r3, r3, #8
 8003cac:	b21a      	sxth	r2, r3
 8003cae:	7a3b      	ldrb	r3, [r7, #8]
 8003cb0:	b21b      	sxth	r3, r3
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	b21b      	sxth	r3, r3
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	801a      	strh	r2, [r3, #0]

  return retval;
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <ICM_20948_read_FIFO>:

ICM_20948_Status_e ICM_20948_read_FIFO(ICM_20948_Device_t *pdev, uint8_t *data, uint8_t len)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b086      	sub	sp, #24
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	71fb      	strb	r3, [r7, #7]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	75fb      	strb	r3, [r7, #23]

  retval = ICM_20948_set_bank(pdev, 0);
 8003cd8:	2100      	movs	r1, #0
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f7fe ff7c 	bl	8002bd8 <ICM_20948_set_bank>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	75fb      	strb	r3, [r7, #23]
  if (retval != ICM_20948_Stat_Ok)
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <ICM_20948_read_FIFO+0x28>
  {
    return retval;
 8003cea:	7dfb      	ldrb	r3, [r7, #23]
 8003cec:	e00d      	b.n	8003d0a <ICM_20948_read_FIFO+0x44>
  }

  retval = ICM_20948_execute_r(pdev, AGB0_REG_FIFO_R_W, data, len);
 8003cee:	79fb      	ldrb	r3, [r7, #7]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	2172      	movs	r1, #114	; 0x72
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f7fe fdfb 	bl	80028f0 <ICM_20948_execute_r>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	75fb      	strb	r3, [r7, #23]
  if (retval != ICM_20948_Stat_Ok)
 8003cfe:	7dfb      	ldrb	r3, [r7, #23]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <ICM_20948_read_FIFO+0x42>
  {
    return retval;
 8003d04:	7dfb      	ldrb	r3, [r7, #23]
 8003d06:	e000      	b.n	8003d0a <ICM_20948_read_FIFO+0x44>
  }

  return retval;
 8003d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <ICM_20948_enable_DMP>:

// DMP

ICM_20948_Status_e ICM_20948_enable_DMP(ICM_20948_Device_t *pdev, bool enable)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	70fb      	strb	r3, [r7, #3]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	73fb      	strb	r3, [r7, #15]

  ICM_20948_USER_CTRL_t ctrl;
  retval = ICM_20948_set_bank(pdev, 0);
 8003d22:	2100      	movs	r1, #0
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7fe ff57 	bl	8002bd8 <ICM_20948_set_bank>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <ICM_20948_enable_DMP+0x26>
  {
    return retval;
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	e028      	b.n	8003d8a <ICM_20948_enable_DMP+0x78>
  }

  retval = ICM_20948_execute_r(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
 8003d38:	f107 020c 	add.w	r2, r7, #12
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	2103      	movs	r1, #3
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7fe fdd5 	bl	80028f0 <ICM_20948_execute_r>
 8003d46:	4603      	mov	r3, r0
 8003d48:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <ICM_20948_enable_DMP+0x42>
  {
    return retval;
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	e01a      	b.n	8003d8a <ICM_20948_enable_DMP+0x78>
  }

  if (enable)
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d004      	beq.n	8003d64 <ICM_20948_enable_DMP+0x52>
    ctrl.DMP_EN = 1;
 8003d5a:	7b3b      	ldrb	r3, [r7, #12]
 8003d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d60:	733b      	strb	r3, [r7, #12]
 8003d62:	e003      	b.n	8003d6c <ICM_20948_enable_DMP+0x5a>
  else
    ctrl.DMP_EN = 0;
 8003d64:	7b3b      	ldrb	r3, [r7, #12]
 8003d66:	f36f 13c7 	bfc	r3, #7, #1
 8003d6a:	733b      	strb	r3, [r7, #12]

  retval = ICM_20948_execute_w(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
 8003d6c:	f107 020c 	add.w	r2, r7, #12
 8003d70:	2301      	movs	r3, #1
 8003d72:	2103      	movs	r1, #3
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7fe fd9d 	bl	80028b4 <ICM_20948_execute_w>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <ICM_20948_enable_DMP+0x76>
  {
    return retval;
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	e000      	b.n	8003d8a <ICM_20948_enable_DMP+0x78>
  }
  return retval;
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <ICM_20948_reset_DMP>:

ICM_20948_Status_e ICM_20948_reset_DMP(ICM_20948_Device_t *pdev)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	73fb      	strb	r3, [r7, #15]

  ICM_20948_USER_CTRL_t ctrl;
  retval = ICM_20948_set_bank(pdev, 0);
 8003d9e:	2100      	movs	r1, #0
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7fe ff19 	bl	8002bd8 <ICM_20948_set_bank>
 8003da6:	4603      	mov	r3, r0
 8003da8:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <ICM_20948_reset_DMP+0x22>
  {
    return retval;
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	e020      	b.n	8003df6 <ICM_20948_reset_DMP+0x64>
  }

  retval = ICM_20948_execute_r(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
 8003db4:	f107 020c 	add.w	r2, r7, #12
 8003db8:	2301      	movs	r3, #1
 8003dba:	2103      	movs	r1, #3
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7fe fd97 	bl	80028f0 <ICM_20948_execute_r>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <ICM_20948_reset_DMP+0x3e>
  {
    return retval;
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	e012      	b.n	8003df6 <ICM_20948_reset_DMP+0x64>
  }

  ctrl.DMP_RST = 1;
 8003dd0:	7b3b      	ldrb	r3, [r7, #12]
 8003dd2:	f043 0308 	orr.w	r3, r3, #8
 8003dd6:	733b      	strb	r3, [r7, #12]

  retval = ICM_20948_execute_w(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
 8003dd8:	f107 020c 	add.w	r2, r7, #12
 8003ddc:	2301      	movs	r3, #1
 8003dde:	2103      	movs	r1, #3
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7fe fd67 	bl	80028b4 <ICM_20948_execute_w>
 8003de6:	4603      	mov	r3, r0
 8003de8:	73fb      	strb	r3, [r7, #15]
  if (retval != ICM_20948_Stat_Ok)
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <ICM_20948_reset_DMP+0x62>
  {
    return retval;
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	e000      	b.n	8003df6 <ICM_20948_reset_DMP+0x64>
  }
  return retval;
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <ICM_20948_firmware_load>:

ICM_20948_Status_e ICM_20948_firmware_load(ICM_20948_Device_t *pdev)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
#if defined(ICM_20948_USE_DMP)
  return (inv_icm20948_firmware_load(pdev, dmp3_image, sizeof(dmp3_image), DMP_LOAD_START));
 8003e08:	2390      	movs	r3, #144	; 0x90
 8003e0a:	f243 72dd 	movw	r2, #14301	; 0x37dd
 8003e0e:	4904      	ldr	r1, [pc, #16]	; (8003e20 <ICM_20948_firmware_load+0x20>)
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f807 	bl	8003e24 <inv_icm20948_firmware_load>
 8003e16:	4603      	mov	r3, r0
#else
  return ICM_20948_Stat_DMPNotSupported;
#endif
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	08009018 	.word	0x08009018

08003e24 <inv_icm20948_firmware_load>:
* @param[in] size  size if the image
* @param[in] load_addr  address to loading the image
* @return 0 in case of success, -1 for any error
*/
ICM_20948_Status_e inv_icm20948_firmware_load(ICM_20948_Device_t *pdev, const unsigned char *data_start, unsigned short size_start, unsigned short load_addr)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08e      	sub	sp, #56	; 0x38
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	4611      	mov	r1, r2
 8003e30:	461a      	mov	r2, r3
 8003e32:	460b      	mov	r3, r1
 8003e34:	80fb      	strh	r3, [r7, #6]
 8003e36:	4613      	mov	r3, r2
 8003e38:	80bb      	strh	r3, [r7, #4]
  int write_size;
  ICM_20948_Status_e result = ICM_20948_Stat_Ok;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  unsigned short memaddr;
  const unsigned char *data;
  unsigned short size;
  unsigned char data_cmp[INV_MAX_SERIAL_READ];
  int flag = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24

  if (pdev->_dmp_firmware_available == false)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	791b      	ldrb	r3, [r3, #4]
 8003e48:	f083 0301 	eor.w	r3, r3, #1
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <inv_icm20948_firmware_load+0x32>
    return ICM_20948_Stat_DMPNotSupported;
 8003e52:	2308      	movs	r3, #8
 8003e54:	e0c0      	b.n	8003fd8 <inv_icm20948_firmware_load+0x1b4>

  if (pdev->_firmware_loaded)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	795b      	ldrb	r3, [r3, #5]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <inv_icm20948_firmware_load+0x3e>
    return ICM_20948_Stat_Ok; // Bail with no error if firmware is already loaded
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e0ba      	b.n	8003fd8 <inv_icm20948_firmware_load+0x1b4>

  result = ICM_20948_sleep(pdev, false); // Make sure chip is awake
 8003e62:	2100      	movs	r1, #0
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f7fe ff0d 	bl	8002c84 <ICM_20948_sleep>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (result != ICM_20948_Stat_Ok)
 8003e70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <inv_icm20948_firmware_load+0x5a>
  {
    return result;
 8003e78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e7c:	e0ac      	b.n	8003fd8 <inv_icm20948_firmware_load+0x1b4>
  }

  result = ICM_20948_low_power(pdev, false); // Make sure chip is not in low power state
 8003e7e:	2100      	movs	r1, #0
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7fe ff38 	bl	8002cf6 <ICM_20948_low_power>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (result != ICM_20948_Stat_Ok)
 8003e8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <inv_icm20948_firmware_load+0x76>
  {
    return result;
 8003e94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e98:	e09e      	b.n	8003fd8 <inv_icm20948_firmware_load+0x1b4>
  }

  // Write DMP memory

  data = data_start;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  size = size_start;
 8003e9e:	88fb      	ldrh	r3, [r7, #6]
 8003ea0:	857b      	strh	r3, [r7, #42]	; 0x2a
  memaddr = load_addr;
 8003ea2:	88bb      	ldrh	r3, [r7, #4]
 8003ea4:	867b      	strh	r3, [r7, #50]	; 0x32
  #ifdef ICM_20948_USE_PROGMEM_FOR_DMP
  unsigned char data_not_pg[INV_MAX_SERIAL_READ]; // Suggested by @HyperKokichi in Issue #63
  #endif
  while (size > 0)
 8003ea6:	e033      	b.n	8003f10 <inv_icm20948_firmware_load+0xec>
  {
    //write_size = min(size, INV_MAX_SERIAL_WRITE); // Write in chunks of INV_MAX_SERIAL_WRITE
    if (size <= INV_MAX_SERIAL_WRITE) // Write in chunks of INV_MAX_SERIAL_WRITE
 8003ea8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003eaa:	2b10      	cmp	r3, #16
 8003eac:	d802      	bhi.n	8003eb4 <inv_icm20948_firmware_load+0x90>
      write_size = size;
 8003eae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8003eb2:	e001      	b.n	8003eb8 <inv_icm20948_firmware_load+0x94>
    else
      write_size = INV_MAX_SERIAL_WRITE;
 8003eb4:	2310      	movs	r3, #16
 8003eb6:	637b      	str	r3, [r7, #52]	; 0x34
    if ((memaddr & 0xff) + write_size > 0x100)
 8003eb8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ec4:	dd06      	ble.n	8003ed4 <inv_icm20948_firmware_load+0xb0>
    {
      // Moved across a bank
      write_size = (memaddr & 0xff) + write_size - 0x100;
 8003ec6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ecc:	4413      	add	r3, r2
 8003ece:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003ed2:	637b      	str	r3, [r7, #52]	; 0x34
    }
#ifdef ICM_20948_USE_PROGMEM_FOR_DMP
    memcpy_P(data_not_pg, data, write_size);  // Suggested by @HyperKokichi in Issue #63
    result = inv_icm20948_write_mems(pdev, memaddr, write_size, (unsigned char *)data_not_pg);
#else
    result = inv_icm20948_write_mems(pdev, memaddr, write_size, (unsigned char *)data);
 8003ed4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ed6:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8003ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f8b2 	bl	8004044 <inv_icm20948_write_mems>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#endif
    if (result != ICM_20948_Stat_Ok)
 8003ee6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <inv_icm20948_firmware_load+0xd0>
      return result;
 8003eee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ef2:	e071      	b.n	8003fd8 <inv_icm20948_firmware_load+0x1b4>
    data += write_size;
 8003ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ef8:	4413      	add	r3, r2
 8003efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    size -= write_size;
 8003efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	857b      	strh	r3, [r7, #42]	; 0x2a
    memaddr += write_size;
 8003f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003f0c:	4413      	add	r3, r2
 8003f0e:	867b      	strh	r3, [r7, #50]	; 0x32
  while (size > 0)
 8003f10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1c8      	bne.n	8003ea8 <inv_icm20948_firmware_load+0x84>
  }

  // Verify DMP memory

  data = data_start;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  size = size_start;
 8003f1a:	88fb      	ldrh	r3, [r7, #6]
 8003f1c:	857b      	strh	r3, [r7, #42]	; 0x2a
  memaddr = load_addr;
 8003f1e:	88bb      	ldrh	r3, [r7, #4]
 8003f20:	867b      	strh	r3, [r7, #50]	; 0x32
  while (size > 0)
 8003f22:	e040      	b.n	8003fa6 <inv_icm20948_firmware_load+0x182>
  {
    //write_size = min(size, INV_MAX_SERIAL_READ); // Read in chunks of INV_MAX_SERIAL_READ
    if (size <= INV_MAX_SERIAL_READ) // Read in chunks of INV_MAX_SERIAL_READ
 8003f24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f26:	2b10      	cmp	r3, #16
 8003f28:	d802      	bhi.n	8003f30 <inv_icm20948_firmware_load+0x10c>
      write_size = size;
 8003f2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f2e:	e001      	b.n	8003f34 <inv_icm20948_firmware_load+0x110>
    else
      write_size = INV_MAX_SERIAL_READ;
 8003f30:	2310      	movs	r3, #16
 8003f32:	637b      	str	r3, [r7, #52]	; 0x34
    if ((memaddr & 0xff) + write_size > 0x100)
 8003f34:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f40:	dd06      	ble.n	8003f50 <inv_icm20948_firmware_load+0x12c>
    {
      // Moved across a bank
      write_size = (memaddr & 0xff) + write_size - 0x100;
 8003f42:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f48:	4413      	add	r3, r2
 8003f4a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003f4e:	637b      	str	r3, [r7, #52]	; 0x34
    }
    result = inv_icm20948_read_mems(pdev, memaddr, write_size, data_cmp);
 8003f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f52:	f107 0310 	add.w	r3, r7, #16
 8003f56:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 f8e8 	bl	800412e <inv_icm20948_read_mems>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (result != ICM_20948_Stat_Ok)
 8003f64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <inv_icm20948_firmware_load+0x14e>
      flag++;                               // Error, DMP not written correctly
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	3301      	adds	r3, #1
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef ICM_20948_USE_PROGMEM_FOR_DMP
    memcpy_P(data_not_pg, data, write_size);  // Suggested by @HyperKokichi in Issue #63
    if (memcmp(data_cmp, data_not_pg, write_size))
#else
    if (memcmp(data_cmp, data, write_size)) // Compare the data
 8003f72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f74:	f107 0310 	add.w	r3, r7, #16
 8003f78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f005 f81c 	bl	8008fb8 <memcmp>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <inv_icm20948_firmware_load+0x166>
#endif
      return ICM_20948_Stat_DMPVerifyFail;
 8003f86:	2309      	movs	r3, #9
 8003f88:	e026      	b.n	8003fd8 <inv_icm20948_firmware_load+0x1b4>
    data += write_size;
 8003f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f8e:	4413      	add	r3, r2
 8003f90:	62fb      	str	r3, [r7, #44]	; 0x2c
    size -= write_size;
 8003f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	857b      	strh	r3, [r7, #42]	; 0x2a
    memaddr += write_size;
 8003f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003fa2:	4413      	add	r3, r2
 8003fa4:	867b      	strh	r3, [r7, #50]	; 0x32
  while (size > 0)
 8003fa6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1bb      	bne.n	8003f24 <inv_icm20948_firmware_load+0x100>
  }

  //Enable LP_EN since we disabled it at begining of this function.
  result = ICM_20948_low_power(pdev, true); // Put chip into low power state
 8003fac:	2101      	movs	r1, #1
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f7fe fea1 	bl	8002cf6 <ICM_20948_low_power>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (result != ICM_20948_Stat_Ok)
 8003fba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <inv_icm20948_firmware_load+0x1a4>
    return result;
 8003fc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fc6:	e007      	b.n	8003fd8 <inv_icm20948_firmware_load+0x1b4>

  if (!flag)
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d102      	bne.n	8003fd4 <inv_icm20948_firmware_load+0x1b0>
  {
    //Serial.println("DMP Firmware was updated successfully..");
    pdev->_firmware_loaded = true;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	715a      	strb	r2, [r3, #5]
  }

  return result;
 8003fd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3738      	adds	r7, #56	; 0x38
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <ICM_20948_set_dmp_start_address>:

ICM_20948_Status_e ICM_20948_set_dmp_start_address(ICM_20948_Device_t *pdev, unsigned short address)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	807b      	strh	r3, [r7, #2]
  ICM_20948_Status_e result = ICM_20948_Stat_Ok;
 8003fec:	2300      	movs	r3, #0
 8003fee:	73fb      	strb	r3, [r7, #15]

  if (pdev->_dmp_firmware_available == false)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	791b      	ldrb	r3, [r3, #4]
 8003ff4:	f083 0301 	eor.w	r3, r3, #1
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <ICM_20948_set_dmp_start_address+0x22>
    return ICM_20948_Stat_DMPNotSupported;
 8003ffe:	2308      	movs	r3, #8
 8004000:	e01c      	b.n	800403c <ICM_20948_set_dmp_start_address+0x5c>

  unsigned char start_address[2];

  start_address[0] = (unsigned char)(address >> 8);
 8004002:	887b      	ldrh	r3, [r7, #2]
 8004004:	0a1b      	lsrs	r3, r3, #8
 8004006:	b29b      	uxth	r3, r3
 8004008:	b2db      	uxtb	r3, r3
 800400a:	733b      	strb	r3, [r7, #12]
  start_address[1] = (unsigned char)(address & 0xff);
 800400c:	887b      	ldrh	r3, [r7, #2]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	737b      	strb	r3, [r7, #13]
  // if (result != ICM_20948_Stat_Ok)
  // {
  // 		return result;
  // }

  result = ICM_20948_set_bank(pdev, 2); // Set bank 2
 8004012:	2102      	movs	r1, #2
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7fe fddf 	bl	8002bd8 <ICM_20948_set_bank>
 800401a:	4603      	mov	r3, r0
 800401c:	73fb      	strb	r3, [r7, #15]
  if (result != ICM_20948_Stat_Ok)
 800401e:	7bfb      	ldrb	r3, [r7, #15]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <ICM_20948_set_dmp_start_address+0x48>
  {
    return result;
 8004024:	7bfb      	ldrb	r3, [r7, #15]
 8004026:	e009      	b.n	800403c <ICM_20948_set_dmp_start_address+0x5c>
  }

  // Write the sensor control bits into memory address AGB2_REG_PRGM_START_ADDRH
  result = ICM_20948_execute_w(pdev, AGB2_REG_PRGM_START_ADDRH, (uint8_t *)start_address, 2);
 8004028:	f107 020c 	add.w	r2, r7, #12
 800402c:	2302      	movs	r3, #2
 800402e:	2150      	movs	r1, #80	; 0x50
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7fe fc3f 	bl	80028b4 <ICM_20948_execute_w>
 8004036:	4603      	mov	r3, r0
 8004038:	73fb      	strb	r3, [r7, #15]

  return result;
 800403a:	7bfb      	ldrb	r3, [r7, #15]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <inv_icm20948_write_mems>:
*  @param[in]   number of byte to be written
*  @param[out]  output data from the register
*  @return     0 if successful.
*/
ICM_20948_Status_e inv_icm20948_write_mems(ICM_20948_Device_t *pdev, unsigned short reg, unsigned int length, const unsigned char *data)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	603b      	str	r3, [r7, #0]
 8004050:	460b      	mov	r3, r1
 8004052:	817b      	strh	r3, [r7, #10]
  ICM_20948_Status_e result = ICM_20948_Stat_Ok;
 8004054:	2300      	movs	r3, #0
 8004056:	77fb      	strb	r3, [r7, #31]
  unsigned int bytesWritten = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	61bb      	str	r3, [r7, #24]
  unsigned int thisLen;
  unsigned char lBankSelected;
  unsigned char lStartAddrSelected;

  if (!data)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <inv_icm20948_write_mems+0x22>
  {
    return ICM_20948_Stat_NoData;
 8004062:	2306      	movs	r3, #6
 8004064:	e05f      	b.n	8004126 <inv_icm20948_write_mems+0xe2>
  }

  result = ICM_20948_set_bank(pdev, 0); // Set bank 0
 8004066:	2100      	movs	r1, #0
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f7fe fdb5 	bl	8002bd8 <ICM_20948_set_bank>
 800406e:	4603      	mov	r3, r0
 8004070:	77fb      	strb	r3, [r7, #31]
  if (result != ICM_20948_Stat_Ok)
 8004072:	7ffb      	ldrb	r3, [r7, #31]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <inv_icm20948_write_mems+0x38>
  {
    return result;
 8004078:	7ffb      	ldrb	r3, [r7, #31]
 800407a:	e054      	b.n	8004126 <inv_icm20948_write_mems+0xe2>
  }

  lBankSelected = (reg >> 8);
 800407c:	897b      	ldrh	r3, [r7, #10]
 800407e:	0a1b      	lsrs	r3, r3, #8
 8004080:	b29b      	uxth	r3, r3
 8004082:	b2db      	uxtb	r3, r3
 8004084:	74fb      	strb	r3, [r7, #19]

  if (lBankSelected != pdev->_last_mems_bank)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	79da      	ldrb	r2, [r3, #7]
 800408a:	7cfb      	ldrb	r3, [r7, #19]
 800408c:	429a      	cmp	r2, r3
 800408e:	d045      	beq.n	800411c <inv_icm20948_write_mems+0xd8>
  {
    pdev->_last_mems_bank = lBankSelected;
 8004090:	7cfa      	ldrb	r2, [r7, #19]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	71da      	strb	r2, [r3, #7]
    result = ICM_20948_execute_w(pdev, AGB0_REG_MEM_BANK_SEL, &lBankSelected, 1);
 8004096:	f107 0213 	add.w	r2, r7, #19
 800409a:	2301      	movs	r3, #1
 800409c:	217e      	movs	r1, #126	; 0x7e
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f7fe fc08 	bl	80028b4 <ICM_20948_execute_w>
 80040a4:	4603      	mov	r3, r0
 80040a6:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 80040a8:	7ffb      	ldrb	r3, [r7, #31]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d036      	beq.n	800411c <inv_icm20948_write_mems+0xd8>
    {
      return result;
 80040ae:	7ffb      	ldrb	r3, [r7, #31]
 80040b0:	e039      	b.n	8004126 <inv_icm20948_write_mems+0xe2>
    }
  }

  while (bytesWritten < length)
  {
    lStartAddrSelected = (reg & 0xff);
 80040b2:	897b      	ldrh	r3, [r7, #10]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	74bb      	strb	r3, [r7, #18]
    /* Sets the starting read or write address for the selected memory, inside of the selected page (see MEM_SEL Register).
           Contents are changed after read or write of the selected memory.
           This register must be written prior to each access to initialize the register to the proper starting address.
           The address will auto increment during burst transactions.  Two consecutive bursts without re-initializing the start address would skip one address. */

    result = ICM_20948_execute_w(pdev, AGB0_REG_MEM_START_ADDR, &lStartAddrSelected, 1);
 80040b8:	f107 0212 	add.w	r2, r7, #18
 80040bc:	2301      	movs	r3, #1
 80040be:	217c      	movs	r1, #124	; 0x7c
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f7fe fbf7 	bl	80028b4 <ICM_20948_execute_w>
 80040c6:	4603      	mov	r3, r0
 80040c8:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 80040ca:	7ffb      	ldrb	r3, [r7, #31]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <inv_icm20948_write_mems+0x90>
    {
      return result;
 80040d0:	7ffb      	ldrb	r3, [r7, #31]
 80040d2:	e028      	b.n	8004126 <inv_icm20948_write_mems+0xe2>
    }

    if (length - bytesWritten <= INV_MAX_SERIAL_WRITE)
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b10      	cmp	r3, #16
 80040dc:	d804      	bhi.n	80040e8 <inv_icm20948_write_mems+0xa4>
      thisLen = length - bytesWritten;
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	e001      	b.n	80040ec <inv_icm20948_write_mems+0xa8>
    else
      thisLen = INV_MAX_SERIAL_WRITE;
 80040e8:	2310      	movs	r3, #16
 80040ea:	617b      	str	r3, [r7, #20]

    /* Write data */

    result = ICM_20948_execute_w(pdev, AGB0_REG_MEM_R_W, (uint8_t *)&data[bytesWritten], thisLen);
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	441a      	add	r2, r3
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	217d      	movs	r1, #125	; 0x7d
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f7fe fbdc 	bl	80028b4 <ICM_20948_execute_w>
 80040fc:	4603      	mov	r3, r0
 80040fe:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 8004100:	7ffb      	ldrb	r3, [r7, #31]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <inv_icm20948_write_mems+0xc6>
    {
      return result;
 8004106:	7ffb      	ldrb	r3, [r7, #31]
 8004108:	e00d      	b.n	8004126 <inv_icm20948_write_mems+0xe2>
    }

    bytesWritten += thisLen;
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	4413      	add	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
    reg += thisLen;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	b29a      	uxth	r2, r3
 8004116:	897b      	ldrh	r3, [r7, #10]
 8004118:	4413      	add	r3, r2
 800411a:	817b      	strh	r3, [r7, #10]
  while (bytesWritten < length)
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	429a      	cmp	r2, r3
 8004122:	d3c6      	bcc.n	80040b2 <inv_icm20948_write_mems+0x6e>
  }

  return result;
 8004124:	7ffb      	ldrb	r3, [r7, #31]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3720      	adds	r7, #32
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <inv_icm20948_read_mems>:
*  @param[in]  number of byte to be read
*  @param[in]  input data from the register
*  @return     0 if successful.
*/
ICM_20948_Status_e inv_icm20948_read_mems(ICM_20948_Device_t *pdev, unsigned short reg, unsigned int length, unsigned char *data)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b088      	sub	sp, #32
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
 800413a:	460b      	mov	r3, r1
 800413c:	817b      	strh	r3, [r7, #10]
  ICM_20948_Status_e result = ICM_20948_Stat_Ok;
 800413e:	2300      	movs	r3, #0
 8004140:	77fb      	strb	r3, [r7, #31]
  unsigned int bytesRead = 0;
 8004142:	2300      	movs	r3, #0
 8004144:	61bb      	str	r3, [r7, #24]
  unsigned int thisLen;
  unsigned char lBankSelected;
  unsigned char lStartAddrSelected;

  if (!data)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <inv_icm20948_read_mems+0x22>
  {
    return ICM_20948_Stat_NoData;
 800414c:	2306      	movs	r3, #6
 800414e:	e05f      	b.n	8004210 <inv_icm20948_read_mems+0xe2>
  }

  result = ICM_20948_set_bank(pdev, 0); // Set bank 0
 8004150:	2100      	movs	r1, #0
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f7fe fd40 	bl	8002bd8 <ICM_20948_set_bank>
 8004158:	4603      	mov	r3, r0
 800415a:	77fb      	strb	r3, [r7, #31]
  if (result != ICM_20948_Stat_Ok)
 800415c:	7ffb      	ldrb	r3, [r7, #31]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <inv_icm20948_read_mems+0x38>
  {
    return result;
 8004162:	7ffb      	ldrb	r3, [r7, #31]
 8004164:	e054      	b.n	8004210 <inv_icm20948_read_mems+0xe2>
  }

  lBankSelected = (reg >> 8);
 8004166:	897b      	ldrh	r3, [r7, #10]
 8004168:	0a1b      	lsrs	r3, r3, #8
 800416a:	b29b      	uxth	r3, r3
 800416c:	b2db      	uxtb	r3, r3
 800416e:	74fb      	strb	r3, [r7, #19]

  if (lBankSelected != pdev->_last_mems_bank)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	79da      	ldrb	r2, [r3, #7]
 8004174:	7cfb      	ldrb	r3, [r7, #19]
 8004176:	429a      	cmp	r2, r3
 8004178:	d045      	beq.n	8004206 <inv_icm20948_read_mems+0xd8>
  {
    pdev->_last_mems_bank = lBankSelected;
 800417a:	7cfa      	ldrb	r2, [r7, #19]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	71da      	strb	r2, [r3, #7]
    result = ICM_20948_execute_w(pdev, AGB0_REG_MEM_BANK_SEL, &lBankSelected, 1);
 8004180:	f107 0213 	add.w	r2, r7, #19
 8004184:	2301      	movs	r3, #1
 8004186:	217e      	movs	r1, #126	; 0x7e
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f7fe fb93 	bl	80028b4 <ICM_20948_execute_w>
 800418e:	4603      	mov	r3, r0
 8004190:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 8004192:	7ffb      	ldrb	r3, [r7, #31]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d036      	beq.n	8004206 <inv_icm20948_read_mems+0xd8>
    {
      return result;
 8004198:	7ffb      	ldrb	r3, [r7, #31]
 800419a:	e039      	b.n	8004210 <inv_icm20948_read_mems+0xe2>
    }
  }

  while (bytesRead < length)
  {
    lStartAddrSelected = (reg & 0xff);
 800419c:	897b      	ldrh	r3, [r7, #10]
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	74bb      	strb	r3, [r7, #18]
    /* Sets the starting read or write address for the selected memory, inside of the selected page (see MEM_SEL Register).
		   Contents are changed after read or write of the selected memory.
		   This register must be written prior to each access to initialize the register to the proper starting address.
		   The address will auto increment during burst transactions.  Two consecutive bursts without re-initializing the start address would skip one address. */

    result = ICM_20948_execute_w(pdev, AGB0_REG_MEM_START_ADDR, &lStartAddrSelected, 1);
 80041a2:	f107 0212 	add.w	r2, r7, #18
 80041a6:	2301      	movs	r3, #1
 80041a8:	217c      	movs	r1, #124	; 0x7c
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f7fe fb82 	bl	80028b4 <ICM_20948_execute_w>
 80041b0:	4603      	mov	r3, r0
 80041b2:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 80041b4:	7ffb      	ldrb	r3, [r7, #31]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <inv_icm20948_read_mems+0x90>
    {
      return result;
 80041ba:	7ffb      	ldrb	r3, [r7, #31]
 80041bc:	e028      	b.n	8004210 <inv_icm20948_read_mems+0xe2>
    }

    if (length - bytesRead <= INV_MAX_SERIAL_READ)
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b10      	cmp	r3, #16
 80041c6:	d804      	bhi.n	80041d2 <inv_icm20948_read_mems+0xa4>
      thisLen = length - bytesRead;
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	e001      	b.n	80041d6 <inv_icm20948_read_mems+0xa8>
    else
      thisLen = INV_MAX_SERIAL_READ;
 80041d2:	2310      	movs	r3, #16
 80041d4:	617b      	str	r3, [r7, #20]

    /* Read data */

    result = ICM_20948_execute_r(pdev, AGB0_REG_MEM_R_W, &data[bytesRead], thisLen);
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	441a      	add	r2, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	217d      	movs	r1, #125	; 0x7d
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f7fe fb85 	bl	80028f0 <ICM_20948_execute_r>
 80041e6:	4603      	mov	r3, r0
 80041e8:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 80041ea:	7ffb      	ldrb	r3, [r7, #31]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <inv_icm20948_read_mems+0xc6>
    {
      return result;
 80041f0:	7ffb      	ldrb	r3, [r7, #31]
 80041f2:	e00d      	b.n	8004210 <inv_icm20948_read_mems+0xe2>
    }

    bytesRead += thisLen;
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	4413      	add	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
    reg += thisLen;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	b29a      	uxth	r2, r3
 8004200:	897b      	ldrh	r3, [r7, #10]
 8004202:	4413      	add	r3, r2
 8004204:	817b      	strh	r3, [r7, #10]
  while (bytesRead < length)
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	429a      	cmp	r2, r3
 800420c:	d3c6      	bcc.n	800419c <inv_icm20948_read_mems+0x6e>
  }

  return result;
 800420e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3720      	adds	r7, #32
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <inv_icm20948_set_dmp_sensor_period>:

ICM_20948_Status_e inv_icm20948_set_dmp_sensor_period(ICM_20948_Device_t *pdev, enum DMP_ODR_Registers odr_reg, uint16_t interval)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	70fb      	strb	r3, [r7, #3]
 8004224:	4613      	mov	r3, r2
 8004226:	803b      	strh	r3, [r7, #0]
  // E.g. For a 25Hz ODR rate, value= (225/25) -1 = 8.

  // During run-time, if an ODR is changed, the corresponding rate counter must be reset.
  // To reset, write 2-byte {0,0} to DMP using keys below for a particular sensor:

  ICM_20948_Status_e result = ICM_20948_Stat_Ok;
 8004228:	2300      	movs	r3, #0
 800422a:	73fb      	strb	r3, [r7, #15]
  ICM_20948_Status_e result2 = ICM_20948_Stat_Ok;
 800422c:	2300      	movs	r3, #0
 800422e:	73bb      	strb	r3, [r7, #14]

  if (pdev->_dmp_firmware_available == false)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	791b      	ldrb	r3, [r3, #4]
 8004234:	f083 0301 	eor.w	r3, r3, #1
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <inv_icm20948_set_dmp_sensor_period+0x2a>
    return ICM_20948_Stat_DMPNotSupported;
 800423e:	2308      	movs	r3, #8
 8004240:	e14c      	b.n	80044dc <inv_icm20948_set_dmp_sensor_period+0x2c4>

  unsigned char odr_reg_val[2];
  odr_reg_val[0] = (unsigned char)(interval >> 8);
 8004242:	883b      	ldrh	r3, [r7, #0]
 8004244:	0a1b      	lsrs	r3, r3, #8
 8004246:	b29b      	uxth	r3, r3
 8004248:	b2db      	uxtb	r3, r3
 800424a:	733b      	strb	r3, [r7, #12]
  odr_reg_val[1] = (unsigned char)(interval & 0xff);
 800424c:	883b      	ldrh	r3, [r7, #0]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	737b      	strb	r3, [r7, #13]

  unsigned char odr_count_zero[2] = {0x00, 0x00};
 8004252:	2300      	movs	r3, #0
 8004254:	813b      	strh	r3, [r7, #8]

  result = ICM_20948_sleep(pdev, false); // Make sure chip is awake
 8004256:	2100      	movs	r1, #0
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7fe fd13 	bl	8002c84 <ICM_20948_sleep>
 800425e:	4603      	mov	r3, r0
 8004260:	73fb      	strb	r3, [r7, #15]
  if (result != ICM_20948_Stat_Ok)
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <inv_icm20948_set_dmp_sensor_period+0x54>
  {
    return result;
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	e137      	b.n	80044dc <inv_icm20948_set_dmp_sensor_period+0x2c4>
  }

  result = ICM_20948_low_power(pdev, false); // Make sure chip is not in low power state
 800426c:	2100      	movs	r1, #0
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fe fd41 	bl	8002cf6 <ICM_20948_low_power>
 8004274:	4603      	mov	r3, r0
 8004276:	73fb      	strb	r3, [r7, #15]
  if (result != ICM_20948_Stat_Ok)
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <inv_icm20948_set_dmp_sensor_period+0x6a>
  {
    return result;
 800427e:	7bfb      	ldrb	r3, [r7, #15]
 8004280:	e12c      	b.n	80044dc <inv_icm20948_set_dmp_sensor_period+0x2c4>
  }

  switch (odr_reg)
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	3ba0      	subs	r3, #160	; 0xa0
 8004286:	2b1e      	cmp	r3, #30
 8004288:	f200 8113 	bhi.w	80044b2 <inv_icm20948_set_dmp_sensor_period+0x29a>
 800428c:	a201      	add	r2, pc, #4	; (adr r2, 8004294 <inv_icm20948_set_dmp_sensor_period+0x7c>)
 800428e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004292:	bf00      	nop
 8004294:	08004383 	.word	0x08004383
 8004298:	080044b3 	.word	0x080044b3
 800429c:	080044b3 	.word	0x080044b3
 80042a0:	080044b3 	.word	0x080044b3
 80042a4:	080043a9 	.word	0x080043a9
 80042a8:	080044b3 	.word	0x080044b3
 80042ac:	080044b3 	.word	0x080044b3
 80042b0:	080044b3 	.word	0x080044b3
 80042b4:	080043cf 	.word	0x080043cf
 80042b8:	080044b3 	.word	0x080044b3
 80042bc:	080044b3 	.word	0x080044b3
 80042c0:	080044b3 	.word	0x080044b3
 80042c4:	080043f5 	.word	0x080043f5
 80042c8:	080044b3 	.word	0x080044b3
 80042cc:	080044b3 	.word	0x080044b3
 80042d0:	080044b3 	.word	0x080044b3
 80042d4:	080044b3 	.word	0x080044b3
 80042d8:	080044b3 	.word	0x080044b3
 80042dc:	0800441b 	.word	0x0800441b
 80042e0:	080044b3 	.word	0x080044b3
 80042e4:	08004311 	.word	0x08004311
 80042e8:	080044b3 	.word	0x080044b3
 80042ec:	08004441 	.word	0x08004441
 80042f0:	080044b3 	.word	0x080044b3
 80042f4:	08004337 	.word	0x08004337
 80042f8:	080044b3 	.word	0x080044b3
 80042fc:	08004467 	.word	0x08004467
 8004300:	080044b3 	.word	0x080044b3
 8004304:	0800435d 	.word	0x0800435d
 8004308:	080044b3 	.word	0x080044b3
 800430c:	0800448d 	.word	0x0800448d
  {
  case DMP_ODR_Reg_Cpass_Calibr:
  {
    result = inv_icm20948_write_mems(pdev, ODR_CPASS_CALIBR, 2, (const unsigned char *)&odr_reg_val);
 8004310:	f107 030c 	add.w	r3, r7, #12
 8004314:	2202      	movs	r2, #2
 8004316:	21b4      	movs	r1, #180	; 0xb4
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff fe93 	bl	8004044 <inv_icm20948_write_mems>
 800431e:	4603      	mov	r3, r0
 8004320:	73fb      	strb	r3, [r7, #15]
    result2 = inv_icm20948_write_mems(pdev, ODR_CNTR_CPASS_CALIBR, 2, (const unsigned char *)&odr_count_zero);
 8004322:	f107 0308 	add.w	r3, r7, #8
 8004326:	2202      	movs	r2, #2
 8004328:	2194      	movs	r1, #148	; 0x94
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff fe8a 	bl	8004044 <inv_icm20948_write_mems>
 8004330:	4603      	mov	r3, r0
 8004332:	73bb      	strb	r3, [r7, #14]
  }
  break;
 8004334:	e0c0      	b.n	80044b8 <inv_icm20948_set_dmp_sensor_period+0x2a0>
  case DMP_ODR_Reg_Gyro_Calibr:
  {
    result = inv_icm20948_write_mems(pdev, ODR_GYRO_CALIBR, 2, (const unsigned char *)&odr_reg_val);
 8004336:	f107 030c 	add.w	r3, r7, #12
 800433a:	2202      	movs	r2, #2
 800433c:	21b8      	movs	r1, #184	; 0xb8
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff fe80 	bl	8004044 <inv_icm20948_write_mems>
 8004344:	4603      	mov	r3, r0
 8004346:	73fb      	strb	r3, [r7, #15]
    result2 = inv_icm20948_write_mems(pdev, ODR_CNTR_GYRO_CALIBR, 2, (const unsigned char *)&odr_count_zero);
 8004348:	f107 0308 	add.w	r3, r7, #8
 800434c:	2202      	movs	r2, #2
 800434e:	2198      	movs	r1, #152	; 0x98
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff fe77 	bl	8004044 <inv_icm20948_write_mems>
 8004356:	4603      	mov	r3, r0
 8004358:	73bb      	strb	r3, [r7, #14]
  }
  break;
 800435a:	e0ad      	b.n	80044b8 <inv_icm20948_set_dmp_sensor_period+0x2a0>
  case DMP_ODR_Reg_Pressure:
  {
    result = inv_icm20948_write_mems(pdev, ODR_PRESSURE, 2, (const unsigned char *)&odr_reg_val);
 800435c:	f107 030c 	add.w	r3, r7, #12
 8004360:	2202      	movs	r2, #2
 8004362:	21bc      	movs	r1, #188	; 0xbc
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7ff fe6d 	bl	8004044 <inv_icm20948_write_mems>
 800436a:	4603      	mov	r3, r0
 800436c:	73fb      	strb	r3, [r7, #15]
    result2 = inv_icm20948_write_mems(pdev, ODR_CNTR_PRESSURE, 2, (const unsigned char *)&odr_count_zero);
 800436e:	f107 0308 	add.w	r3, r7, #8
 8004372:	2202      	movs	r2, #2
 8004374:	219c      	movs	r1, #156	; 0x9c
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff fe64 	bl	8004044 <inv_icm20948_write_mems>
 800437c:	4603      	mov	r3, r0
 800437e:	73bb      	strb	r3, [r7, #14]
  }
  break;
 8004380:	e09a      	b.n	80044b8 <inv_icm20948_set_dmp_sensor_period+0x2a0>
  case DMP_ODR_Reg_Geomag:
  {
    result = inv_icm20948_write_mems(pdev, ODR_GEOMAG, 2, (const unsigned char *)&odr_reg_val);
 8004382:	f107 030c 	add.w	r3, r7, #12
 8004386:	2202      	movs	r2, #2
 8004388:	21a0      	movs	r1, #160	; 0xa0
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff fe5a 	bl	8004044 <inv_icm20948_write_mems>
 8004390:	4603      	mov	r3, r0
 8004392:	73fb      	strb	r3, [r7, #15]
    result2 = inv_icm20948_write_mems(pdev, ODR_CNTR_GEOMAG, 2, (const unsigned char *)&odr_count_zero);
 8004394:	f107 0308 	add.w	r3, r7, #8
 8004398:	2202      	movs	r2, #2
 800439a:	2180      	movs	r1, #128	; 0x80
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff fe51 	bl	8004044 <inv_icm20948_write_mems>
 80043a2:	4603      	mov	r3, r0
 80043a4:	73bb      	strb	r3, [r7, #14]
  }
  break;
 80043a6:	e087      	b.n	80044b8 <inv_icm20948_set_dmp_sensor_period+0x2a0>
  case DMP_ODR_Reg_PQuat6:
  {
    result = inv_icm20948_write_mems(pdev, ODR_PQUAT6, 2, (const unsigned char *)&odr_reg_val);
 80043a8:	f107 030c 	add.w	r3, r7, #12
 80043ac:	2202      	movs	r2, #2
 80043ae:	21a4      	movs	r1, #164	; 0xa4
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff fe47 	bl	8004044 <inv_icm20948_write_mems>
 80043b6:	4603      	mov	r3, r0
 80043b8:	73fb      	strb	r3, [r7, #15]
    result2 = inv_icm20948_write_mems(pdev, ODR_CNTR_PQUAT6, 2, (const unsigned char *)&odr_count_zero);
 80043ba:	f107 0308 	add.w	r3, r7, #8
 80043be:	2202      	movs	r2, #2
 80043c0:	2184      	movs	r1, #132	; 0x84
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff fe3e 	bl	8004044 <inv_icm20948_write_mems>
 80043c8:	4603      	mov	r3, r0
 80043ca:	73bb      	strb	r3, [r7, #14]
  }
  break;
 80043cc:	e074      	b.n	80044b8 <inv_icm20948_set_dmp_sensor_period+0x2a0>
  case DMP_ODR_Reg_Quat9:
  {
    result = inv_icm20948_write_mems(pdev, ODR_QUAT9, 2, (const unsigned char *)&odr_reg_val);
 80043ce:	f107 030c 	add.w	r3, r7, #12
 80043d2:	2202      	movs	r2, #2
 80043d4:	21a8      	movs	r1, #168	; 0xa8
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff fe34 	bl	8004044 <inv_icm20948_write_mems>
 80043dc:	4603      	mov	r3, r0
 80043de:	73fb      	strb	r3, [r7, #15]
    result2 = inv_icm20948_write_mems(pdev, ODR_CNTR_QUAT9, 2, (const unsigned char *)&odr_count_zero);
 80043e0:	f107 0308 	add.w	r3, r7, #8
 80043e4:	2202      	movs	r2, #2
 80043e6:	2188      	movs	r1, #136	; 0x88
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff fe2b 	bl	8004044 <inv_icm20948_write_mems>
 80043ee:	4603      	mov	r3, r0
 80043f0:	73bb      	strb	r3, [r7, #14]
  }
  break;
 80043f2:	e061      	b.n	80044b8 <inv_icm20948_set_dmp_sensor_period+0x2a0>
  case DMP_ODR_Reg_Quat6:
  {
    result = inv_icm20948_write_mems(pdev, ODR_QUAT6, 2, (const unsigned char *)&odr_reg_val);
 80043f4:	f107 030c 	add.w	r3, r7, #12
 80043f8:	2202      	movs	r2, #2
 80043fa:	21ac      	movs	r1, #172	; 0xac
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff fe21 	bl	8004044 <inv_icm20948_write_mems>
 8004402:	4603      	mov	r3, r0
 8004404:	73fb      	strb	r3, [r7, #15]
    result2 = inv_icm20948_write_mems(pdev, ODR_CNTR_QUAT6, 2, (const unsigned char *)&odr_count_zero);
 8004406:	f107 0308 	add.w	r3, r7, #8
 800440a:	2202      	movs	r2, #2
 800440c:	218c      	movs	r1, #140	; 0x8c
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff fe18 	bl	8004044 <inv_icm20948_write_mems>
 8004414:	4603      	mov	r3, r0
 8004416:	73bb      	strb	r3, [r7, #14]
  }
  break;
 8004418:	e04e      	b.n	80044b8 <inv_icm20948_set_dmp_sensor_period+0x2a0>
  case DMP_ODR_Reg_ALS:
  {
    result = inv_icm20948_write_mems(pdev, ODR_ALS, 2, (const unsigned char *)&odr_reg_val);
 800441a:	f107 030c 	add.w	r3, r7, #12
 800441e:	2202      	movs	r2, #2
 8004420:	21b2      	movs	r1, #178	; 0xb2
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7ff fe0e 	bl	8004044 <inv_icm20948_write_mems>
 8004428:	4603      	mov	r3, r0
 800442a:	73fb      	strb	r3, [r7, #15]
    result2 = inv_icm20948_write_mems(pdev, ODR_CNTR_ALS, 2, (const unsigned char *)&odr_count_zero);
 800442c:	f107 0308 	add.w	r3, r7, #8
 8004430:	2202      	movs	r2, #2
 8004432:	2192      	movs	r1, #146	; 0x92
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff fe05 	bl	8004044 <inv_icm20948_write_mems>
 800443a:	4603      	mov	r3, r0
 800443c:	73bb      	strb	r3, [r7, #14]
  }
  break;
 800443e:	e03b      	b.n	80044b8 <inv_icm20948_set_dmp_sensor_period+0x2a0>
  case DMP_ODR_Reg_Cpass:
  {
    result = inv_icm20948_write_mems(pdev, ODR_CPASS, 2, (const unsigned char *)&odr_reg_val);
 8004440:	f107 030c 	add.w	r3, r7, #12
 8004444:	2202      	movs	r2, #2
 8004446:	21b6      	movs	r1, #182	; 0xb6
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7ff fdfb 	bl	8004044 <inv_icm20948_write_mems>
 800444e:	4603      	mov	r3, r0
 8004450:	73fb      	strb	r3, [r7, #15]
    result2 = inv_icm20948_write_mems(pdev, ODR_CNTR_CPASS, 2, (const unsigned char *)&odr_count_zero);
 8004452:	f107 0308 	add.w	r3, r7, #8
 8004456:	2202      	movs	r2, #2
 8004458:	2196      	movs	r1, #150	; 0x96
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7ff fdf2 	bl	8004044 <inv_icm20948_write_mems>
 8004460:	4603      	mov	r3, r0
 8004462:	73bb      	strb	r3, [r7, #14]
  }
  break;
 8004464:	e028      	b.n	80044b8 <inv_icm20948_set_dmp_sensor_period+0x2a0>
  case DMP_ODR_Reg_Gyro:
  {
    result = inv_icm20948_write_mems(pdev, ODR_GYRO, 2, (const unsigned char *)&odr_reg_val);
 8004466:	f107 030c 	add.w	r3, r7, #12
 800446a:	2202      	movs	r2, #2
 800446c:	21ba      	movs	r1, #186	; 0xba
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff fde8 	bl	8004044 <inv_icm20948_write_mems>
 8004474:	4603      	mov	r3, r0
 8004476:	73fb      	strb	r3, [r7, #15]
    result2 = inv_icm20948_write_mems(pdev, ODR_CNTR_GYRO, 2, (const unsigned char *)&odr_count_zero);
 8004478:	f107 0308 	add.w	r3, r7, #8
 800447c:	2202      	movs	r2, #2
 800447e:	219a      	movs	r1, #154	; 0x9a
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff fddf 	bl	8004044 <inv_icm20948_write_mems>
 8004486:	4603      	mov	r3, r0
 8004488:	73bb      	strb	r3, [r7, #14]
  }
  break;
 800448a:	e015      	b.n	80044b8 <inv_icm20948_set_dmp_sensor_period+0x2a0>
  case DMP_ODR_Reg_Accel:
  {
    result = inv_icm20948_write_mems(pdev, ODR_ACCEL, 2, (const unsigned char *)&odr_reg_val);
 800448c:	f107 030c 	add.w	r3, r7, #12
 8004490:	2202      	movs	r2, #2
 8004492:	21be      	movs	r1, #190	; 0xbe
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff fdd5 	bl	8004044 <inv_icm20948_write_mems>
 800449a:	4603      	mov	r3, r0
 800449c:	73fb      	strb	r3, [r7, #15]
    result2 = inv_icm20948_write_mems(pdev, ODR_CNTR_ACCEL, 2, (const unsigned char *)&odr_count_zero);
 800449e:	f107 0308 	add.w	r3, r7, #8
 80044a2:	2202      	movs	r2, #2
 80044a4:	219e      	movs	r1, #158	; 0x9e
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7ff fdcc 	bl	8004044 <inv_icm20948_write_mems>
 80044ac:	4603      	mov	r3, r0
 80044ae:	73bb      	strb	r3, [r7, #14]
  }
  break;
 80044b0:	e002      	b.n	80044b8 <inv_icm20948_set_dmp_sensor_period+0x2a0>
  default:
    result = ICM_20948_Stat_InvalDMPRegister;
 80044b2:	230f      	movs	r3, #15
 80044b4:	73fb      	strb	r3, [r7, #15]
    break;
 80044b6:	bf00      	nop
  }

  result = ICM_20948_low_power(pdev, true); // Put chip into low power state
 80044b8:	2101      	movs	r1, #1
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fe fc1b 	bl	8002cf6 <ICM_20948_low_power>
 80044c0:	4603      	mov	r3, r0
 80044c2:	73fb      	strb	r3, [r7, #15]
  if (result != ICM_20948_Stat_Ok)
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <inv_icm20948_set_dmp_sensor_period+0x2b6>
    return result;
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	e006      	b.n	80044dc <inv_icm20948_set_dmp_sensor_period+0x2c4>

  if (result2 > result)
 80044ce:	7bba      	ldrb	r2, [r7, #14]
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d901      	bls.n	80044da <inv_icm20948_set_dmp_sensor_period+0x2c2>
    result = result2; // Return the highest error
 80044d6:	7bbb      	ldrb	r3, [r7, #14]
 80044d8:	73fb      	strb	r3, [r7, #15]

  return result;
 80044da:	7bfb      	ldrb	r3, [r7, #15]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <inv_icm20948_enable_dmp_sensor>:

ICM_20948_Status_e inv_icm20948_enable_dmp_sensor(ICM_20948_Device_t *pdev, enum inv_icm20948_sensor sensor, int state)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	; 0x28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	460b      	mov	r3, r1
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	72fb      	strb	r3, [r7, #11]
  ICM_20948_Status_e result = ICM_20948_Stat_Ok;
 80044f2:	2300      	movs	r3, #0
 80044f4:	767b      	strb	r3, [r7, #25]

  uint16_t inv_event_control = 0; // Use this to store the value for MOTION_EVENT_CTL
 80044f6:	2300      	movs	r3, #0
 80044f8:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t data_rdy_status = 0;   // Use this to store the value for DATA_RDY_STATUS
 80044fa:	2300      	movs	r3, #0
 80044fc:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (pdev->_dmp_firmware_available == false)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	791b      	ldrb	r3, [r3, #4]
 8004502:	f083 0301 	eor.w	r3, r3, #1
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <inv_icm20948_enable_dmp_sensor+0x2c>
    return ICM_20948_Stat_DMPNotSupported; // Bail if DMP is not supported
 800450c:	2308      	movs	r3, #8
 800450e:	e192      	b.n	8004836 <inv_icm20948_enable_dmp_sensor+0x352>

  uint8_t androidSensor = sensor_type_2_android_sensor(sensor); // Convert sensor from enum inv_icm20948_sensor to Android numbering
 8004510:	7afb      	ldrb	r3, [r7, #11]
 8004512:	4618      	mov	r0, r3
 8004514:	f000 ff70 	bl	80053f8 <sensor_type_2_android_sensor>
 8004518:	4603      	mov	r3, r0
 800451a:	763b      	strb	r3, [r7, #24]

  if (androidSensor >= ANDROID_SENSOR_NUM_MAX)
 800451c:	7e3b      	ldrb	r3, [r7, #24]
 800451e:	2b2b      	cmp	r3, #43	; 0x2b
 8004520:	d901      	bls.n	8004526 <inv_icm20948_enable_dmp_sensor+0x42>
    return ICM_20948_Stat_SensorNotSupported; // Bail if the sensor is not supported (TO DO: Support B2S etc)
 8004522:	2307      	movs	r3, #7
 8004524:	e187      	b.n	8004836 <inv_icm20948_enable_dmp_sensor+0x352>

  // Convert the Android sensor into a bit mask for DATA_OUT_CTL1
  uint16_t delta = inv_androidSensor_to_control_bits[androidSensor];
 8004526:	7e3b      	ldrb	r3, [r7, #24]
 8004528:	4a97      	ldr	r2, [pc, #604]	; (8004788 <inv_icm20948_enable_dmp_sensor+0x2a4>)
 800452a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800452e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (delta == 0xFFFF)
 8004530:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004532:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004536:	4293      	cmp	r3, r2
 8004538:	d101      	bne.n	800453e <inv_icm20948_enable_dmp_sensor+0x5a>
    return ICM_20948_Stat_SensorNotSupported; // Bail if the sensor is not supported
 800453a:	2307      	movs	r3, #7
 800453c:	e17b      	b.n	8004836 <inv_icm20948_enable_dmp_sensor+0x352>

  // Convert the Android sensor number into a bitmask and set or clear that bit in _enabled_Android_0 / _enabled_Android_1
  unsigned long androidSensorAsBitMask;
  if (androidSensor < 32) // Sensors 0-31
 800453e:	7e3b      	ldrb	r3, [r7, #24]
 8004540:	2b1f      	cmp	r3, #31
 8004542:	d816      	bhi.n	8004572 <inv_icm20948_enable_dmp_sensor+0x8e>
  {
    androidSensorAsBitMask = 1L << androidSensor;
 8004544:	7e3b      	ldrb	r3, [r7, #24]
 8004546:	2201      	movs	r2, #1
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	617b      	str	r3, [r7, #20]
    if (state == 0) // Should we disable the sensor?
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d107      	bne.n	8004564 <inv_icm20948_enable_dmp_sensor+0x80>
    {
      pdev->_enabled_Android_0 &= ~androidSensorAsBitMask; // Clear the bit to disable the sensor
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	43db      	mvns	r3, r3
 800455c:	401a      	ands	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	611a      	str	r2, [r3, #16]
 8004562:	e01d      	b.n	80045a0 <inv_icm20948_enable_dmp_sensor+0xbc>
    }
    else
    {
      pdev->_enabled_Android_0 |= androidSensorAsBitMask; // Set the bit to enable the sensor
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	431a      	orrs	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	611a      	str	r2, [r3, #16]
 8004570:	e016      	b.n	80045a0 <inv_icm20948_enable_dmp_sensor+0xbc>
    }
  }
  else // Sensors 32-
  {
    androidSensorAsBitMask = 1L << (androidSensor - 32);
 8004572:	7e3b      	ldrb	r3, [r7, #24]
 8004574:	3b20      	subs	r3, #32
 8004576:	2201      	movs	r2, #1
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	617b      	str	r3, [r7, #20]
    if (state == 0) // Should we disable the sensor?
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d107      	bne.n	8004594 <inv_icm20948_enable_dmp_sensor+0xb0>
    {
      pdev->_enabled_Android_1 &= ~androidSensorAsBitMask; // Clear the bit to disable the sensor
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	695a      	ldr	r2, [r3, #20]
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	43db      	mvns	r3, r3
 800458c:	401a      	ands	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	615a      	str	r2, [r3, #20]
 8004592:	e005      	b.n	80045a0 <inv_icm20948_enable_dmp_sensor+0xbc>
    }
    else
    {
      pdev->_enabled_Android_1 |= androidSensorAsBitMask; // Set the bit to enable the sensor
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	695a      	ldr	r2, [r3, #20]
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	431a      	orrs	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	615a      	str	r2, [r3, #20]
    }
  }

  // Now we know androidSensor is valid, reconstruct the value for DATA_OUT_CTL1 from _enabled_Android_0 and _enabled_Android_0
  delta = 0; // Clear delta
 80045a0:	2300      	movs	r3, #0
 80045a2:	847b      	strh	r3, [r7, #34]	; 0x22
  for (int i = 0; i < 32; i++)
 80045a4:	2300      	movs	r3, #0
 80045a6:	61fb      	str	r3, [r7, #28]
 80045a8:	e059      	b.n	800465e <inv_icm20948_enable_dmp_sensor+0x17a>
  {
    androidSensorAsBitMask = 1L << i;
 80045aa:	2201      	movs	r2, #1
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	617b      	str	r3, [r7, #20]
    if ((pdev->_enabled_Android_0 & androidSensorAsBitMask) > 0) // Check if the Android sensor (0-31) is enabled
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d006      	beq.n	80045ce <inv_icm20948_enable_dmp_sensor+0xea>
    {
      delta |= inv_androidSensor_to_control_bits[i]; // If it is, or the required bits into delta
 80045c0:	4a71      	ldr	r2, [pc, #452]	; (8004788 <inv_icm20948_enable_dmp_sensor+0x2a4>)
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80045c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045ca:	4313      	orrs	r3, r2
 80045cc:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if ((pdev->_enabled_Android_1 & androidSensorAsBitMask) > 0) // Check if the Android sensor (32-) is enabled
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	695a      	ldr	r2, [r3, #20]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	4013      	ands	r3, r2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <inv_icm20948_enable_dmp_sensor+0x106>
    {
      delta |= inv_androidSensor_to_control_bits[i + 32]; // If it is, or the required bits into delta
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	3320      	adds	r3, #32
 80045de:	4a6a      	ldr	r2, [pc, #424]	; (8004788 <inv_icm20948_enable_dmp_sensor+0x2a4>)
 80045e0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80045e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045e6:	4313      	orrs	r3, r2
 80045e8:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    // Also check which bits need to be set in the Data Ready Status and Motion Event Control registers
    // Compare to INV_NEEDS_ACCEL_MASK, INV_NEEDS_GYRO_MASK and INV_NEEDS_COMPASS_MASK
    if (((androidSensorAsBitMask & INV_NEEDS_ACCEL_MASK) > 0) || ((androidSensorAsBitMask & INV_NEEDS_ACCEL_MASK1) > 0))
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4b67      	ldr	r3, [pc, #412]	; (800478c <inv_icm20948_enable_dmp_sensor+0x2a8>)
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d104      	bne.n	80045fe <inv_icm20948_enable_dmp_sensor+0x11a>
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f403 63dd 	and.w	r3, r3, #1768	; 0x6e8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d007      	beq.n	800460e <inv_icm20948_enable_dmp_sensor+0x12a>
    {
      data_rdy_status |= DMP_Data_ready_Accel;
 80045fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004600:	f043 0302 	orr.w	r3, r3, #2
 8004604:	84bb      	strh	r3, [r7, #36]	; 0x24
      inv_event_control |= DMP_Motion_Event_Control_Accel_Calibr;
 8004606:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004608:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800460c:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    if (((androidSensorAsBitMask & INV_NEEDS_GYRO_MASK) > 0) || ((androidSensorAsBitMask & INV_NEEDS_GYRO_MASK1) > 0))
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4b5f      	ldr	r3, [pc, #380]	; (8004790 <inv_icm20948_enable_dmp_sensor+0x2ac>)
 8004612:	4013      	ands	r3, r2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d105      	bne.n	8004624 <inv_icm20948_enable_dmp_sensor+0x140>
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	f640 0318 	movw	r3, #2072	; 0x818
 800461e:	4013      	ands	r3, r2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d007      	beq.n	8004634 <inv_icm20948_enable_dmp_sensor+0x150>
    {
      data_rdy_status |= DMP_Data_ready_Gyro;
 8004624:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	84bb      	strh	r3, [r7, #36]	; 0x24
      inv_event_control |= DMP_Motion_Event_Control_Gyro_Calibr;
 800462c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800462e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004632:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    if (((androidSensorAsBitMask & INV_NEEDS_COMPASS_MASK) > 0) || ((androidSensorAsBitMask & INV_NEEDS_COMPASS_MASK1) > 0))
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	4b57      	ldr	r3, [pc, #348]	; (8004794 <inv_icm20948_enable_dmp_sensor+0x2b0>)
 8004638:	4013      	ands	r3, r2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d104      	bne.n	8004648 <inv_icm20948_enable_dmp_sensor+0x164>
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f003 0384 	and.w	r3, r3, #132	; 0x84
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <inv_icm20948_enable_dmp_sensor+0x174>
    {
      data_rdy_status |= DMP_Data_ready_Secondary_Compass;
 8004648:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800464a:	f043 0308 	orr.w	r3, r3, #8
 800464e:	84bb      	strh	r3, [r7, #36]	; 0x24
      inv_event_control |= DMP_Motion_Event_Control_Compass_Calibr;
 8004650:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004656:	84fb      	strh	r3, [r7, #38]	; 0x26
  for (int i = 0; i < 32; i++)
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	3301      	adds	r3, #1
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	2b1f      	cmp	r3, #31
 8004662:	dda2      	ble.n	80045aa <inv_icm20948_enable_dmp_sensor+0xc6>
    }
  }

  result = ICM_20948_sleep(pdev, false); // Make sure chip is awake
 8004664:	2100      	movs	r1, #0
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f7fe fb0c 	bl	8002c84 <ICM_20948_sleep>
 800466c:	4603      	mov	r3, r0
 800466e:	767b      	strb	r3, [r7, #25]
  if (result != ICM_20948_Stat_Ok)
 8004670:	7e7b      	ldrb	r3, [r7, #25]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <inv_icm20948_enable_dmp_sensor+0x196>
  {
    return result;
 8004676:	7e7b      	ldrb	r3, [r7, #25]
 8004678:	e0dd      	b.n	8004836 <inv_icm20948_enable_dmp_sensor+0x352>
  }

  result = ICM_20948_low_power(pdev, false); // Make sure chip is not in low power state
 800467a:	2100      	movs	r1, #0
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f7fe fb3a 	bl	8002cf6 <ICM_20948_low_power>
 8004682:	4603      	mov	r3, r0
 8004684:	767b      	strb	r3, [r7, #25]
  if (result != ICM_20948_Stat_Ok)
 8004686:	7e7b      	ldrb	r3, [r7, #25]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <inv_icm20948_enable_dmp_sensor+0x1ac>
  {
    return result;
 800468c:	7e7b      	ldrb	r3, [r7, #25]
 800468e:	e0d2      	b.n	8004836 <inv_icm20948_enable_dmp_sensor+0x352>
  }

  // Check if Accel, Gyro/Gyro_Calibr or Compass_Calibr/Quat9/GeoMag/Compass are to be enabled. If they are then we need to request the accuracy data via header2.
  uint16_t delta2 = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	837b      	strh	r3, [r7, #26]
  if ((delta & DMP_Data_Output_Control_1_Accel) > 0)
 8004694:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004696:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800469a:	2b00      	cmp	r3, #0
 800469c:	dd03      	ble.n	80046a6 <inv_icm20948_enable_dmp_sensor+0x1c2>
  {
    delta2 |= DMP_Data_Output_Control_2_Accel_Accuracy;
 800469e:	8b7b      	ldrh	r3, [r7, #26]
 80046a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046a4:	837b      	strh	r3, [r7, #26]
  }
  if (((delta & DMP_Data_Output_Control_1_Gyro_Calibr) > 0) || ((delta & DMP_Data_Output_Control_1_Gyro) > 0))
 80046a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80046a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	dc04      	bgt.n	80046ba <inv_icm20948_enable_dmp_sensor+0x1d6>
 80046b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80046b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	dd03      	ble.n	80046c2 <inv_icm20948_enable_dmp_sensor+0x1de>
  {
    delta2 |= DMP_Data_Output_Control_2_Gyro_Accuracy;
 80046ba:	8b7b      	ldrh	r3, [r7, #26]
 80046bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80046c0:	837b      	strh	r3, [r7, #26]
  }
  if (((delta & DMP_Data_Output_Control_1_Compass_Calibr) > 0) || ((delta & DMP_Data_Output_Control_1_Compass) > 0) || ((delta & DMP_Data_Output_Control_1_Quat9) > 0) || ((delta & DMP_Data_Output_Control_1_Geomag) > 0))
 80046c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	dc0e      	bgt.n	80046ea <inv_icm20948_enable_dmp_sensor+0x206>
 80046cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80046ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	dc09      	bgt.n	80046ea <inv_icm20948_enable_dmp_sensor+0x206>
 80046d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80046d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046dc:	2b00      	cmp	r3, #0
 80046de:	dc04      	bgt.n	80046ea <inv_icm20948_enable_dmp_sensor+0x206>
 80046e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80046e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	dd03      	ble.n	80046f2 <inv_icm20948_enable_dmp_sensor+0x20e>
  {
    delta2 |= DMP_Data_Output_Control_2_Compass_Accuracy;
 80046ea:	8b7b      	ldrh	r3, [r7, #26]
 80046ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046f0:	837b      	strh	r3, [r7, #26]
  }
  // TO DO: Add DMP_Data_Output_Control_2_Pickup etc. if required

  // Write the sensor control bits into memory address DATA_OUT_CTL1
  unsigned char data_output_control_reg[2];
  data_output_control_reg[0] = (unsigned char)(delta >> 8);
 80046f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80046f4:	0a1b      	lsrs	r3, r3, #8
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	743b      	strb	r3, [r7, #16]
  data_output_control_reg[1] = (unsigned char)(delta & 0xff);
 80046fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	747b      	strb	r3, [r7, #17]
  pdev->_dataOutCtl1 = delta; // Diagnostics
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004706:	841a      	strh	r2, [r3, #32]
  result = inv_icm20948_write_mems(pdev, DATA_OUT_CTL1, 2, (const unsigned char *)&data_output_control_reg);
 8004708:	f107 0310 	add.w	r3, r7, #16
 800470c:	2202      	movs	r2, #2
 800470e:	2140      	movs	r1, #64	; 0x40
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f7ff fc97 	bl	8004044 <inv_icm20948_write_mems>
 8004716:	4603      	mov	r3, r0
 8004718:	767b      	strb	r3, [r7, #25]
  if (result != ICM_20948_Stat_Ok)
 800471a:	7e7b      	ldrb	r3, [r7, #25]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <inv_icm20948_enable_dmp_sensor+0x240>
  {
    return result;
 8004720:	7e7b      	ldrb	r3, [r7, #25]
 8004722:	e088      	b.n	8004836 <inv_icm20948_enable_dmp_sensor+0x352>
  }

  // Write the 'header2' sensor control bits into memory address DATA_OUT_CTL2
  data_output_control_reg[0] = (unsigned char)(delta2 >> 8);
 8004724:	8b7b      	ldrh	r3, [r7, #26]
 8004726:	0a1b      	lsrs	r3, r3, #8
 8004728:	b29b      	uxth	r3, r3
 800472a:	b2db      	uxtb	r3, r3
 800472c:	743b      	strb	r3, [r7, #16]
  data_output_control_reg[1] = (unsigned char)(delta2 & 0xff);
 800472e:	8b7b      	ldrh	r3, [r7, #26]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	747b      	strb	r3, [r7, #17]
  pdev->_dataOutCtl2 = delta2; // Diagnostics
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8b7a      	ldrh	r2, [r7, #26]
 8004738:	845a      	strh	r2, [r3, #34]	; 0x22
  result = inv_icm20948_write_mems(pdev, DATA_OUT_CTL2, 2, (const unsigned char *)&data_output_control_reg);
 800473a:	f107 0310 	add.w	r3, r7, #16
 800473e:	2202      	movs	r2, #2
 8004740:	2142      	movs	r1, #66	; 0x42
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f7ff fc7e 	bl	8004044 <inv_icm20948_write_mems>
 8004748:	4603      	mov	r3, r0
 800474a:	767b      	strb	r3, [r7, #25]
  if (result != ICM_20948_Stat_Ok)
 800474c:	7e7b      	ldrb	r3, [r7, #25]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <inv_icm20948_enable_dmp_sensor+0x272>
  {
    return result;
 8004752:	7e7b      	ldrb	r3, [r7, #25]
 8004754:	e06f      	b.n	8004836 <inv_icm20948_enable_dmp_sensor+0x352>
  }

  // Set the DATA_RDY_STATUS register
  data_output_control_reg[0] = (unsigned char)(data_rdy_status >> 8);
 8004756:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004758:	0a1b      	lsrs	r3, r3, #8
 800475a:	b29b      	uxth	r3, r3
 800475c:	b2db      	uxtb	r3, r3
 800475e:	743b      	strb	r3, [r7, #16]
  data_output_control_reg[1] = (unsigned char)(data_rdy_status & 0xff);
 8004760:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004762:	b2db      	uxtb	r3, r3
 8004764:	747b      	strb	r3, [r7, #17]
  pdev->_dataRdyStatus = data_rdy_status; // Diagnostics
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800476a:	849a      	strh	r2, [r3, #36]	; 0x24
  result = inv_icm20948_write_mems(pdev, DATA_RDY_STATUS, 2, (const unsigned char *)&data_output_control_reg);
 800476c:	f107 0310 	add.w	r3, r7, #16
 8004770:	2202      	movs	r2, #2
 8004772:	218a      	movs	r1, #138	; 0x8a
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f7ff fc65 	bl	8004044 <inv_icm20948_write_mems>
 800477a:	4603      	mov	r3, r0
 800477c:	767b      	strb	r3, [r7, #25]
  if (result != ICM_20948_Stat_Ok)
 800477e:	7e7b      	ldrb	r3, [r7, #25]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d009      	beq.n	8004798 <inv_icm20948_enable_dmp_sensor+0x2b4>
  {
    return result;
 8004784:	7e7b      	ldrb	r3, [r7, #25]
 8004786:	e056      	b.n	8004836 <inv_icm20948_enable_dmp_sensor+0x352>
 8004788:	0800c8c8 	.word	0x0800c8c8
 800478c:	e29e8e0a 	.word	0xe29e8e0a
 8004790:	e6018e18 	.word	0xe6018e18
 8004794:	8310480c 	.word	0x8310480c
  }

  // Check which extra bits need to be set in the Motion Event Control register
  if ((delta & DMP_Data_Output_Control_1_Quat9) > 0)
 8004798:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800479a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479e:	2b00      	cmp	r3, #0
 80047a0:	dd03      	ble.n	80047aa <inv_icm20948_enable_dmp_sensor+0x2c6>
  {
    inv_event_control |= DMP_Motion_Event_Control_9axis;
 80047a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047a8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (((delta & DMP_Data_Output_Control_1_Step_Detector) > 0) || ((delta & DMP_Data_Output_Control_1_Step_Ind_0) > 0) || ((delta & DMP_Data_Output_Control_1_Step_Ind_1) > 0) || ((delta & DMP_Data_Output_Control_1_Step_Ind_2) > 0))
 80047aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047ac:	f003 0310 	and.w	r3, r3, #16
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	dc0e      	bgt.n	80047d2 <inv_icm20948_enable_dmp_sensor+0x2ee>
 80047b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	dc09      	bgt.n	80047d2 <inv_icm20948_enable_dmp_sensor+0x2ee>
 80047be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	dc04      	bgt.n	80047d2 <inv_icm20948_enable_dmp_sensor+0x2ee>
 80047c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	dd03      	ble.n	80047da <inv_icm20948_enable_dmp_sensor+0x2f6>
  {
    inv_event_control |= DMP_Motion_Event_Control_Pedometer_Interrupt;
 80047d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047d8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if ((delta & DMP_Data_Output_Control_1_Geomag) > 0)
 80047da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	dd03      	ble.n	80047ec <inv_icm20948_enable_dmp_sensor+0x308>
  {
    inv_event_control |= DMP_Motion_Event_Control_Geomag;
 80047e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047e6:	f043 0308 	orr.w	r3, r3, #8
 80047ea:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  // Set the MOTION_EVENT_CTL register
  data_output_control_reg[0] = (unsigned char)(inv_event_control >> 8);
 80047ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047ee:	0a1b      	lsrs	r3, r3, #8
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	743b      	strb	r3, [r7, #16]
  data_output_control_reg[1] = (unsigned char)(inv_event_control & 0xff);
 80047f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	747b      	strb	r3, [r7, #17]
  pdev->_motionEventCtl = inv_event_control; // Diagnostics
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004800:	84da      	strh	r2, [r3, #38]	; 0x26
  result = inv_icm20948_write_mems(pdev, MOTION_EVENT_CTL, 2, (const unsigned char *)&data_output_control_reg);
 8004802:	f107 0310 	add.w	r3, r7, #16
 8004806:	2202      	movs	r2, #2
 8004808:	214e      	movs	r1, #78	; 0x4e
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7ff fc1a 	bl	8004044 <inv_icm20948_write_mems>
 8004810:	4603      	mov	r3, r0
 8004812:	767b      	strb	r3, [r7, #25]
  if (result != ICM_20948_Stat_Ok)
 8004814:	7e7b      	ldrb	r3, [r7, #25]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <inv_icm20948_enable_dmp_sensor+0x33a>
  {
    return result;
 800481a:	7e7b      	ldrb	r3, [r7, #25]
 800481c:	e00b      	b.n	8004836 <inv_icm20948_enable_dmp_sensor+0x352>
  }

  result = ICM_20948_low_power(pdev, true); // Put chip into low power state
 800481e:	2101      	movs	r1, #1
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f7fe fa68 	bl	8002cf6 <ICM_20948_low_power>
 8004826:	4603      	mov	r3, r0
 8004828:	767b      	strb	r3, [r7, #25]
  if (result != ICM_20948_Stat_Ok)
 800482a:	7e7b      	ldrb	r3, [r7, #25]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <inv_icm20948_enable_dmp_sensor+0x350>
    return result;
 8004830:	7e7b      	ldrb	r3, [r7, #25]
 8004832:	e000      	b.n	8004836 <inv_icm20948_enable_dmp_sensor+0x352>

  return result;
 8004834:	7e7b      	ldrb	r3, [r7, #25]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3728      	adds	r7, #40	; 0x28
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop

08004840 <inv_icm20948_read_dmp_data>:

  return result;
}

ICM_20948_Status_e inv_icm20948_read_dmp_data(ICM_20948_Device_t *pdev, icm_20948_DMP_data_t *data)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b09e      	sub	sp, #120	; 0x78
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  ICM_20948_Status_e result = ICM_20948_Stat_Ok;
 800484a:	2300      	movs	r3, #0
 800484c:	77fb      	strb	r3, [r7, #31]
  uint8_t fifoBytes[icm_20948_DMP_Maximum_Bytes]; // Interim storage for the FIFO data

  if (pdev->_dmp_firmware_available == false)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	791b      	ldrb	r3, [r3, #4]
 8004852:	f083 0301 	eor.w	r3, r3, #1
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <inv_icm20948_read_dmp_data+0x22>
    return ICM_20948_Stat_DMPNotSupported;
 800485c:	2308      	movs	r3, #8
 800485e:	f000 bdc2 	b.w	80053e6 <inv_icm20948_read_dmp_data+0xba6>

  // Check how much data is in the FIFO
  uint16_t fifo_count;
  result = ICM_20948_get_FIFO_count(pdev, &fifo_count);
 8004862:	f107 030e 	add.w	r3, r7, #14
 8004866:	4619      	mov	r1, r3
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff f9ea 	bl	8003c42 <ICM_20948_get_FIFO_count>
 800486e:	4603      	mov	r3, r0
 8004870:	77fb      	strb	r3, [r7, #31]
  if (result != ICM_20948_Stat_Ok)
 8004872:	7ffb      	ldrb	r3, [r7, #31]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <inv_icm20948_read_dmp_data+0x3e>
    return result;
 8004878:	7ffb      	ldrb	r3, [r7, #31]
 800487a:	f000 bdb4 	b.w	80053e6 <inv_icm20948_read_dmp_data+0xba6>

  if (fifo_count < icm_20948_DMP_Header_Bytes) // Has a 2-byte header arrived?
 800487e:	89fb      	ldrh	r3, [r7, #14]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d802      	bhi.n	800488a <inv_icm20948_read_dmp_data+0x4a>
    return ICM_20948_Stat_FIFONoDataAvail;     // Bail if no header is available
 8004884:	230a      	movs	r3, #10
 8004886:	f000 bdae 	b.w	80053e6 <inv_icm20948_read_dmp_data+0xba6>

  // Read the header (2 bytes)
  data->header = 0; // Clear the existing header
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2200      	movs	r2, #0
 800488e:	801a      	strh	r2, [r3, #0]
  uint16_t aShort = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
  result = ICM_20948_read_FIFO(pdev, &fifoBytes[0], icm_20948_DMP_Header_Bytes);
 8004896:	f107 0310 	add.w	r3, r7, #16
 800489a:	2202      	movs	r2, #2
 800489c:	4619      	mov	r1, r3
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff fa11 	bl	8003cc6 <ICM_20948_read_FIFO>
 80048a4:	4603      	mov	r3, r0
 80048a6:	77fb      	strb	r3, [r7, #31]
  if (result != ICM_20948_Stat_Ok)
 80048a8:	7ffb      	ldrb	r3, [r7, #31]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <inv_icm20948_read_dmp_data+0x74>
    return result;
 80048ae:	7ffb      	ldrb	r3, [r7, #31]
 80048b0:	f000 bd99 	b.w	80053e6 <inv_icm20948_read_dmp_data+0xba6>
  for (int i = 0; i < icm_20948_DMP_Header_Bytes; i++)
 80048b4:	2300      	movs	r3, #0
 80048b6:	673b      	str	r3, [r7, #112]	; 0x70
 80048b8:	e015      	b.n	80048e6 <inv_icm20948_read_dmp_data+0xa6>
  {
    aShort |= ((uint16_t)fifoBytes[i]) << (8 - (i * 8));
 80048ba:	f107 0210 	add.w	r2, r7, #16
 80048be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048c0:	4413      	add	r3, r2
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048c8:	f1c3 0301 	rsb	r3, r3, #1
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	b21a      	sxth	r2, r3
 80048d4:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80048d8:	4313      	orrs	r3, r2
 80048da:	b21b      	sxth	r3, r3
 80048dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
  for (int i = 0; i < icm_20948_DMP_Header_Bytes; i++)
 80048e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048e2:	3301      	adds	r3, #1
 80048e4:	673b      	str	r3, [r7, #112]	; 0x70
 80048e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	dde6      	ble.n	80048ba <inv_icm20948_read_dmp_data+0x7a>
  }
  data->header = aShort;                    // Store the header in data->header
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80048f2:	801a      	strh	r2, [r3, #0]
  fifo_count -= icm_20948_DMP_Header_Bytes; // Decrement the count
 80048f4:	89fb      	ldrh	r3, [r7, #14]
 80048f6:	3b02      	subs	r3, #2
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	81fb      	strh	r3, [r7, #14]

  // If the header indicates a header2 is present then read that now
  data->header2 = 0;                                  // Clear the existing header2
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2200      	movs	r2, #0
 8004900:	805a      	strh	r2, [r3, #2]
  if ((data->header & DMP_header_bitmap_Header2) > 0) // If the header2 bit is set
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	dd4c      	ble.n	80049a8 <inv_icm20948_read_dmp_data+0x168>
  {
    if (fifo_count < icm_20948_DMP_Header2_Bytes) // Check if we need to read the FIFO count again
 800490e:	89fb      	ldrh	r3, [r7, #14]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d80d      	bhi.n	8004930 <inv_icm20948_read_dmp_data+0xf0>
    {
      result = ICM_20948_get_FIFO_count(pdev, &fifo_count);
 8004914:	f107 030e 	add.w	r3, r7, #14
 8004918:	4619      	mov	r1, r3
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7ff f991 	bl	8003c42 <ICM_20948_get_FIFO_count>
 8004920:	4603      	mov	r3, r0
 8004922:	77fb      	strb	r3, [r7, #31]
      if (result != ICM_20948_Stat_Ok)
 8004924:	7ffb      	ldrb	r3, [r7, #31]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <inv_icm20948_read_dmp_data+0xf0>
        return result;
 800492a:	7ffb      	ldrb	r3, [r7, #31]
 800492c:	f000 bd5b 	b.w	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    }
    if (fifo_count < icm_20948_DMP_Header2_Bytes)
 8004930:	89fb      	ldrh	r3, [r7, #14]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d802      	bhi.n	800493c <inv_icm20948_read_dmp_data+0xfc>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if no header2 is available
 8004936:	230b      	movs	r3, #11
 8004938:	f000 bd55 	b.w	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    // Read the header (2 bytes)
    aShort = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    result = ICM_20948_read_FIFO(pdev, &fifoBytes[0], icm_20948_DMP_Header2_Bytes);
 8004942:	f107 0310 	add.w	r3, r7, #16
 8004946:	2202      	movs	r2, #2
 8004948:	4619      	mov	r1, r3
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7ff f9bb 	bl	8003cc6 <ICM_20948_read_FIFO>
 8004950:	4603      	mov	r3, r0
 8004952:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 8004954:	7ffb      	ldrb	r3, [r7, #31]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <inv_icm20948_read_dmp_data+0x120>
      return result;
 800495a:	7ffb      	ldrb	r3, [r7, #31]
 800495c:	f000 bd43 	b.w	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    for (int i = 0; i < icm_20948_DMP_Header2_Bytes; i++)
 8004960:	2300      	movs	r3, #0
 8004962:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004964:	e015      	b.n	8004992 <inv_icm20948_read_dmp_data+0x152>
    {
      aShort |= ((uint16_t)fifoBytes[i]) << (8 - (i * 8));
 8004966:	f107 0210 	add.w	r2, r7, #16
 800496a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800496c:	4413      	add	r3, r2
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	461a      	mov	r2, r3
 8004972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004974:	f1c3 0301 	rsb	r3, r3, #1
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	b21a      	sxth	r2, r3
 8004980:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8004984:	4313      	orrs	r3, r2
 8004986:	b21b      	sxth	r3, r3
 8004988:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    for (int i = 0; i < icm_20948_DMP_Header2_Bytes; i++)
 800498c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498e:	3301      	adds	r3, #1
 8004990:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004994:	2b01      	cmp	r3, #1
 8004996:	dde6      	ble.n	8004966 <inv_icm20948_read_dmp_data+0x126>
    }
    data->header2 = aShort;                    // Store the header2 in data->header2
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800499e:	805a      	strh	r2, [r3, #2]
    fifo_count -= icm_20948_DMP_Header2_Bytes; // Decrement the count
 80049a0:	89fb      	ldrh	r3, [r7, #14]
 80049a2:	3b02      	subs	r3, #2
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Accel) > 0) // case DMP_header_bitmap_Accel:
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	dd3f      	ble.n	8004a34 <inv_icm20948_read_dmp_data+0x1f4>
  {
    if (fifo_count < icm_20948_DMP_Raw_Accel_Bytes) // Check if we need to read the FIFO count again
 80049b4:	89fb      	ldrh	r3, [r7, #14]
 80049b6:	2b05      	cmp	r3, #5
 80049b8:	d80d      	bhi.n	80049d6 <inv_icm20948_read_dmp_data+0x196>
    {
      result = ICM_20948_get_FIFO_count(pdev, &fifo_count);
 80049ba:	f107 030e 	add.w	r3, r7, #14
 80049be:	4619      	mov	r1, r3
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7ff f93e 	bl	8003c42 <ICM_20948_get_FIFO_count>
 80049c6:	4603      	mov	r3, r0
 80049c8:	77fb      	strb	r3, [r7, #31]
      if (result != ICM_20948_Stat_Ok)
 80049ca:	7ffb      	ldrb	r3, [r7, #31]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <inv_icm20948_read_dmp_data+0x196>
        return result;
 80049d0:	7ffb      	ldrb	r3, [r7, #31]
 80049d2:	f000 bd08 	b.w	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    }
    if (fifo_count < icm_20948_DMP_Raw_Accel_Bytes)
 80049d6:	89fb      	ldrh	r3, [r7, #14]
 80049d8:	2b05      	cmp	r3, #5
 80049da:	d802      	bhi.n	80049e2 <inv_icm20948_read_dmp_data+0x1a2>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 80049dc:	230b      	movs	r3, #11
 80049de:	f000 bd02 	b.w	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    result = ICM_20948_read_FIFO(pdev, &fifoBytes[0], icm_20948_DMP_Raw_Accel_Bytes);
 80049e2:	f107 0310 	add.w	r3, r7, #16
 80049e6:	2206      	movs	r2, #6
 80049e8:	4619      	mov	r1, r3
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff f96b 	bl	8003cc6 <ICM_20948_read_FIFO>
 80049f0:	4603      	mov	r3, r0
 80049f2:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 80049f4:	7ffb      	ldrb	r3, [r7, #31]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <inv_icm20948_read_dmp_data+0x1c0>
      return result;
 80049fa:	7ffb      	ldrb	r3, [r7, #31]
 80049fc:	f000 bcf3 	b.w	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    for (int i = 0; i < icm_20948_DMP_Raw_Accel_Bytes; i++)
 8004a00:	2300      	movs	r3, #0
 8004a02:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a04:	e00f      	b.n	8004a26 <inv_icm20948_read_dmp_data+0x1e6>
    {
      data->Raw_Accel.Bytes[DMP_PQuat6_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 8004a06:	4aab      	ldr	r2, [pc, #684]	; (8004cb4 <inv_icm20948_read_dmp_data+0x474>)
 8004a08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a0e:	f107 0110 	add.w	r1, r7, #16
 8004a12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a14:	440a      	add	r2, r1
 8004a16:	7811      	ldrb	r1, [r2, #0]
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	460a      	mov	r2, r1
 8004a1e:	711a      	strb	r2, [r3, #4]
    for (int i = 0; i < icm_20948_DMP_Raw_Accel_Bytes; i++)
 8004a20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a22:	3301      	adds	r3, #1
 8004a24:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a28:	2b05      	cmp	r3, #5
 8004a2a:	ddec      	ble.n	8004a06 <inv_icm20948_read_dmp_data+0x1c6>
    }
    fifo_count -= icm_20948_DMP_Raw_Accel_Bytes; // Decrement the count
 8004a2c:	89fb      	ldrh	r3, [r7, #14]
 8004a2e:	3b06      	subs	r3, #6
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Gyro) > 0) // case DMP_header_bitmap_Gyro:
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	dd3f      	ble.n	8004ac0 <inv_icm20948_read_dmp_data+0x280>
  {
    if (fifo_count < (icm_20948_DMP_Raw_Gyro_Bytes + icm_20948_DMP_Gyro_Bias_Bytes)) // Check if we need to read the FIFO count again
 8004a40:	89fb      	ldrh	r3, [r7, #14]
 8004a42:	2b0b      	cmp	r3, #11
 8004a44:	d80d      	bhi.n	8004a62 <inv_icm20948_read_dmp_data+0x222>
    {
      result = ICM_20948_get_FIFO_count(pdev, &fifo_count);
 8004a46:	f107 030e 	add.w	r3, r7, #14
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7ff f8f8 	bl	8003c42 <ICM_20948_get_FIFO_count>
 8004a52:	4603      	mov	r3, r0
 8004a54:	77fb      	strb	r3, [r7, #31]
      if (result != ICM_20948_Stat_Ok)
 8004a56:	7ffb      	ldrb	r3, [r7, #31]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d002      	beq.n	8004a62 <inv_icm20948_read_dmp_data+0x222>
        return result;
 8004a5c:	7ffb      	ldrb	r3, [r7, #31]
 8004a5e:	f000 bcc2 	b.w	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    }
    if (fifo_count < (icm_20948_DMP_Raw_Gyro_Bytes + icm_20948_DMP_Gyro_Bias_Bytes))
 8004a62:	89fb      	ldrh	r3, [r7, #14]
 8004a64:	2b0b      	cmp	r3, #11
 8004a66:	d802      	bhi.n	8004a6e <inv_icm20948_read_dmp_data+0x22e>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8004a68:	230b      	movs	r3, #11
 8004a6a:	f000 bcbc 	b.w	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    result = ICM_20948_read_FIFO(pdev, &fifoBytes[0], (icm_20948_DMP_Raw_Gyro_Bytes + icm_20948_DMP_Gyro_Bias_Bytes));
 8004a6e:	f107 0310 	add.w	r3, r7, #16
 8004a72:	220c      	movs	r2, #12
 8004a74:	4619      	mov	r1, r3
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7ff f925 	bl	8003cc6 <ICM_20948_read_FIFO>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 8004a80:	7ffb      	ldrb	r3, [r7, #31]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <inv_icm20948_read_dmp_data+0x24c>
      return result;
 8004a86:	7ffb      	ldrb	r3, [r7, #31]
 8004a88:	f000 bcad 	b.w	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    for (int i = 0; i < (icm_20948_DMP_Raw_Gyro_Bytes + icm_20948_DMP_Gyro_Bias_Bytes); i++)
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	667b      	str	r3, [r7, #100]	; 0x64
 8004a90:	e00f      	b.n	8004ab2 <inv_icm20948_read_dmp_data+0x272>
    {
      data->Raw_Gyro.Bytes[DMP_Raw_Gyro_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 8004a92:	4a89      	ldr	r2, [pc, #548]	; (8004cb8 <inv_icm20948_read_dmp_data+0x478>)
 8004a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a9a:	f107 0110 	add.w	r1, r7, #16
 8004a9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004aa0:	440a      	add	r2, r1
 8004aa2:	7811      	ldrb	r1, [r2, #0]
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	460a      	mov	r2, r1
 8004aaa:	729a      	strb	r2, [r3, #10]
    for (int i = 0; i < (icm_20948_DMP_Raw_Gyro_Bytes + icm_20948_DMP_Gyro_Bias_Bytes); i++)
 8004aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aae:	3301      	adds	r3, #1
 8004ab0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ab4:	2b0b      	cmp	r3, #11
 8004ab6:	ddec      	ble.n	8004a92 <inv_icm20948_read_dmp_data+0x252>
    }
    fifo_count -= (icm_20948_DMP_Raw_Gyro_Bytes + icm_20948_DMP_Gyro_Bias_Bytes); // Decrement the count
 8004ab8:	89fb      	ldrh	r3, [r7, #14]
 8004aba:	3b0c      	subs	r3, #12
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Compass) > 0) // case DMP_header_bitmap_Compass:
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	dd3f      	ble.n	8004b4c <inv_icm20948_read_dmp_data+0x30c>
  {
    if (fifo_count < icm_20948_DMP_Compass_Bytes) // Check if we need to read the FIFO count again
 8004acc:	89fb      	ldrh	r3, [r7, #14]
 8004ace:	2b05      	cmp	r3, #5
 8004ad0:	d80d      	bhi.n	8004aee <inv_icm20948_read_dmp_data+0x2ae>
    {
      result = ICM_20948_get_FIFO_count(pdev, &fifo_count);
 8004ad2:	f107 030e 	add.w	r3, r7, #14
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7ff f8b2 	bl	8003c42 <ICM_20948_get_FIFO_count>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	77fb      	strb	r3, [r7, #31]
      if (result != ICM_20948_Stat_Ok)
 8004ae2:	7ffb      	ldrb	r3, [r7, #31]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <inv_icm20948_read_dmp_data+0x2ae>
        return result;
 8004ae8:	7ffb      	ldrb	r3, [r7, #31]
 8004aea:	f000 bc7c 	b.w	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    }
    if (fifo_count < icm_20948_DMP_Compass_Bytes)
 8004aee:	89fb      	ldrh	r3, [r7, #14]
 8004af0:	2b05      	cmp	r3, #5
 8004af2:	d802      	bhi.n	8004afa <inv_icm20948_read_dmp_data+0x2ba>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8004af4:	230b      	movs	r3, #11
 8004af6:	f000 bc76 	b.w	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    result = ICM_20948_read_FIFO(pdev, &fifoBytes[0], icm_20948_DMP_Compass_Bytes);
 8004afa:	f107 0310 	add.w	r3, r7, #16
 8004afe:	2206      	movs	r2, #6
 8004b00:	4619      	mov	r1, r3
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7ff f8df 	bl	8003cc6 <ICM_20948_read_FIFO>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 8004b0c:	7ffb      	ldrb	r3, [r7, #31]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <inv_icm20948_read_dmp_data+0x2d8>
      return result;
 8004b12:	7ffb      	ldrb	r3, [r7, #31]
 8004b14:	f000 bc67 	b.w	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    for (int i = 0; i < icm_20948_DMP_Compass_Bytes; i++)
 8004b18:	2300      	movs	r3, #0
 8004b1a:	663b      	str	r3, [r7, #96]	; 0x60
 8004b1c:	e00f      	b.n	8004b3e <inv_icm20948_read_dmp_data+0x2fe>
    {
      data->Compass.Bytes[DMP_PQuat6_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 8004b1e:	4a65      	ldr	r2, [pc, #404]	; (8004cb4 <inv_icm20948_read_dmp_data+0x474>)
 8004b20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b26:	f107 0110 	add.w	r1, r7, #16
 8004b2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b2c:	440a      	add	r2, r1
 8004b2e:	7811      	ldrb	r1, [r2, #0]
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	4413      	add	r3, r2
 8004b34:	460a      	mov	r2, r1
 8004b36:	759a      	strb	r2, [r3, #22]
    for (int i = 0; i < icm_20948_DMP_Compass_Bytes; i++)
 8004b38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b40:	2b05      	cmp	r3, #5
 8004b42:	ddec      	ble.n	8004b1e <inv_icm20948_read_dmp_data+0x2de>
    }
    fifo_count -= icm_20948_DMP_Compass_Bytes; // Decrement the count
 8004b44:	89fb      	ldrh	r3, [r7, #14]
 8004b46:	3b06      	subs	r3, #6
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_ALS) > 0) // case DMP_header_bitmap_ALS:
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	dd3d      	ble.n	8004bd4 <inv_icm20948_read_dmp_data+0x394>
  {
    if (fifo_count < icm_20948_DMP_ALS_Bytes) // Check if we need to read the FIFO count again
 8004b58:	89fb      	ldrh	r3, [r7, #14]
 8004b5a:	2b07      	cmp	r3, #7
 8004b5c:	d80d      	bhi.n	8004b7a <inv_icm20948_read_dmp_data+0x33a>
    {
      result = ICM_20948_get_FIFO_count(pdev, &fifo_count);
 8004b5e:	f107 030e 	add.w	r3, r7, #14
 8004b62:	4619      	mov	r1, r3
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7ff f86c 	bl	8003c42 <ICM_20948_get_FIFO_count>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	77fb      	strb	r3, [r7, #31]
      if (result != ICM_20948_Stat_Ok)
 8004b6e:	7ffb      	ldrb	r3, [r7, #31]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <inv_icm20948_read_dmp_data+0x33a>
        return result;
 8004b74:	7ffb      	ldrb	r3, [r7, #31]
 8004b76:	f000 bc36 	b.w	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    }
    if (fifo_count < icm_20948_DMP_ALS_Bytes)
 8004b7a:	89fb      	ldrh	r3, [r7, #14]
 8004b7c:	2b07      	cmp	r3, #7
 8004b7e:	d802      	bhi.n	8004b86 <inv_icm20948_read_dmp_data+0x346>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8004b80:	230b      	movs	r3, #11
 8004b82:	f000 bc30 	b.w	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    result = ICM_20948_read_FIFO(pdev, &fifoBytes[0], icm_20948_DMP_ALS_Bytes);
 8004b86:	f107 0310 	add.w	r3, r7, #16
 8004b8a:	2208      	movs	r2, #8
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff f899 	bl	8003cc6 <ICM_20948_read_FIFO>
 8004b94:	4603      	mov	r3, r0
 8004b96:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 8004b98:	7ffb      	ldrb	r3, [r7, #31]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <inv_icm20948_read_dmp_data+0x364>
      return result;
 8004b9e:	7ffb      	ldrb	r3, [r7, #31]
 8004ba0:	f000 bc21 	b.w	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    for (int i = 0; i < icm_20948_DMP_ALS_Bytes; i++)
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ba8:	e00d      	b.n	8004bc6 <inv_icm20948_read_dmp_data+0x386>
    {
      data->ALS[i] = fifoBytes[i];
 8004baa:	f107 0210 	add.w	r2, r7, #16
 8004bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bb0:	4413      	add	r3, r2
 8004bb2:	7819      	ldrb	r1, [r3, #0]
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bb8:	4413      	add	r3, r2
 8004bba:	331c      	adds	r3, #28
 8004bbc:	460a      	mov	r2, r1
 8004bbe:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < icm_20948_DMP_ALS_Bytes; i++)
 8004bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bc8:	2b07      	cmp	r3, #7
 8004bca:	ddee      	ble.n	8004baa <inv_icm20948_read_dmp_data+0x36a>
    }
    fifo_count -= icm_20948_DMP_ALS_Bytes; // Decrement the count
 8004bcc:	89fb      	ldrh	r3, [r7, #14]
 8004bce:	3b08      	subs	r3, #8
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Quat6) > 0) // case DMP_header_bitmap_Quat6:
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	dd3d      	ble.n	8004c5c <inv_icm20948_read_dmp_data+0x41c>
  {
    if (fifo_count < icm_20948_DMP_Quat6_Bytes) // Check if we need to read the FIFO count again
 8004be0:	89fb      	ldrh	r3, [r7, #14]
 8004be2:	2b0b      	cmp	r3, #11
 8004be4:	d80c      	bhi.n	8004c00 <inv_icm20948_read_dmp_data+0x3c0>
    {
      result = ICM_20948_get_FIFO_count(pdev, &fifo_count);
 8004be6:	f107 030e 	add.w	r3, r7, #14
 8004bea:	4619      	mov	r1, r3
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff f828 	bl	8003c42 <ICM_20948_get_FIFO_count>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	77fb      	strb	r3, [r7, #31]
      if (result != ICM_20948_Stat_Ok)
 8004bf6:	7ffb      	ldrb	r3, [r7, #31]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <inv_icm20948_read_dmp_data+0x3c0>
        return result;
 8004bfc:	7ffb      	ldrb	r3, [r7, #31]
 8004bfe:	e3f2      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    }
    if (fifo_count < icm_20948_DMP_Quat6_Bytes)
 8004c00:	89fb      	ldrh	r3, [r7, #14]
 8004c02:	2b0b      	cmp	r3, #11
 8004c04:	d801      	bhi.n	8004c0a <inv_icm20948_read_dmp_data+0x3ca>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8004c06:	230b      	movs	r3, #11
 8004c08:	e3ed      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    result = ICM_20948_read_FIFO(pdev, &fifoBytes[0], icm_20948_DMP_Quat6_Bytes);
 8004c0a:	f107 0310 	add.w	r3, r7, #16
 8004c0e:	220c      	movs	r2, #12
 8004c10:	4619      	mov	r1, r3
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff f857 	bl	8003cc6 <ICM_20948_read_FIFO>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 8004c1c:	7ffb      	ldrb	r3, [r7, #31]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <inv_icm20948_read_dmp_data+0x3e6>
      return result;
 8004c22:	7ffb      	ldrb	r3, [r7, #31]
 8004c24:	e3df      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    for (int i = 0; i < icm_20948_DMP_Quat6_Bytes; i++)
 8004c26:	2300      	movs	r3, #0
 8004c28:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c2a:	e010      	b.n	8004c4e <inv_icm20948_read_dmp_data+0x40e>
    {
      data->Quat6.Bytes[DMP_Quat6_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 8004c2c:	4a23      	ldr	r2, [pc, #140]	; (8004cbc <inv_icm20948_read_dmp_data+0x47c>)
 8004c2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c34:	f107 0110 	add.w	r1, r7, #16
 8004c38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c3a:	440a      	add	r2, r1
 8004c3c:	7811      	ldrb	r1, [r2, #0]
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	4413      	add	r3, r2
 8004c42:	460a      	mov	r2, r1
 8004c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    for (int i = 0; i < icm_20948_DMP_Quat6_Bytes; i++)
 8004c48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c50:	2b0b      	cmp	r3, #11
 8004c52:	ddeb      	ble.n	8004c2c <inv_icm20948_read_dmp_data+0x3ec>
    }
    fifo_count -= icm_20948_DMP_Quat6_Bytes; // Decrement the count
 8004c54:	89fb      	ldrh	r3, [r7, #14]
 8004c56:	3b0c      	subs	r3, #12
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Quat9) > 0) // case DMP_header_bitmap_Quat9:
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	dd43      	ble.n	8004cf0 <inv_icm20948_read_dmp_data+0x4b0>
  {
    if (fifo_count < icm_20948_DMP_Quat9_Bytes) // Check if we need to read the FIFO count again
 8004c68:	89fb      	ldrh	r3, [r7, #14]
 8004c6a:	2b0d      	cmp	r3, #13
 8004c6c:	d80c      	bhi.n	8004c88 <inv_icm20948_read_dmp_data+0x448>
    {
      result = ICM_20948_get_FIFO_count(pdev, &fifo_count);
 8004c6e:	f107 030e 	add.w	r3, r7, #14
 8004c72:	4619      	mov	r1, r3
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7fe ffe4 	bl	8003c42 <ICM_20948_get_FIFO_count>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	77fb      	strb	r3, [r7, #31]
      if (result != ICM_20948_Stat_Ok)
 8004c7e:	7ffb      	ldrb	r3, [r7, #31]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <inv_icm20948_read_dmp_data+0x448>
        return result;
 8004c84:	7ffb      	ldrb	r3, [r7, #31]
 8004c86:	e3ae      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    }
    if (fifo_count < icm_20948_DMP_Quat9_Bytes)
 8004c88:	89fb      	ldrh	r3, [r7, #14]
 8004c8a:	2b0d      	cmp	r3, #13
 8004c8c:	d801      	bhi.n	8004c92 <inv_icm20948_read_dmp_data+0x452>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8004c8e:	230b      	movs	r3, #11
 8004c90:	e3a9      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    result = ICM_20948_read_FIFO(pdev, &fifoBytes[0], icm_20948_DMP_Quat9_Bytes);
 8004c92:	f107 0310 	add.w	r3, r7, #16
 8004c96:	220e      	movs	r2, #14
 8004c98:	4619      	mov	r1, r3
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7ff f813 	bl	8003cc6 <ICM_20948_read_FIFO>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 8004ca4:	7ffb      	ldrb	r3, [r7, #31]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <inv_icm20948_read_dmp_data+0x46e>
      return result;
 8004caa:	7ffb      	ldrb	r3, [r7, #31]
 8004cac:	e39b      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    for (int i = 0; i < icm_20948_DMP_Quat9_Bytes; i++)
 8004cae:	2300      	movs	r3, #0
 8004cb0:	657b      	str	r3, [r7, #84]	; 0x54
 8004cb2:	e016      	b.n	8004ce2 <inv_icm20948_read_dmp_data+0x4a2>
 8004cb4:	0800c860 	.word	0x0800c860
 8004cb8:	0800c878 	.word	0x0800c878
 8004cbc:	0800c830 	.word	0x0800c830
    {
      data->Quat9.Bytes[DMP_Quat9_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 8004cc0:	4aa9      	ldr	r2, [pc, #676]	; (8004f68 <inv_icm20948_read_dmp_data+0x728>)
 8004cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cc8:	f107 0110 	add.w	r1, r7, #16
 8004ccc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004cce:	440a      	add	r2, r1
 8004cd0:	7811      	ldrb	r1, [r2, #0]
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	460a      	mov	r2, r1
 8004cd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    for (int i = 0; i < icm_20948_DMP_Quat9_Bytes; i++)
 8004cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cde:	3301      	adds	r3, #1
 8004ce0:	657b      	str	r3, [r7, #84]	; 0x54
 8004ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ce4:	2b0d      	cmp	r3, #13
 8004ce6:	ddeb      	ble.n	8004cc0 <inv_icm20948_read_dmp_data+0x480>
    }
    fifo_count -= icm_20948_DMP_Quat9_Bytes; // Decrement the count
 8004ce8:	89fb      	ldrh	r3, [r7, #14]
 8004cea:	3b0e      	subs	r3, #14
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_PQuat6) > 0) // case DMP_header_bitmap_PQuat6:
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	dd3d      	ble.n	8004d78 <inv_icm20948_read_dmp_data+0x538>
  {
    if (fifo_count < icm_20948_DMP_PQuat6_Bytes) // Check if we need to read the FIFO count again
 8004cfc:	89fb      	ldrh	r3, [r7, #14]
 8004cfe:	2b05      	cmp	r3, #5
 8004d00:	d80c      	bhi.n	8004d1c <inv_icm20948_read_dmp_data+0x4dc>
    {
      result = ICM_20948_get_FIFO_count(pdev, &fifo_count);
 8004d02:	f107 030e 	add.w	r3, r7, #14
 8004d06:	4619      	mov	r1, r3
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7fe ff9a 	bl	8003c42 <ICM_20948_get_FIFO_count>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	77fb      	strb	r3, [r7, #31]
      if (result != ICM_20948_Stat_Ok)
 8004d12:	7ffb      	ldrb	r3, [r7, #31]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <inv_icm20948_read_dmp_data+0x4dc>
        return result;
 8004d18:	7ffb      	ldrb	r3, [r7, #31]
 8004d1a:	e364      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    }
    if (fifo_count < icm_20948_DMP_PQuat6_Bytes)
 8004d1c:	89fb      	ldrh	r3, [r7, #14]
 8004d1e:	2b05      	cmp	r3, #5
 8004d20:	d801      	bhi.n	8004d26 <inv_icm20948_read_dmp_data+0x4e6>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8004d22:	230b      	movs	r3, #11
 8004d24:	e35f      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    result = ICM_20948_read_FIFO(pdev, &fifoBytes[0], icm_20948_DMP_PQuat6_Bytes);
 8004d26:	f107 0310 	add.w	r3, r7, #16
 8004d2a:	2206      	movs	r2, #6
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fe ffc9 	bl	8003cc6 <ICM_20948_read_FIFO>
 8004d34:	4603      	mov	r3, r0
 8004d36:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 8004d38:	7ffb      	ldrb	r3, [r7, #31]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <inv_icm20948_read_dmp_data+0x502>
      return result;
 8004d3e:	7ffb      	ldrb	r3, [r7, #31]
 8004d40:	e351      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    for (int i = 0; i < icm_20948_DMP_PQuat6_Bytes; i++)
 8004d42:	2300      	movs	r3, #0
 8004d44:	653b      	str	r3, [r7, #80]	; 0x50
 8004d46:	e010      	b.n	8004d6a <inv_icm20948_read_dmp_data+0x52a>
    {
      data->PQuat6.Bytes[DMP_PQuat6_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 8004d48:	4a88      	ldr	r2, [pc, #544]	; (8004f6c <inv_icm20948_read_dmp_data+0x72c>)
 8004d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d50:	f107 0110 	add.w	r1, r7, #16
 8004d54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d56:	440a      	add	r2, r1
 8004d58:	7811      	ldrb	r1, [r2, #0]
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	460a      	mov	r2, r1
 8004d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    for (int i = 0; i < icm_20948_DMP_PQuat6_Bytes; i++)
 8004d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d66:	3301      	adds	r3, #1
 8004d68:	653b      	str	r3, [r7, #80]	; 0x50
 8004d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d6c:	2b05      	cmp	r3, #5
 8004d6e:	ddeb      	ble.n	8004d48 <inv_icm20948_read_dmp_data+0x508>
    }
    fifo_count -= icm_20948_DMP_PQuat6_Bytes; // Decrement the count
 8004d70:	89fb      	ldrh	r3, [r7, #14]
 8004d72:	3b06      	subs	r3, #6
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Geomag) > 0) // case DMP_header_bitmap_Geomag:
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	dd3d      	ble.n	8004e00 <inv_icm20948_read_dmp_data+0x5c0>
  {
    if (fifo_count < icm_20948_DMP_Geomag_Bytes) // Check if we need to read the FIFO count again
 8004d84:	89fb      	ldrh	r3, [r7, #14]
 8004d86:	2b0d      	cmp	r3, #13
 8004d88:	d80c      	bhi.n	8004da4 <inv_icm20948_read_dmp_data+0x564>
    {
      result = ICM_20948_get_FIFO_count(pdev, &fifo_count);
 8004d8a:	f107 030e 	add.w	r3, r7, #14
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7fe ff56 	bl	8003c42 <ICM_20948_get_FIFO_count>
 8004d96:	4603      	mov	r3, r0
 8004d98:	77fb      	strb	r3, [r7, #31]
      if (result != ICM_20948_Stat_Ok)
 8004d9a:	7ffb      	ldrb	r3, [r7, #31]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <inv_icm20948_read_dmp_data+0x564>
        return result;
 8004da0:	7ffb      	ldrb	r3, [r7, #31]
 8004da2:	e320      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    }
    if (fifo_count < icm_20948_DMP_Geomag_Bytes)
 8004da4:	89fb      	ldrh	r3, [r7, #14]
 8004da6:	2b0d      	cmp	r3, #13
 8004da8:	d801      	bhi.n	8004dae <inv_icm20948_read_dmp_data+0x56e>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8004daa:	230b      	movs	r3, #11
 8004dac:	e31b      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    result = ICM_20948_read_FIFO(pdev, &fifoBytes[0], icm_20948_DMP_Geomag_Bytes);
 8004dae:	f107 0310 	add.w	r3, r7, #16
 8004db2:	220e      	movs	r2, #14
 8004db4:	4619      	mov	r1, r3
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fe ff85 	bl	8003cc6 <ICM_20948_read_FIFO>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 8004dc0:	7ffb      	ldrb	r3, [r7, #31]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <inv_icm20948_read_dmp_data+0x58a>
      return result;
 8004dc6:	7ffb      	ldrb	r3, [r7, #31]
 8004dc8:	e30d      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    for (int i = 0; i < icm_20948_DMP_Geomag_Bytes; i++)
 8004dca:	2300      	movs	r3, #0
 8004dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dce:	e010      	b.n	8004df2 <inv_icm20948_read_dmp_data+0x5b2>
    {
      data->Geomag.Bytes[DMP_Quat9_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 8004dd0:	4a65      	ldr	r2, [pc, #404]	; (8004f68 <inv_icm20948_read_dmp_data+0x728>)
 8004dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd8:	f107 0110 	add.w	r1, r7, #16
 8004ddc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dde:	440a      	add	r2, r1
 8004de0:	7811      	ldrb	r1, [r2, #0]
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	4413      	add	r3, r2
 8004de6:	460a      	mov	r2, r1
 8004de8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    for (int i = 0; i < icm_20948_DMP_Geomag_Bytes; i++)
 8004dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dee:	3301      	adds	r3, #1
 8004df0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df4:	2b0d      	cmp	r3, #13
 8004df6:	ddeb      	ble.n	8004dd0 <inv_icm20948_read_dmp_data+0x590>
    }
    fifo_count -= icm_20948_DMP_Geomag_Bytes; // Decrement the count
 8004df8:	89fb      	ldrh	r3, [r7, #14]
 8004dfa:	3b0e      	subs	r3, #14
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Pressure) > 0) // case DMP_header_bitmap_Pressure:
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	dd3a      	ble.n	8004e82 <inv_icm20948_read_dmp_data+0x642>
  {
    if (fifo_count < icm_20948_DMP_Pressure_Bytes) // Check if we need to read the FIFO count again
 8004e0c:	89fb      	ldrh	r3, [r7, #14]
 8004e0e:	2b05      	cmp	r3, #5
 8004e10:	d80c      	bhi.n	8004e2c <inv_icm20948_read_dmp_data+0x5ec>
    {
      result = ICM_20948_get_FIFO_count(pdev, &fifo_count);
 8004e12:	f107 030e 	add.w	r3, r7, #14
 8004e16:	4619      	mov	r1, r3
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7fe ff12 	bl	8003c42 <ICM_20948_get_FIFO_count>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	77fb      	strb	r3, [r7, #31]
      if (result != ICM_20948_Stat_Ok)
 8004e22:	7ffb      	ldrb	r3, [r7, #31]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <inv_icm20948_read_dmp_data+0x5ec>
        return result;
 8004e28:	7ffb      	ldrb	r3, [r7, #31]
 8004e2a:	e2dc      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    }
    if (fifo_count < icm_20948_DMP_Pressure_Bytes)
 8004e2c:	89fb      	ldrh	r3, [r7, #14]
 8004e2e:	2b05      	cmp	r3, #5
 8004e30:	d801      	bhi.n	8004e36 <inv_icm20948_read_dmp_data+0x5f6>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8004e32:	230b      	movs	r3, #11
 8004e34:	e2d7      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    result = ICM_20948_read_FIFO(pdev, &fifoBytes[0], icm_20948_DMP_Pressure_Bytes);
 8004e36:	f107 0310 	add.w	r3, r7, #16
 8004e3a:	2206      	movs	r2, #6
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7fe ff41 	bl	8003cc6 <ICM_20948_read_FIFO>
 8004e44:	4603      	mov	r3, r0
 8004e46:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 8004e48:	7ffb      	ldrb	r3, [r7, #31]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <inv_icm20948_read_dmp_data+0x612>
      return result;
 8004e4e:	7ffb      	ldrb	r3, [r7, #31]
 8004e50:	e2c9      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    for (int i = 0; i < icm_20948_DMP_Pressure_Bytes; i++)
 8004e52:	2300      	movs	r3, #0
 8004e54:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e56:	e00d      	b.n	8004e74 <inv_icm20948_read_dmp_data+0x634>
    {
      data->Pressure[i] = fifoBytes[i];
 8004e58:	f107 0210 	add.w	r2, r7, #16
 8004e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5e:	4413      	add	r3, r2
 8004e60:	7819      	ldrb	r1, [r3, #0]
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e66:	4413      	add	r3, r2
 8004e68:	3358      	adds	r3, #88	; 0x58
 8004e6a:	460a      	mov	r2, r1
 8004e6c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < icm_20948_DMP_Pressure_Bytes; i++)
 8004e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e70:	3301      	adds	r3, #1
 8004e72:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e76:	2b05      	cmp	r3, #5
 8004e78:	ddee      	ble.n	8004e58 <inv_icm20948_read_dmp_data+0x618>
    }
    fifo_count -= icm_20948_DMP_Pressure_Bytes; // Decrement the count
 8004e7a:	89fb      	ldrh	r3, [r7, #14]
 8004e7c:	3b06      	subs	r3, #6
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	81fb      	strh	r3, [r7, #14]
			}
			fifo_count -= icm_20948_DMP_Gyro_Calibr_Bytes; // Decrement the count
			*/
  }

  if ((data->header & DMP_header_bitmap_Compass_Calibr) > 0) // case DMP_header_bitmap_Compass_Calibr:
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	dd3d      	ble.n	8004f0a <inv_icm20948_read_dmp_data+0x6ca>
  {
    if (fifo_count < icm_20948_DMP_Compass_Calibr_Bytes) // Check if we need to read the FIFO count again
 8004e8e:	89fb      	ldrh	r3, [r7, #14]
 8004e90:	2b0b      	cmp	r3, #11
 8004e92:	d80c      	bhi.n	8004eae <inv_icm20948_read_dmp_data+0x66e>
    {
      result = ICM_20948_get_FIFO_count(pdev, &fifo_count);
 8004e94:	f107 030e 	add.w	r3, r7, #14
 8004e98:	4619      	mov	r1, r3
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fe fed1 	bl	8003c42 <ICM_20948_get_FIFO_count>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	77fb      	strb	r3, [r7, #31]
      if (result != ICM_20948_Stat_Ok)
 8004ea4:	7ffb      	ldrb	r3, [r7, #31]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <inv_icm20948_read_dmp_data+0x66e>
        return result;
 8004eaa:	7ffb      	ldrb	r3, [r7, #31]
 8004eac:	e29b      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    }
    if (fifo_count < icm_20948_DMP_Compass_Calibr_Bytes)
 8004eae:	89fb      	ldrh	r3, [r7, #14]
 8004eb0:	2b0b      	cmp	r3, #11
 8004eb2:	d801      	bhi.n	8004eb8 <inv_icm20948_read_dmp_data+0x678>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8004eb4:	230b      	movs	r3, #11
 8004eb6:	e296      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    result = ICM_20948_read_FIFO(pdev, &fifoBytes[0], icm_20948_DMP_Compass_Calibr_Bytes);
 8004eb8:	f107 0310 	add.w	r3, r7, #16
 8004ebc:	220c      	movs	r2, #12
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7fe ff00 	bl	8003cc6 <ICM_20948_read_FIFO>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 8004eca:	7ffb      	ldrb	r3, [r7, #31]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <inv_icm20948_read_dmp_data+0x694>
      return result;
 8004ed0:	7ffb      	ldrb	r3, [r7, #31]
 8004ed2:	e288      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    for (int i = 0; i < icm_20948_DMP_Compass_Calibr_Bytes; i++)
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ed8:	e010      	b.n	8004efc <inv_icm20948_read_dmp_data+0x6bc>
    {
      data->Compass_Calibr.Bytes[DMP_Quat6_Byte_Ordering[i]] = fifoBytes[i]; // Correct the byte order (map big endian to little endian)
 8004eda:	4a25      	ldr	r2, [pc, #148]	; (8004f70 <inv_icm20948_read_dmp_data+0x730>)
 8004edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee2:	f107 0110 	add.w	r1, r7, #16
 8004ee6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ee8:	440a      	add	r2, r1
 8004eea:	7811      	ldrb	r1, [r2, #0]
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	4413      	add	r3, r2
 8004ef0:	460a      	mov	r2, r1
 8004ef2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    for (int i = 0; i < icm_20948_DMP_Compass_Calibr_Bytes; i++)
 8004ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ef8:	3301      	adds	r3, #1
 8004efa:	647b      	str	r3, [r7, #68]	; 0x44
 8004efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004efe:	2b0b      	cmp	r3, #11
 8004f00:	ddeb      	ble.n	8004eda <inv_icm20948_read_dmp_data+0x69a>
    }
    fifo_count -= icm_20948_DMP_Compass_Calibr_Bytes; // Decrement the count
 8004f02:	89fb      	ldrh	r3, [r7, #14]
 8004f04:	3b0c      	subs	r3, #12
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header & DMP_header_bitmap_Step_Detector) > 0) // case DMP_header_bitmap_Step_Detector:
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	dd4a      	ble.n	8004fac <inv_icm20948_read_dmp_data+0x76c>
  {
    if (fifo_count < icm_20948_DMP_Step_Detector_Bytes) // Check if we need to read the FIFO count again
 8004f16:	89fb      	ldrh	r3, [r7, #14]
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	d80c      	bhi.n	8004f36 <inv_icm20948_read_dmp_data+0x6f6>
    {
      result = ICM_20948_get_FIFO_count(pdev, &fifo_count);
 8004f1c:	f107 030e 	add.w	r3, r7, #14
 8004f20:	4619      	mov	r1, r3
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fe fe8d 	bl	8003c42 <ICM_20948_get_FIFO_count>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	77fb      	strb	r3, [r7, #31]
      if (result != ICM_20948_Stat_Ok)
 8004f2c:	7ffb      	ldrb	r3, [r7, #31]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <inv_icm20948_read_dmp_data+0x6f6>
        return result;
 8004f32:	7ffb      	ldrb	r3, [r7, #31]
 8004f34:	e257      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    }
    if (fifo_count < icm_20948_DMP_Step_Detector_Bytes)
 8004f36:	89fb      	ldrh	r3, [r7, #14]
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	d801      	bhi.n	8004f40 <inv_icm20948_read_dmp_data+0x700>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8004f3c:	230b      	movs	r3, #11
 8004f3e:	e252      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    result = ICM_20948_read_FIFO(pdev, &fifoBytes[0], icm_20948_DMP_Step_Detector_Bytes);
 8004f40:	f107 0310 	add.w	r3, r7, #16
 8004f44:	2204      	movs	r2, #4
 8004f46:	4619      	mov	r1, r3
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7fe febc 	bl	8003cc6 <ICM_20948_read_FIFO>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 8004f52:	7ffb      	ldrb	r3, [r7, #31]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <inv_icm20948_read_dmp_data+0x71c>
      return result;
 8004f58:	7ffb      	ldrb	r3, [r7, #31]
 8004f5a:	e244      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    uint32_t aWord = 0;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	643b      	str	r3, [r7, #64]	; 0x40
    for (int i = 0; i < icm_20948_DMP_Step_Detector_Bytes; i++)
 8004f60:	2300      	movs	r3, #0
 8004f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f64:	e018      	b.n	8004f98 <inv_icm20948_read_dmp_data+0x758>
 8004f66:	bf00      	nop
 8004f68:	0800c7f8 	.word	0x0800c7f8
 8004f6c:	0800c860 	.word	0x0800c860
 8004f70:	0800c830 	.word	0x0800c830
    {
      aWord |= ((uint32_t)fifoBytes[i]) << (24 - (i * 8));
 8004f74:	f107 0210 	add.w	r2, r7, #16
 8004f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f7a:	4413      	add	r3, r2
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f82:	f1c3 0303 	rsb	r3, r3, #3
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	643b      	str	r3, [r7, #64]	; 0x40
    for (int i = 0; i < icm_20948_DMP_Step_Detector_Bytes; i++)
 8004f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f94:	3301      	adds	r3, #1
 8004f96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	ddea      	ble.n	8004f74 <inv_icm20948_read_dmp_data+0x734>
    }
    data->Pedometer_Timestamp = aWord;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fa2:	679a      	str	r2, [r3, #120]	; 0x78
    fifo_count -= icm_20948_DMP_Step_Detector_Bytes; // Decrement the count
 8004fa4:	89fb      	ldrh	r3, [r7, #14]
 8004fa6:	3b04      	subs	r3, #4
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	81fb      	strh	r3, [r7, #14]
  }

  // Now check for header2 features

  if ((data->header2 & DMP_header2_bitmap_Accel_Accuracy) > 0) // case DMP_header2_bitmap_Accel_Accuracy:
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	885b      	ldrh	r3, [r3, #2]
 8004fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	dd4a      	ble.n	800504e <inv_icm20948_read_dmp_data+0x80e>
  {
    if (fifo_count < icm_20948_DMP_Accel_Accuracy_Bytes) // Check if we need to read the FIFO count again
 8004fb8:	89fb      	ldrh	r3, [r7, #14]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d80c      	bhi.n	8004fd8 <inv_icm20948_read_dmp_data+0x798>
    {
      result = ICM_20948_get_FIFO_count(pdev, &fifo_count);
 8004fbe:	f107 030e 	add.w	r3, r7, #14
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7fe fe3c 	bl	8003c42 <ICM_20948_get_FIFO_count>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	77fb      	strb	r3, [r7, #31]
      if (result != ICM_20948_Stat_Ok)
 8004fce:	7ffb      	ldrb	r3, [r7, #31]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <inv_icm20948_read_dmp_data+0x798>
        return result;
 8004fd4:	7ffb      	ldrb	r3, [r7, #31]
 8004fd6:	e206      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    }
    if (fifo_count < icm_20948_DMP_Accel_Accuracy_Bytes)
 8004fd8:	89fb      	ldrh	r3, [r7, #14]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d801      	bhi.n	8004fe2 <inv_icm20948_read_dmp_data+0x7a2>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8004fde:	230b      	movs	r3, #11
 8004fe0:	e201      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    aShort = 0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    result = ICM_20948_read_FIFO(pdev, &fifoBytes[0], icm_20948_DMP_Accel_Accuracy_Bytes);
 8004fe8:	f107 0310 	add.w	r3, r7, #16
 8004fec:	2202      	movs	r2, #2
 8004fee:	4619      	mov	r1, r3
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7fe fe68 	bl	8003cc6 <ICM_20948_read_FIFO>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 8004ffa:	7ffb      	ldrb	r3, [r7, #31]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <inv_icm20948_read_dmp_data+0x7c4>
      return result;
 8005000:	7ffb      	ldrb	r3, [r7, #31]
 8005002:	e1f0      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    for (int i = 0; i < icm_20948_DMP_Accel_Accuracy_Bytes; i++)
 8005004:	2300      	movs	r3, #0
 8005006:	63bb      	str	r3, [r7, #56]	; 0x38
 8005008:	e015      	b.n	8005036 <inv_icm20948_read_dmp_data+0x7f6>
    {
      aShort |= ((uint16_t)fifoBytes[i]) << (8 - (i * 8));
 800500a:	f107 0210 	add.w	r2, r7, #16
 800500e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005010:	4413      	add	r3, r2
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	461a      	mov	r2, r3
 8005016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005018:	f1c3 0301 	rsb	r3, r3, #1
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	fa02 f303 	lsl.w	r3, r2, r3
 8005022:	b21a      	sxth	r2, r3
 8005024:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8005028:	4313      	orrs	r3, r2
 800502a:	b21b      	sxth	r3, r3
 800502c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    for (int i = 0; i < icm_20948_DMP_Accel_Accuracy_Bytes; i++)
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005032:	3301      	adds	r3, #1
 8005034:	63bb      	str	r3, [r7, #56]	; 0x38
 8005036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005038:	2b01      	cmp	r3, #1
 800503a:	dde6      	ble.n	800500a <inv_icm20948_read_dmp_data+0x7ca>
    }
    data->Accel_Accuracy = aShort;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005042:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    fifo_count -= icm_20948_DMP_Accel_Accuracy_Bytes; // Decrement the count
 8005046:	89fb      	ldrh	r3, [r7, #14]
 8005048:	3b02      	subs	r3, #2
 800504a:	b29b      	uxth	r3, r3
 800504c:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header2 & DMP_header2_bitmap_Gyro_Accuracy) > 0) // case DMP_header2_bitmap_Gyro_Accuracy:
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	885b      	ldrh	r3, [r3, #2]
 8005052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005056:	2b00      	cmp	r3, #0
 8005058:	dd4a      	ble.n	80050f0 <inv_icm20948_read_dmp_data+0x8b0>
  {
    if (fifo_count < icm_20948_DMP_Gyro_Accuracy_Bytes) // Check if we need to read the FIFO count again
 800505a:	89fb      	ldrh	r3, [r7, #14]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d80c      	bhi.n	800507a <inv_icm20948_read_dmp_data+0x83a>
    {
      result = ICM_20948_get_FIFO_count(pdev, &fifo_count);
 8005060:	f107 030e 	add.w	r3, r7, #14
 8005064:	4619      	mov	r1, r3
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7fe fdeb 	bl	8003c42 <ICM_20948_get_FIFO_count>
 800506c:	4603      	mov	r3, r0
 800506e:	77fb      	strb	r3, [r7, #31]
      if (result != ICM_20948_Stat_Ok)
 8005070:	7ffb      	ldrb	r3, [r7, #31]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <inv_icm20948_read_dmp_data+0x83a>
        return result;
 8005076:	7ffb      	ldrb	r3, [r7, #31]
 8005078:	e1b5      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    }
    if (fifo_count < icm_20948_DMP_Gyro_Accuracy_Bytes)
 800507a:	89fb      	ldrh	r3, [r7, #14]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d801      	bhi.n	8005084 <inv_icm20948_read_dmp_data+0x844>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8005080:	230b      	movs	r3, #11
 8005082:	e1b0      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    aShort = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    result = ICM_20948_read_FIFO(pdev, &fifoBytes[0], icm_20948_DMP_Gyro_Accuracy_Bytes);
 800508a:	f107 0310 	add.w	r3, r7, #16
 800508e:	2202      	movs	r2, #2
 8005090:	4619      	mov	r1, r3
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fe fe17 	bl	8003cc6 <ICM_20948_read_FIFO>
 8005098:	4603      	mov	r3, r0
 800509a:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 800509c:	7ffb      	ldrb	r3, [r7, #31]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <inv_icm20948_read_dmp_data+0x866>
      return result;
 80050a2:	7ffb      	ldrb	r3, [r7, #31]
 80050a4:	e19f      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    for (int i = 0; i < icm_20948_DMP_Gyro_Accuracy_Bytes; i++)
 80050a6:	2300      	movs	r3, #0
 80050a8:	637b      	str	r3, [r7, #52]	; 0x34
 80050aa:	e015      	b.n	80050d8 <inv_icm20948_read_dmp_data+0x898>
    {
      aShort |= ((uint16_t)fifoBytes[i]) << (8 - (i * 8));
 80050ac:	f107 0210 	add.w	r2, r7, #16
 80050b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b2:	4413      	add	r3, r2
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	461a      	mov	r2, r3
 80050b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ba:	f1c3 0301 	rsb	r3, r3, #1
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	b21a      	sxth	r2, r3
 80050c6:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80050ca:	4313      	orrs	r3, r2
 80050cc:	b21b      	sxth	r3, r3
 80050ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    for (int i = 0; i < icm_20948_DMP_Gyro_Accuracy_Bytes; i++)
 80050d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d4:	3301      	adds	r3, #1
 80050d6:	637b      	str	r3, [r7, #52]	; 0x34
 80050d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050da:	2b01      	cmp	r3, #1
 80050dc:	dde6      	ble.n	80050ac <inv_icm20948_read_dmp_data+0x86c>
    }
    data->Gyro_Accuracy = aShort;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80050e4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    fifo_count -= icm_20948_DMP_Gyro_Accuracy_Bytes; // Decrement the count
 80050e8:	89fb      	ldrh	r3, [r7, #14]
 80050ea:	3b02      	subs	r3, #2
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header2 & DMP_header2_bitmap_Compass_Accuracy) > 0) // case DMP_header2_bitmap_Compass_Accuracy:
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	885b      	ldrh	r3, [r3, #2]
 80050f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	dd4a      	ble.n	8005192 <inv_icm20948_read_dmp_data+0x952>
  {
    if (fifo_count < icm_20948_DMP_Compass_Accuracy_Bytes) // Check if we need to read the FIFO count again
 80050fc:	89fb      	ldrh	r3, [r7, #14]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d80c      	bhi.n	800511c <inv_icm20948_read_dmp_data+0x8dc>
    {
      result = ICM_20948_get_FIFO_count(pdev, &fifo_count);
 8005102:	f107 030e 	add.w	r3, r7, #14
 8005106:	4619      	mov	r1, r3
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7fe fd9a 	bl	8003c42 <ICM_20948_get_FIFO_count>
 800510e:	4603      	mov	r3, r0
 8005110:	77fb      	strb	r3, [r7, #31]
      if (result != ICM_20948_Stat_Ok)
 8005112:	7ffb      	ldrb	r3, [r7, #31]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <inv_icm20948_read_dmp_data+0x8dc>
        return result;
 8005118:	7ffb      	ldrb	r3, [r7, #31]
 800511a:	e164      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    }
    if (fifo_count < icm_20948_DMP_Compass_Accuracy_Bytes)
 800511c:	89fb      	ldrh	r3, [r7, #14]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d801      	bhi.n	8005126 <inv_icm20948_read_dmp_data+0x8e6>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8005122:	230b      	movs	r3, #11
 8005124:	e15f      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    aShort = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    result = ICM_20948_read_FIFO(pdev, &fifoBytes[0], icm_20948_DMP_Compass_Accuracy_Bytes);
 800512c:	f107 0310 	add.w	r3, r7, #16
 8005130:	2202      	movs	r2, #2
 8005132:	4619      	mov	r1, r3
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7fe fdc6 	bl	8003cc6 <ICM_20948_read_FIFO>
 800513a:	4603      	mov	r3, r0
 800513c:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 800513e:	7ffb      	ldrb	r3, [r7, #31]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <inv_icm20948_read_dmp_data+0x908>
      return result;
 8005144:	7ffb      	ldrb	r3, [r7, #31]
 8005146:	e14e      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    for (int i = 0; i < icm_20948_DMP_Compass_Accuracy_Bytes; i++)
 8005148:	2300      	movs	r3, #0
 800514a:	633b      	str	r3, [r7, #48]	; 0x30
 800514c:	e015      	b.n	800517a <inv_icm20948_read_dmp_data+0x93a>
    {
      aShort |= ((uint16_t)fifoBytes[i]) << (8 - (i * 8));
 800514e:	f107 0210 	add.w	r2, r7, #16
 8005152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005154:	4413      	add	r3, r2
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	461a      	mov	r2, r3
 800515a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515c:	f1c3 0301 	rsb	r3, r3, #1
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	b21a      	sxth	r2, r3
 8005168:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800516c:	4313      	orrs	r3, r2
 800516e:	b21b      	sxth	r3, r3
 8005170:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    for (int i = 0; i < icm_20948_DMP_Compass_Accuracy_Bytes; i++)
 8005174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005176:	3301      	adds	r3, #1
 8005178:	633b      	str	r3, [r7, #48]	; 0x30
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	2b01      	cmp	r3, #1
 800517e:	dde6      	ble.n	800514e <inv_icm20948_read_dmp_data+0x90e>
    }
    data->Compass_Accuracy = aShort;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005186:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    fifo_count -= icm_20948_DMP_Compass_Accuracy_Bytes; // Decrement the count
 800518a:	89fb      	ldrh	r3, [r7, #14]
 800518c:	3b02      	subs	r3, #2
 800518e:	b29b      	uxth	r3, r3
 8005190:	81fb      	strh	r3, [r7, #14]
			data->Fsync_Delay_Time = aShort;
			fifo_count -= icm_20948_DMP_Fsync_Detection_Bytes; // Decrement the count
			*/
  }

  if ((data->header2 & DMP_header2_bitmap_Pickup) > 0) // case DMP_header2_bitmap_Pickup:
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	885b      	ldrh	r3, [r3, #2]
 8005196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800519a:	2b00      	cmp	r3, #0
 800519c:	dd4a      	ble.n	8005234 <inv_icm20948_read_dmp_data+0x9f4>
  {
    if (fifo_count < icm_20948_DMP_Pickup_Bytes) // Check if we need to read the FIFO count again
 800519e:	89fb      	ldrh	r3, [r7, #14]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d80c      	bhi.n	80051be <inv_icm20948_read_dmp_data+0x97e>
    {
      result = ICM_20948_get_FIFO_count(pdev, &fifo_count);
 80051a4:	f107 030e 	add.w	r3, r7, #14
 80051a8:	4619      	mov	r1, r3
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fe fd49 	bl	8003c42 <ICM_20948_get_FIFO_count>
 80051b0:	4603      	mov	r3, r0
 80051b2:	77fb      	strb	r3, [r7, #31]
      if (result != ICM_20948_Stat_Ok)
 80051b4:	7ffb      	ldrb	r3, [r7, #31]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <inv_icm20948_read_dmp_data+0x97e>
        return result;
 80051ba:	7ffb      	ldrb	r3, [r7, #31]
 80051bc:	e113      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    }
    if (fifo_count < icm_20948_DMP_Pickup_Bytes)
 80051be:	89fb      	ldrh	r3, [r7, #14]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d801      	bhi.n	80051c8 <inv_icm20948_read_dmp_data+0x988>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 80051c4:	230b      	movs	r3, #11
 80051c6:	e10e      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    aShort = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    result = ICM_20948_read_FIFO(pdev, &fifoBytes[0], icm_20948_DMP_Pickup_Bytes);
 80051ce:	f107 0310 	add.w	r3, r7, #16
 80051d2:	2202      	movs	r2, #2
 80051d4:	4619      	mov	r1, r3
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fe fd75 	bl	8003cc6 <ICM_20948_read_FIFO>
 80051dc:	4603      	mov	r3, r0
 80051de:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 80051e0:	7ffb      	ldrb	r3, [r7, #31]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <inv_icm20948_read_dmp_data+0x9aa>
      return result;
 80051e6:	7ffb      	ldrb	r3, [r7, #31]
 80051e8:	e0fd      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    for (int i = 0; i < icm_20948_DMP_Pickup_Bytes; i++)
 80051ea:	2300      	movs	r3, #0
 80051ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ee:	e015      	b.n	800521c <inv_icm20948_read_dmp_data+0x9dc>
    {
      aShort |= ((uint16_t)fifoBytes[i]) << (8 - (i * 8));
 80051f0:	f107 0210 	add.w	r2, r7, #16
 80051f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f6:	4413      	add	r3, r2
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fe:	f1c3 0301 	rsb	r3, r3, #1
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	b21a      	sxth	r2, r3
 800520a:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800520e:	4313      	orrs	r3, r2
 8005210:	b21b      	sxth	r3, r3
 8005212:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    for (int i = 0; i < icm_20948_DMP_Pickup_Bytes; i++)
 8005216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005218:	3301      	adds	r3, #1
 800521a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800521c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521e:	2b01      	cmp	r3, #1
 8005220:	dde6      	ble.n	80051f0 <inv_icm20948_read_dmp_data+0x9b0>
    }
    data->Pickup = aShort;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005228:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    fifo_count -= icm_20948_DMP_Pickup_Bytes; // Decrement the count
 800522c:	89fb      	ldrh	r3, [r7, #14]
 800522e:	3b02      	subs	r3, #2
 8005230:	b29b      	uxth	r3, r3
 8005232:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header2 & DMP_header2_bitmap_Activity_Recog) > 0) // case DMP_header2_bitmap_Activity_Recog:
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	885b      	ldrh	r3, [r3, #2]
 8005238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523c:	2b00      	cmp	r3, #0
 800523e:	dd3d      	ble.n	80052bc <inv_icm20948_read_dmp_data+0xa7c>
  {
    if (fifo_count < icm_20948_DMP_Activity_Recognition_Bytes) // Check if we need to read the FIFO count again
 8005240:	89fb      	ldrh	r3, [r7, #14]
 8005242:	2b05      	cmp	r3, #5
 8005244:	d80c      	bhi.n	8005260 <inv_icm20948_read_dmp_data+0xa20>
    {
      result = ICM_20948_get_FIFO_count(pdev, &fifo_count);
 8005246:	f107 030e 	add.w	r3, r7, #14
 800524a:	4619      	mov	r1, r3
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7fe fcf8 	bl	8003c42 <ICM_20948_get_FIFO_count>
 8005252:	4603      	mov	r3, r0
 8005254:	77fb      	strb	r3, [r7, #31]
      if (result != ICM_20948_Stat_Ok)
 8005256:	7ffb      	ldrb	r3, [r7, #31]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <inv_icm20948_read_dmp_data+0xa20>
        return result;
 800525c:	7ffb      	ldrb	r3, [r7, #31]
 800525e:	e0c2      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    }
    if (fifo_count < icm_20948_DMP_Activity_Recognition_Bytes)
 8005260:	89fb      	ldrh	r3, [r7, #14]
 8005262:	2b05      	cmp	r3, #5
 8005264:	d801      	bhi.n	800526a <inv_icm20948_read_dmp_data+0xa2a>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 8005266:	230b      	movs	r3, #11
 8005268:	e0bd      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    result = ICM_20948_read_FIFO(pdev, &fifoBytes[0], icm_20948_DMP_Activity_Recognition_Bytes);
 800526a:	f107 0310 	add.w	r3, r7, #16
 800526e:	2206      	movs	r2, #6
 8005270:	4619      	mov	r1, r3
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7fe fd27 	bl	8003cc6 <ICM_20948_read_FIFO>
 8005278:	4603      	mov	r3, r0
 800527a:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 800527c:	7ffb      	ldrb	r3, [r7, #31]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <inv_icm20948_read_dmp_data+0xa46>
      return result;
 8005282:	7ffb      	ldrb	r3, [r7, #31]
 8005284:	e0af      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    for (int i = 0; i < icm_20948_DMP_Activity_Recognition_Bytes; i++)
 8005286:	2300      	movs	r3, #0
 8005288:	62bb      	str	r3, [r7, #40]	; 0x28
 800528a:	e010      	b.n	80052ae <inv_icm20948_read_dmp_data+0xa6e>
    {
      data->Activity_Recognition.Bytes[DMP_Activity_Recognition_Byte_Ordering[i]] = fifoBytes[i];
 800528c:	4a58      	ldr	r2, [pc, #352]	; (80053f0 <inv_icm20948_read_dmp_data+0xbb0>)
 800528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005294:	f107 0110 	add.w	r1, r7, #16
 8005298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800529a:	440a      	add	r2, r1
 800529c:	7811      	ldrb	r1, [r2, #0]
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	4413      	add	r3, r2
 80052a2:	460a      	mov	r2, r1
 80052a4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    for (int i = 0; i < icm_20948_DMP_Activity_Recognition_Bytes; i++)
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	3301      	adds	r3, #1
 80052ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	2b05      	cmp	r3, #5
 80052b2:	ddeb      	ble.n	800528c <inv_icm20948_read_dmp_data+0xa4c>
    }
    fifo_count -= icm_20948_DMP_Activity_Recognition_Bytes; // Decrement the count
 80052b4:	89fb      	ldrh	r3, [r7, #14]
 80052b6:	3b06      	subs	r3, #6
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	81fb      	strh	r3, [r7, #14]
  }

  if ((data->header2 & DMP_header2_bitmap_Secondary_On_Off) > 0) // case DMP_header2_bitmap_Secondary_On_Off:
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	885b      	ldrh	r3, [r3, #2]
 80052c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	dd3d      	ble.n	8005344 <inv_icm20948_read_dmp_data+0xb04>
  {
    if (fifo_count < icm_20948_DMP_Secondary_On_Off_Bytes) // Check if we need to read the FIFO count again
 80052c8:	89fb      	ldrh	r3, [r7, #14]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d80c      	bhi.n	80052e8 <inv_icm20948_read_dmp_data+0xaa8>
    {
      result = ICM_20948_get_FIFO_count(pdev, &fifo_count);
 80052ce:	f107 030e 	add.w	r3, r7, #14
 80052d2:	4619      	mov	r1, r3
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7fe fcb4 	bl	8003c42 <ICM_20948_get_FIFO_count>
 80052da:	4603      	mov	r3, r0
 80052dc:	77fb      	strb	r3, [r7, #31]
      if (result != ICM_20948_Stat_Ok)
 80052de:	7ffb      	ldrb	r3, [r7, #31]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <inv_icm20948_read_dmp_data+0xaa8>
        return result;
 80052e4:	7ffb      	ldrb	r3, [r7, #31]
 80052e6:	e07e      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    }
    if (fifo_count < icm_20948_DMP_Secondary_On_Off_Bytes)
 80052e8:	89fb      	ldrh	r3, [r7, #14]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d801      	bhi.n	80052f2 <inv_icm20948_read_dmp_data+0xab2>
      return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 80052ee:	230b      	movs	r3, #11
 80052f0:	e079      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    result = ICM_20948_read_FIFO(pdev, &fifoBytes[0], icm_20948_DMP_Secondary_On_Off_Bytes);
 80052f2:	f107 0310 	add.w	r3, r7, #16
 80052f6:	2202      	movs	r2, #2
 80052f8:	4619      	mov	r1, r3
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fe fce3 	bl	8003cc6 <ICM_20948_read_FIFO>
 8005300:	4603      	mov	r3, r0
 8005302:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 8005304:	7ffb      	ldrb	r3, [r7, #31]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <inv_icm20948_read_dmp_data+0xace>
      return result;
 800530a:	7ffb      	ldrb	r3, [r7, #31]
 800530c:	e06b      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
    for (int i = 0; i < icm_20948_DMP_Secondary_On_Off_Bytes; i++)
 800530e:	2300      	movs	r3, #0
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
 8005312:	e010      	b.n	8005336 <inv_icm20948_read_dmp_data+0xaf6>
    {
      data->Secondary_On_Off.Bytes[DMP_Secondary_On_Off_Byte_Ordering[i]] = fifoBytes[i];
 8005314:	4a37      	ldr	r2, [pc, #220]	; (80053f4 <inv_icm20948_read_dmp_data+0xbb4>)
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800531c:	f107 0110 	add.w	r1, r7, #16
 8005320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005322:	440a      	add	r2, r1
 8005324:	7811      	ldrb	r1, [r2, #0]
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	4413      	add	r3, r2
 800532a:	460a      	mov	r2, r1
 800532c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
    for (int i = 0; i < icm_20948_DMP_Secondary_On_Off_Bytes; i++)
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	3301      	adds	r3, #1
 8005334:	627b      	str	r3, [r7, #36]	; 0x24
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	2b01      	cmp	r3, #1
 800533a:	ddeb      	ble.n	8005314 <inv_icm20948_read_dmp_data+0xad4>
    }
    fifo_count -= icm_20948_DMP_Secondary_On_Off_Bytes; // Decrement the count
 800533c:	89fb      	ldrh	r3, [r7, #14]
 800533e:	3b02      	subs	r3, #2
 8005340:	b29b      	uxth	r3, r3
 8005342:	81fb      	strh	r3, [r7, #14]
  }

  // Finally, extract the footer (gyro count)
  if (fifo_count < icm_20948_DMP_Footer_Bytes) // Check if we need to read the FIFO count again
 8005344:	89fb      	ldrh	r3, [r7, #14]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d80c      	bhi.n	8005364 <inv_icm20948_read_dmp_data+0xb24>
  {
    result = ICM_20948_get_FIFO_count(pdev, &fifo_count);
 800534a:	f107 030e 	add.w	r3, r7, #14
 800534e:	4619      	mov	r1, r3
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7fe fc76 	bl	8003c42 <ICM_20948_get_FIFO_count>
 8005356:	4603      	mov	r3, r0
 8005358:	77fb      	strb	r3, [r7, #31]
    if (result != ICM_20948_Stat_Ok)
 800535a:	7ffb      	ldrb	r3, [r7, #31]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <inv_icm20948_read_dmp_data+0xb24>
      return result;
 8005360:	7ffb      	ldrb	r3, [r7, #31]
 8005362:	e040      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
  }
  if (fifo_count < icm_20948_DMP_Footer_Bytes)
 8005364:	89fb      	ldrh	r3, [r7, #14]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d801      	bhi.n	800536e <inv_icm20948_read_dmp_data+0xb2e>
    return ICM_20948_Stat_FIFOIncompleteData; // Bail if not enough data is available
 800536a:	230b      	movs	r3, #11
 800536c:	e03b      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
  aShort = 0;
 800536e:	2300      	movs	r3, #0
 8005370:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
  result = ICM_20948_read_FIFO(pdev, &fifoBytes[0], icm_20948_DMP_Footer_Bytes);
 8005374:	f107 0310 	add.w	r3, r7, #16
 8005378:	2202      	movs	r2, #2
 800537a:	4619      	mov	r1, r3
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7fe fca2 	bl	8003cc6 <ICM_20948_read_FIFO>
 8005382:	4603      	mov	r3, r0
 8005384:	77fb      	strb	r3, [r7, #31]
  if (result != ICM_20948_Stat_Ok)
 8005386:	7ffb      	ldrb	r3, [r7, #31]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <inv_icm20948_read_dmp_data+0xb50>
    return result;
 800538c:	7ffb      	ldrb	r3, [r7, #31]
 800538e:	e02a      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>
  for (int i = 0; i < icm_20948_DMP_Footer_Bytes; i++)
 8005390:	2300      	movs	r3, #0
 8005392:	623b      	str	r3, [r7, #32]
 8005394:	e015      	b.n	80053c2 <inv_icm20948_read_dmp_data+0xb82>
  {
    aShort |= ((uint16_t)fifoBytes[i]) << (8 - (i * 8));
 8005396:	f107 0210 	add.w	r2, r7, #16
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	4413      	add	r3, r2
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	461a      	mov	r2, r3
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	f1c3 0301 	rsb	r3, r3, #1
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	fa02 f303 	lsl.w	r3, r2, r3
 80053ae:	b21a      	sxth	r2, r3
 80053b0:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80053b4:	4313      	orrs	r3, r2
 80053b6:	b21b      	sxth	r3, r3
 80053b8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
  for (int i = 0; i < icm_20948_DMP_Footer_Bytes; i++)
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	3301      	adds	r3, #1
 80053c0:	623b      	str	r3, [r7, #32]
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	dde6      	ble.n	8005396 <inv_icm20948_read_dmp_data+0xb56>
  }
  data->Footer = aShort;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80053ce:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
  fifo_count -= icm_20948_DMP_Footer_Bytes; // Decrement the count
 80053d2:	89fb      	ldrh	r3, [r7, #14]
 80053d4:	3b02      	subs	r3, #2
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	81fb      	strh	r3, [r7, #14]

  if (fifo_count > 0) // Check if there is still data waiting to be read
 80053da:	89fb      	ldrh	r3, [r7, #14]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <inv_icm20948_read_dmp_data+0xba4>
    return ICM_20948_Stat_FIFOMoreDataAvail;
 80053e0:	230c      	movs	r3, #12
 80053e2:	e000      	b.n	80053e6 <inv_icm20948_read_dmp_data+0xba6>

  return result;
 80053e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3778      	adds	r7, #120	; 0x78
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	0800c8a8 	.word	0x0800c8a8
 80053f4:	0800c8c0 	.word	0x0800c8c0

080053f8 <sensor_type_2_android_sensor>:

uint8_t sensor_type_2_android_sensor(enum inv_icm20948_sensor sensor)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	4603      	mov	r3, r0
 8005400:	71fb      	strb	r3, [r7, #7]
  switch (sensor)
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	2b13      	cmp	r3, #19
 8005406:	d853      	bhi.n	80054b0 <sensor_type_2_android_sensor+0xb8>
 8005408:	a201      	add	r2, pc, #4	; (adr r2, 8005410 <sensor_type_2_android_sensor+0x18>)
 800540a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540e:	bf00      	nop
 8005410:	08005461 	.word	0x08005461
 8005414:	08005465 	.word	0x08005465
 8005418:	08005469 	.word	0x08005469
 800541c:	0800546d 	.word	0x0800546d
 8005420:	08005471 	.word	0x08005471
 8005424:	08005475 	.word	0x08005475
 8005428:	08005479 	.word	0x08005479
 800542c:	0800547d 	.word	0x0800547d
 8005430:	08005481 	.word	0x08005481
 8005434:	08005485 	.word	0x08005485
 8005438:	08005489 	.word	0x08005489
 800543c:	0800548d 	.word	0x0800548d
 8005440:	08005491 	.word	0x08005491
 8005444:	08005495 	.word	0x08005495
 8005448:	08005499 	.word	0x08005499
 800544c:	0800549d 	.word	0x0800549d
 8005450:	080054a1 	.word	0x080054a1
 8005454:	080054a5 	.word	0x080054a5
 8005458:	080054a9 	.word	0x080054a9
 800545c:	080054ad 	.word	0x080054ad
  {
  case INV_ICM20948_SENSOR_ACCELEROMETER:
    return ANDROID_SENSOR_ACCELEROMETER; // 1
 8005460:	2301      	movs	r3, #1
 8005462:	e026      	b.n	80054b2 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_GYROSCOPE:
    return ANDROID_SENSOR_GYROSCOPE; // 4
 8005464:	2304      	movs	r3, #4
 8005466:	e024      	b.n	80054b2 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_RAW_ACCELEROMETER:
    return ANDROID_SENSOR_RAW_ACCELEROMETER; // 42
 8005468:	232a      	movs	r3, #42	; 0x2a
 800546a:	e022      	b.n	80054b2 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_RAW_GYROSCOPE:
    return ANDROID_SENSOR_RAW_GYROSCOPE; // 43
 800546c:	232b      	movs	r3, #43	; 0x2b
 800546e:	e020      	b.n	80054b2 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_MAGNETIC_FIELD_UNCALIBRATED:
    return ANDROID_SENSOR_MAGNETIC_FIELD_UNCALIBRATED; // 14
 8005470:	230e      	movs	r3, #14
 8005472:	e01e      	b.n	80054b2 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_GYROSCOPE_UNCALIBRATED:
    return ANDROID_SENSOR_GYROSCOPE_UNCALIBRATED; // 16
 8005474:	2310      	movs	r3, #16
 8005476:	e01c      	b.n	80054b2 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_ACTIVITY_CLASSIFICATON:
    return ANDROID_SENSOR_ACTIVITY_CLASSIFICATON; // 47
 8005478:	232f      	movs	r3, #47	; 0x2f
 800547a:	e01a      	b.n	80054b2 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_STEP_DETECTOR:
    return ANDROID_SENSOR_STEP_DETECTOR; // 18
 800547c:	2312      	movs	r3, #18
 800547e:	e018      	b.n	80054b2 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_STEP_COUNTER:
    return ANDROID_SENSOR_STEP_COUNTER; // 19
 8005480:	2313      	movs	r3, #19
 8005482:	e016      	b.n	80054b2 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_GAME_ROTATION_VECTOR:
    return ANDROID_SENSOR_GAME_ROTATION_VECTOR; // 15
 8005484:	230f      	movs	r3, #15
 8005486:	e014      	b.n	80054b2 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_ROTATION_VECTOR:
    return ANDROID_SENSOR_ROTATION_VECTOR; // 11
 8005488:	230b      	movs	r3, #11
 800548a:	e012      	b.n	80054b2 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_GEOMAGNETIC_ROTATION_VECTOR:
    return ANDROID_SENSOR_GEOMAGNETIC_ROTATION_VECTOR; // 20
 800548c:	2314      	movs	r3, #20
 800548e:	e010      	b.n	80054b2 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_GEOMAGNETIC_FIELD:
    return ANDROID_SENSOR_GEOMAGNETIC_FIELD; // 2
 8005490:	2302      	movs	r3, #2
 8005492:	e00e      	b.n	80054b2 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_WAKEUP_SIGNIFICANT_MOTION:
    return ANDROID_SENSOR_WAKEUP_SIGNIFICANT_MOTION; // 17
 8005494:	2311      	movs	r3, #17
 8005496:	e00c      	b.n	80054b2 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_FLIP_PICKUP:
    return ANDROID_SENSOR_FLIP_PICKUP; // 46
 8005498:	232e      	movs	r3, #46	; 0x2e
 800549a:	e00a      	b.n	80054b2 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_WAKEUP_TILT_DETECTOR:
    return ANDROID_SENSOR_WAKEUP_TILT_DETECTOR; // 41
 800549c:	2329      	movs	r3, #41	; 0x29
 800549e:	e008      	b.n	80054b2 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_GRAVITY:
    return ANDROID_SENSOR_GRAVITY; // 9
 80054a0:	2309      	movs	r3, #9
 80054a2:	e006      	b.n	80054b2 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_LINEAR_ACCELERATION:
    return ANDROID_SENSOR_LINEAR_ACCELERATION; // 10
 80054a4:	230a      	movs	r3, #10
 80054a6:	e004      	b.n	80054b2 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_ORIENTATION:
    return ANDROID_SENSOR_ORIENTATION; // 3
 80054a8:	2303      	movs	r3, #3
 80054aa:	e002      	b.n	80054b2 <sensor_type_2_android_sensor+0xba>
  case INV_ICM20948_SENSOR_B2S:
    return ANDROID_SENSOR_B2S; // 45
 80054ac:	232d      	movs	r3, #45	; 0x2d
 80054ae:	e000      	b.n	80054b2 <sensor_type_2_android_sensor+0xba>
  default:
    return ANDROID_SENSOR_NUM_MAX;
 80054b0:	232c      	movs	r3, #44	; 0x2c
  }
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bc80      	pop	{r7}
 80054ba:	4770      	bx	lr
 80054bc:	0000      	movs	r0, r0
	...

080054c0 <inv_icm20948_set_gyro_sf>:
    return INV_ICM20948_SENSOR_MAX;
  }
}

ICM_20948_Status_e inv_icm20948_set_gyro_sf(ICM_20948_Device_t *pdev, unsigned char div, int gyro_level)
{
 80054c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054c4:	b091      	sub	sp, #68	; 0x44
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	460b      	mov	r3, r1
 80054cc:	607a      	str	r2, [r7, #4]
 80054ce:	72fb      	strb	r3, [r7, #11]
  ICM_20948_Status_e result = ICM_20948_Stat_Ok;
 80054d0:	2300      	movs	r3, #0
 80054d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (pdev->_dmp_firmware_available == false)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	791b      	ldrb	r3, [r3, #4]
 80054da:	f083 0301 	eor.w	r3, r3, #1
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <inv_icm20948_set_gyro_sf+0x28>
    return ICM_20948_Stat_DMPNotSupported;
 80054e4:	2308      	movs	r3, #8
 80054e6:	e0c9      	b.n	800567c <inv_icm20948_set_gyro_sf+0x1bc>

  // gyro_level should be set to 4 regardless of fullscale, due to the addition of API dmp_icm20648_set_gyro_fsr()
  gyro_level = 4;
 80054e8:	2304      	movs	r3, #4
 80054ea:	607b      	str	r3, [r7, #4]

  // First read the TIMEBASE_CORRECTION_PLL register from Bank 1
  int8_t pll; // Signed. Typical value is 0x18
  result = ICM_20948_set_bank(pdev, 1);
 80054ec:	2101      	movs	r1, #1
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f7fd fb72 	bl	8002bd8 <ICM_20948_set_bank>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  result = ICM_20948_execute_r(pdev, AGB1_REG_TIMEBASE_CORRECTION_PLL, (uint8_t *)&pll, 1);
 80054fa:	f107 0217 	add.w	r2, r7, #23
 80054fe:	2301      	movs	r3, #1
 8005500:	2128      	movs	r1, #40	; 0x28
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f7fd f9f4 	bl	80028f0 <ICM_20948_execute_r>
 8005508:	4603      	mov	r3, r0
 800550a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (result != ICM_20948_Stat_Ok)
 800550e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <inv_icm20948_set_gyro_sf+0x5c>
  {
    return result;
 8005516:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800551a:	e0af      	b.n	800567c <inv_icm20948_set_gyro_sf+0x1bc>
  }

  pdev->_gyroSFpll = pll; // Record the PLL value so we can debug print it
 800551c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	731a      	strb	r2, [r3, #12]

  // Now calculate the Gyro SF using code taken from the InvenSense example (inv_icm20948_set_gyro_sf)

  long gyro_sf;

  unsigned long long const MagicConstant = 264446880937391LL;
 8005524:	a359      	add	r3, pc, #356	; (adr r3, 800568c <inv_icm20948_set_gyro_sf+0x1cc>)
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  unsigned long long const MagicConstantScale = 100000LL;
 800552e:	4a56      	ldr	r2, [pc, #344]	; (8005688 <inv_icm20948_set_gyro_sf+0x1c8>)
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	e9c7 2306 	strd	r2, r3, [r7, #24]
  unsigned long long ResultLL;

  if (pll & 0x80)
 8005538:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800553c:	2b00      	cmp	r3, #0
 800553e:	da3a      	bge.n	80055b6 <inv_icm20948_set_gyro_sf+0xf6>
  {
    ResultLL = (MagicConstant * (long long)(1ULL << gyro_level) * (1 + div) / (1270 - (pll & 0x7F)) / MagicConstantScale);
 8005540:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005544:	6879      	ldr	r1, [r7, #4]
 8005546:	f1a1 0420 	sub.w	r4, r1, #32
 800554a:	f1c1 0020 	rsb	r0, r1, #32
 800554e:	fa03 f901 	lsl.w	r9, r3, r1
 8005552:	fa02 f404 	lsl.w	r4, r2, r4
 8005556:	ea49 0904 	orr.w	r9, r9, r4
 800555a:	fa22 f000 	lsr.w	r0, r2, r0
 800555e:	ea49 0900 	orr.w	r9, r9, r0
 8005562:	fa02 f801 	lsl.w	r8, r2, r1
 8005566:	7afb      	ldrb	r3, [r7, #11]
 8005568:	3301      	adds	r3, #1
 800556a:	461a      	mov	r2, r3
 800556c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005570:	fb02 f009 	mul.w	r0, r2, r9
 8005574:	fb08 f103 	mul.w	r1, r8, r3
 8005578:	1844      	adds	r4, r0, r1
 800557a:	fba8 0102 	umull	r0, r1, r8, r2
 800557e:	1863      	adds	r3, r4, r1
 8005580:	4619      	mov	r1, r3
 8005582:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005586:	b2db      	uxtb	r3, r3
 8005588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800558c:	f5c3 639e 	rsb	r3, r3, #1264	; 0x4f0
 8005590:	3306      	adds	r3, #6
 8005592:	461a      	mov	r2, r3
 8005594:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005598:	f7fb fd80 	bl	800109c <__aeabi_uldivmod>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4610      	mov	r0, r2
 80055a2:	4619      	mov	r1, r3
 80055a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055a8:	f7fb fd78 	bl	800109c <__aeabi_uldivmod>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80055b4:	e033      	b.n	800561e <inv_icm20948_set_gyro_sf+0x15e>
  }
  else
  {
    ResultLL = (MagicConstant * (long long)(1ULL << gyro_level) * (1 + div) / (1270 + pll) / MagicConstantScale);
 80055b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	f1a1 0620 	sub.w	r6, r1, #32
 80055c0:	f1c1 0020 	rsb	r0, r1, #32
 80055c4:	fa03 f501 	lsl.w	r5, r3, r1
 80055c8:	fa02 f606 	lsl.w	r6, r2, r6
 80055cc:	4335      	orrs	r5, r6
 80055ce:	fa22 f000 	lsr.w	r0, r2, r0
 80055d2:	4305      	orrs	r5, r0
 80055d4:	fa02 f401 	lsl.w	r4, r2, r1
 80055d8:	7afb      	ldrb	r3, [r7, #11]
 80055da:	3301      	adds	r3, #1
 80055dc:	461a      	mov	r2, r3
 80055de:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80055e2:	fb02 f005 	mul.w	r0, r2, r5
 80055e6:	fb04 f103 	mul.w	r1, r4, r3
 80055ea:	1846      	adds	r6, r0, r1
 80055ec:	fba4 0102 	umull	r0, r1, r4, r2
 80055f0:	1873      	adds	r3, r6, r1
 80055f2:	4619      	mov	r1, r3
 80055f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80055f8:	f203 43f6 	addw	r3, r3, #1270	; 0x4f6
 80055fc:	461a      	mov	r2, r3
 80055fe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005602:	f7fb fd4b 	bl	800109c <__aeabi_uldivmod>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	4610      	mov	r0, r2
 800560c:	4619      	mov	r1, r3
 800560e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005612:	f7fb fd43 	bl	800109c <__aeabi_uldivmod>
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  /*
	    In above deprecated FP version, worst case arguments can produce a result that overflows a signed long.
	    Here, for such cases, we emulate the FP behavior of setting the result to the maximum positive value, as
	    the compiler's conversion of a u64 to an s32 is simple truncation of the u64's high half, sadly....
	*/
  if (ResultLL > 0x7FFFFFFF)
 800561e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005622:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8005626:	f04f 0100 	mov.w	r1, #0
 800562a:	4299      	cmp	r1, r3
 800562c:	bf08      	it	eq
 800562e:	4290      	cmpeq	r0, r2
 8005630:	d203      	bcs.n	800563a <inv_icm20948_set_gyro_sf+0x17a>
    gyro_sf = 0x7FFFFFFF;
 8005632:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005638:	e001      	b.n	800563e <inv_icm20948_set_gyro_sf+0x17e>
  else
    gyro_sf = (long)ResultLL;
 800563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563c:	63fb      	str	r3, [r7, #60]	; 0x3c

  pdev->_gyroSF = gyro_sf; // Record value so we can debug print it
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005642:	609a      	str	r2, [r3, #8]

  // Finally, write the value to the DMP GYRO_SF register
  unsigned char gyro_sf_reg[4];
  gyro_sf_reg[0] = (unsigned char)(gyro_sf >> 24);
 8005644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005646:	161b      	asrs	r3, r3, #24
 8005648:	b2db      	uxtb	r3, r3
 800564a:	743b      	strb	r3, [r7, #16]
  gyro_sf_reg[1] = (unsigned char)(gyro_sf >> 16);
 800564c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800564e:	141b      	asrs	r3, r3, #16
 8005650:	b2db      	uxtb	r3, r3
 8005652:	747b      	strb	r3, [r7, #17]
  gyro_sf_reg[2] = (unsigned char)(gyro_sf >> 8);
 8005654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005656:	121b      	asrs	r3, r3, #8
 8005658:	b2db      	uxtb	r3, r3
 800565a:	74bb      	strb	r3, [r7, #18]
  gyro_sf_reg[3] = (unsigned char)(gyro_sf & 0xff);
 800565c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565e:	b2db      	uxtb	r3, r3
 8005660:	74fb      	strb	r3, [r7, #19]
  result = inv_icm20948_write_mems(pdev, GYRO_SF, 4, (const unsigned char *)&gyro_sf_reg);
 8005662:	f107 0310 	add.w	r3, r7, #16
 8005666:	2204      	movs	r2, #4
 8005668:	f44f 7198 	mov.w	r1, #304	; 0x130
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7fe fce9 	bl	8004044 <inv_icm20948_write_mems>
 8005672:	4603      	mov	r3, r0
 8005674:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  return result;
 8005678:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800567c:	4618      	mov	r0, r3
 800567e:	3744      	adds	r7, #68	; 0x44
 8005680:	46bd      	mov	sp, r7
 8005682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005686:	bf00      	nop
 8005688:	000186a0 	.word	0x000186a0
 800568c:	566675af 	.word	0x566675af
 8005690:	0000f083 	.word	0x0000f083

08005694 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f003 f85d 	bl	800875c <asinf>
 80056a2:	4603      	mov	r3, r0
 80056a4:	4618      	mov	r0, r3
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
 80056b6:	6839      	ldr	r1, [r7, #0]
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f003 f875 	bl	80087a8 <atan2f>
 80056be:	4603      	mov	r3, r0
 80056c0:	4618      	mov	r0, r3
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80056c8:	b5b0      	push	{r4, r5, r7, lr}
 80056ca:	b0ce      	sub	sp, #312	; 0x138
 80056cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80056ce:	f000 fedf 	bl	8006490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80056d2:	f000 fc77 	bl	8005fc4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80056d6:	f000 fd33 	bl	8006140 <_ZL12MX_GPIO_Initv>
  MX_CAN_Init();
 80056da:	f000 fcc3 	bl	8006064 <_ZL11MX_CAN_Initv>
  MX_I2C2_Init();
 80056de:	f000 fcfb 	bl	80060d8 <_ZL12MX_I2C2_Initv>
  /* USER CODE BEGIN 2 */
  	TxHeader.IDE = CAN_ID_STD;
 80056e2:	4b32      	ldr	r3, [pc, #200]	; (80057ac <main+0xe4>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	609a      	str	r2, [r3, #8]
    TxHeader.StdId = 0x69;
 80056e8:	4b30      	ldr	r3, [pc, #192]	; (80057ac <main+0xe4>)
 80056ea:	2269      	movs	r2, #105	; 0x69
 80056ec:	601a      	str	r2, [r3, #0]
    TxHeader.RTR = CAN_RTR_DATA;
 80056ee:	4b2f      	ldr	r3, [pc, #188]	; (80057ac <main+0xe4>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	60da      	str	r2, [r3, #12]
    TxHeader.DLC = 8 ;
 80056f4:	4b2d      	ldr	r3, [pc, #180]	; (80057ac <main+0xe4>)
 80056f6:	2208      	movs	r2, #8
 80056f8:	611a      	str	r2, [r3, #16]

    CAN_FilterTypeDef canfilterconfig;
    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8005700:	2312      	movs	r3, #18
 8005702:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8005706:	2300      	movs	r3, #0
 8005708:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    canfilterconfig.FilterIdHigh = 0x446<<5;
 800570c:	f648 03c0 	movw	r3, #35008	; 0x88c0
 8005710:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    canfilterconfig.FilterIdLow = 0;
 8005714:	2300      	movs	r3, #0
 8005716:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    canfilterconfig.FilterMaskIdHigh = 0x446<<5;
 800571a:	f648 03c0 	movw	r3, #35008	; 0x88c0
 800571e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    canfilterconfig.FilterMaskIdLow = 0x0000;
 8005722:	2300      	movs	r3, #0
 8005724:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8005728:	2300      	movs	r3, #0
 800572a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800572e:	2301      	movs	r3, #1
 8005730:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8005734:	2314      	movs	r3, #20
 8005736:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800573a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800573e:	4619      	mov	r1, r3
 8005740:	481b      	ldr	r0, [pc, #108]	; (80057b0 <main+0xe8>)
 8005742:	f001 f826 	bl	8006792 <HAL_CAN_ConfigFilter>

    HAL_CAN_Start(&hcan);
 8005746:	481a      	ldr	r0, [pc, #104]	; (80057b0 <main+0xe8>)
 8005748:	f001 f8ec 	bl	8006924 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 800574c:	2102      	movs	r1, #2
 800574e:	4818      	ldr	r0, [pc, #96]	; (80057b0 <main+0xe8>)
 8005750:	f001 f92c 	bl	80069ac <HAL_CAN_ActivateNotification>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8005754:	2201      	movs	r2, #1
 8005756:	f44f 7180 	mov.w	r1, #256	; 0x100
 800575a:	4816      	ldr	r0, [pc, #88]	; (80057b4 <main+0xec>)
 800575c:	f001 fbb4 	bl	8006ec8 <HAL_GPIO_WritePin>
    HAL_Delay(250);
 8005760:	20fa      	movs	r0, #250	; 0xfa
 8005762:	f000 fef7 	bl	8006554 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8005766:	2200      	movs	r2, #0
 8005768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800576c:	4811      	ldr	r0, [pc, #68]	; (80057b4 <main+0xec>)
 800576e:	f001 fbab 	bl	8006ec8 <HAL_GPIO_WritePin>

    ICM_20948_I2C myICM;
 8005772:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005776:	4618      	mov	r0, r3
 8005778:	f7fc ff2c 	bl	80025d4 <_ZN13ICM_20948_I2CC1Ev>

    bool initialized = false;
 800577c:	2300      	movs	r3, #0
 800577e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    while (!initialized)
 8005782:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8005786:	2b00      	cmp	r3, #0
 8005788:	d116      	bne.n	80057b8 <main+0xf0>
     {
       myICM.begin();
 800578a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800578e:	4618      	mov	r0, r3
 8005790:	f7fc ff34 	bl	80025fc <_ZN13ICM_20948_I2C5beginEv>
       if (myICM.status != ICM_20948_Stat_Ok)
 8005794:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <main+0xdc>
       {
         HAL_Delay(50);
 800579c:	2032      	movs	r0, #50	; 0x32
 800579e:	f000 fed9 	bl	8006554 <HAL_Delay>
 80057a2:	e7ee      	b.n	8005782 <main+0xba>
       }
       else
       {
         initialized = true;
 80057a4:	2301      	movs	r3, #1
 80057a6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    while (!initialized)
 80057aa:	e7ea      	b.n	8005782 <main+0xba>
 80057ac:	20000108 	.word	0x20000108
 80057b0:	2000008c 	.word	0x2000008c
 80057b4:	40010c00 	.word	0x40010c00
       }
     }

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80057b8:	2201      	movs	r2, #1
 80057ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057be:	48b2      	ldr	r0, [pc, #712]	; (8005a88 <main+0x3c0>)
 80057c0:	f001 fb82 	bl	8006ec8 <HAL_GPIO_WritePin>
    HAL_Delay(250);
 80057c4:	20fa      	movs	r0, #250	; 0xfa
 80057c6:	f000 fec5 	bl	8006554 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80057ca:	2200      	movs	r2, #0
 80057cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057d0:	48ad      	ldr	r0, [pc, #692]	; (8005a88 <main+0x3c0>)
 80057d2:	f001 fb79 	bl	8006ec8 <HAL_GPIO_WritePin>

    // Initialize the digital motion processor
    success = true; // Use success to show if the DMP configuration was successful
 80057d6:	4bad      	ldr	r3, [pc, #692]	; (8005a8c <main+0x3c4>)
 80057d8:	2201      	movs	r2, #1
 80057da:	701a      	strb	r2, [r3, #0]
    success &= (myICM.initializeDMP() == ICM_20948_Stat_Ok);
 80057dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80057e0:	3304      	adds	r3, #4
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fc fa82 	bl	8001cec <_ZN9ICM_2094813initializeDMPEv>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	bf0c      	ite	eq
 80057ee:	2301      	moveq	r3, #1
 80057f0:	2300      	movne	r3, #0
 80057f2:	b2d9      	uxtb	r1, r3
 80057f4:	4ba5      	ldr	r3, [pc, #660]	; (8005a8c <main+0x3c4>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	460b      	mov	r3, r1
 80057fc:	4013      	ands	r3, r2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	bf14      	ite	ne
 8005802:	2301      	movne	r3, #1
 8005804:	2300      	moveq	r3, #0
 8005806:	b2da      	uxtb	r2, r3
 8005808:	4ba0      	ldr	r3, [pc, #640]	; (8005a8c <main+0x3c4>)
 800580a:	701a      	strb	r2, [r3, #0]

    success &= (myICM.enableDMPSensor(INV_ICM20948_SENSOR_ORIENTATION) == ICM_20948_Stat_Ok);
 800580c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005810:	3304      	adds	r3, #4
 8005812:	2201      	movs	r2, #1
 8005814:	2112      	movs	r1, #18
 8005816:	4618      	mov	r0, r3
 8005818:	f7fc f9c3 	bl	8001ba2 <_ZN9ICM_2094815enableDMPSensorE19inv_icm20948_sensorb>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	bf0c      	ite	eq
 8005822:	2301      	moveq	r3, #1
 8005824:	2300      	movne	r3, #0
 8005826:	b2d9      	uxtb	r1, r3
 8005828:	4b98      	ldr	r3, [pc, #608]	; (8005a8c <main+0x3c4>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	461a      	mov	r2, r3
 800582e:	460b      	mov	r3, r1
 8005830:	4013      	ands	r3, r2
 8005832:	2b00      	cmp	r3, #0
 8005834:	bf14      	ite	ne
 8005836:	2301      	movne	r3, #1
 8005838:	2300      	moveq	r3, #0
 800583a:	b2da      	uxtb	r2, r3
 800583c:	4b93      	ldr	r3, [pc, #588]	; (8005a8c <main+0x3c4>)
 800583e:	701a      	strb	r2, [r3, #0]
    success &= (myICM.enableDMPSensor(INV_ICM20948_SENSOR_RAW_GYROSCOPE) == ICM_20948_Stat_Ok);
 8005840:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005844:	3304      	adds	r3, #4
 8005846:	2201      	movs	r2, #1
 8005848:	2103      	movs	r1, #3
 800584a:	4618      	mov	r0, r3
 800584c:	f7fc f9a9 	bl	8001ba2 <_ZN9ICM_2094815enableDMPSensorE19inv_icm20948_sensorb>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	bf0c      	ite	eq
 8005856:	2301      	moveq	r3, #1
 8005858:	2300      	movne	r3, #0
 800585a:	b2d9      	uxtb	r1, r3
 800585c:	4b8b      	ldr	r3, [pc, #556]	; (8005a8c <main+0x3c4>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	461a      	mov	r2, r3
 8005862:	460b      	mov	r3, r1
 8005864:	4013      	ands	r3, r2
 8005866:	2b00      	cmp	r3, #0
 8005868:	bf14      	ite	ne
 800586a:	2301      	movne	r3, #1
 800586c:	2300      	moveq	r3, #0
 800586e:	b2da      	uxtb	r2, r3
 8005870:	4b86      	ldr	r3, [pc, #536]	; (8005a8c <main+0x3c4>)
 8005872:	701a      	strb	r2, [r3, #0]
    success &= (myICM.enableDMPSensor(INV_ICM20948_SENSOR_RAW_ACCELEROMETER) == ICM_20948_Stat_Ok);
 8005874:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005878:	3304      	adds	r3, #4
 800587a:	2201      	movs	r2, #1
 800587c:	2102      	movs	r1, #2
 800587e:	4618      	mov	r0, r3
 8005880:	f7fc f98f 	bl	8001ba2 <_ZN9ICM_2094815enableDMPSensorE19inv_icm20948_sensorb>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	bf0c      	ite	eq
 800588a:	2301      	moveq	r3, #1
 800588c:	2300      	movne	r3, #0
 800588e:	b2d9      	uxtb	r1, r3
 8005890:	4b7e      	ldr	r3, [pc, #504]	; (8005a8c <main+0x3c4>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	460b      	mov	r3, r1
 8005898:	4013      	ands	r3, r2
 800589a:	2b00      	cmp	r3, #0
 800589c:	bf14      	ite	ne
 800589e:	2301      	movne	r3, #1
 80058a0:	2300      	moveq	r3, #0
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	4b79      	ldr	r3, [pc, #484]	; (8005a8c <main+0x3c4>)
 80058a6:	701a      	strb	r2, [r3, #0]
    success &= (myICM.enableDMPSensor(INV_ICM20948_SENSOR_MAGNETIC_FIELD_UNCALIBRATED) == ICM_20948_Stat_Ok);
 80058a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80058ac:	3304      	adds	r3, #4
 80058ae:	2201      	movs	r2, #1
 80058b0:	2104      	movs	r1, #4
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fc f975 	bl	8001ba2 <_ZN9ICM_2094815enableDMPSensorE19inv_icm20948_sensorb>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	bf0c      	ite	eq
 80058be:	2301      	moveq	r3, #1
 80058c0:	2300      	movne	r3, #0
 80058c2:	b2d9      	uxtb	r1, r3
 80058c4:	4b71      	ldr	r3, [pc, #452]	; (8005a8c <main+0x3c4>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	461a      	mov	r2, r3
 80058ca:	460b      	mov	r3, r1
 80058cc:	4013      	ands	r3, r2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	bf14      	ite	ne
 80058d2:	2301      	movne	r3, #1
 80058d4:	2300      	moveq	r3, #0
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	4b6c      	ldr	r3, [pc, #432]	; (8005a8c <main+0x3c4>)
 80058da:	701a      	strb	r2, [r3, #0]

    success &= (myICM.setDMPODRrate(DMP_ODR_Reg_Quat9, 0) == ICM_20948_Stat_Ok); // Set to the maximum
 80058dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80058e0:	3304      	adds	r3, #4
 80058e2:	2200      	movs	r2, #0
 80058e4:	21a8      	movs	r1, #168	; 0xa8
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fc f9a2 	bl	8001c30 <_ZN9ICM_2094813setDMPODRrateE17DMP_ODR_Registersi>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	bf0c      	ite	eq
 80058f2:	2301      	moveq	r3, #1
 80058f4:	2300      	movne	r3, #0
 80058f6:	b2d9      	uxtb	r1, r3
 80058f8:	4b64      	ldr	r3, [pc, #400]	; (8005a8c <main+0x3c4>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	461a      	mov	r2, r3
 80058fe:	460b      	mov	r3, r1
 8005900:	4013      	ands	r3, r2
 8005902:	2b00      	cmp	r3, #0
 8005904:	bf14      	ite	ne
 8005906:	2301      	movne	r3, #1
 8005908:	2300      	moveq	r3, #0
 800590a:	b2da      	uxtb	r2, r3
 800590c:	4b5f      	ldr	r3, [pc, #380]	; (8005a8c <main+0x3c4>)
 800590e:	701a      	strb	r2, [r3, #0]
    success &= (myICM.setDMPODRrate(DMP_ODR_Reg_Accel, 0) == ICM_20948_Stat_Ok); // Set to the maximum
 8005910:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005914:	3304      	adds	r3, #4
 8005916:	2200      	movs	r2, #0
 8005918:	21be      	movs	r1, #190	; 0xbe
 800591a:	4618      	mov	r0, r3
 800591c:	f7fc f988 	bl	8001c30 <_ZN9ICM_2094813setDMPODRrateE17DMP_ODR_Registersi>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	bf0c      	ite	eq
 8005926:	2301      	moveq	r3, #1
 8005928:	2300      	movne	r3, #0
 800592a:	b2d9      	uxtb	r1, r3
 800592c:	4b57      	ldr	r3, [pc, #348]	; (8005a8c <main+0x3c4>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	461a      	mov	r2, r3
 8005932:	460b      	mov	r3, r1
 8005934:	4013      	ands	r3, r2
 8005936:	2b00      	cmp	r3, #0
 8005938:	bf14      	ite	ne
 800593a:	2301      	movne	r3, #1
 800593c:	2300      	moveq	r3, #0
 800593e:	b2da      	uxtb	r2, r3
 8005940:	4b52      	ldr	r3, [pc, #328]	; (8005a8c <main+0x3c4>)
 8005942:	701a      	strb	r2, [r3, #0]
    success &= (myICM.setDMPODRrate(DMP_ODR_Reg_Gyro, 0) == ICM_20948_Stat_Ok); // Set to the maximum
 8005944:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005948:	3304      	adds	r3, #4
 800594a:	2200      	movs	r2, #0
 800594c:	21ba      	movs	r1, #186	; 0xba
 800594e:	4618      	mov	r0, r3
 8005950:	f7fc f96e 	bl	8001c30 <_ZN9ICM_2094813setDMPODRrateE17DMP_ODR_Registersi>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	bf0c      	ite	eq
 800595a:	2301      	moveq	r3, #1
 800595c:	2300      	movne	r3, #0
 800595e:	b2d9      	uxtb	r1, r3
 8005960:	4b4a      	ldr	r3, [pc, #296]	; (8005a8c <main+0x3c4>)
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	461a      	mov	r2, r3
 8005966:	460b      	mov	r3, r1
 8005968:	4013      	ands	r3, r2
 800596a:	2b00      	cmp	r3, #0
 800596c:	bf14      	ite	ne
 800596e:	2301      	movne	r3, #1
 8005970:	2300      	moveq	r3, #0
 8005972:	b2da      	uxtb	r2, r3
 8005974:	4b45      	ldr	r3, [pc, #276]	; (8005a8c <main+0x3c4>)
 8005976:	701a      	strb	r2, [r3, #0]
    success &= (myICM.setDMPODRrate(DMP_ODR_Reg_Cpass, 0) == ICM_20948_Stat_Ok); // Set to the maximum
 8005978:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800597c:	3304      	adds	r3, #4
 800597e:	2200      	movs	r2, #0
 8005980:	21b6      	movs	r1, #182	; 0xb6
 8005982:	4618      	mov	r0, r3
 8005984:	f7fc f954 	bl	8001c30 <_ZN9ICM_2094813setDMPODRrateE17DMP_ODR_Registersi>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	bf0c      	ite	eq
 800598e:	2301      	moveq	r3, #1
 8005990:	2300      	movne	r3, #0
 8005992:	b2d9      	uxtb	r1, r3
 8005994:	4b3d      	ldr	r3, [pc, #244]	; (8005a8c <main+0x3c4>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	461a      	mov	r2, r3
 800599a:	460b      	mov	r3, r1
 800599c:	4013      	ands	r3, r2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	bf14      	ite	ne
 80059a2:	2301      	movne	r3, #1
 80059a4:	2300      	moveq	r3, #0
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	4b38      	ldr	r3, [pc, #224]	; (8005a8c <main+0x3c4>)
 80059aa:	701a      	strb	r2, [r3, #0]

    success &= (myICM.enableFIFO() == ICM_20948_Stat_Ok);
 80059ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80059b0:	3304      	adds	r3, #4
 80059b2:	2101      	movs	r1, #1
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fc f853 	bl	8001a60 <_ZN9ICM_2094810enableFIFOEb>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	bf0c      	ite	eq
 80059c0:	2301      	moveq	r3, #1
 80059c2:	2300      	movne	r3, #0
 80059c4:	b2d9      	uxtb	r1, r3
 80059c6:	4b31      	ldr	r3, [pc, #196]	; (8005a8c <main+0x3c4>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	461a      	mov	r2, r3
 80059cc:	460b      	mov	r3, r1
 80059ce:	4013      	ands	r3, r2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	bf14      	ite	ne
 80059d4:	2301      	movne	r3, #1
 80059d6:	2300      	moveq	r3, #0
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	4b2c      	ldr	r3, [pc, #176]	; (8005a8c <main+0x3c4>)
 80059dc:	701a      	strb	r2, [r3, #0]
    success &= (myICM.enableDMP() == ICM_20948_Stat_Ok);
 80059de:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80059e2:	3304      	adds	r3, #4
 80059e4:	2101      	movs	r1, #1
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fc f868 	bl	8001abc <_ZN9ICM_209489enableDMPEb>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	bf0c      	ite	eq
 80059f2:	2301      	moveq	r3, #1
 80059f4:	2300      	movne	r3, #0
 80059f6:	b2d9      	uxtb	r1, r3
 80059f8:	4b24      	ldr	r3, [pc, #144]	; (8005a8c <main+0x3c4>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	461a      	mov	r2, r3
 80059fe:	460b      	mov	r3, r1
 8005a00:	4013      	ands	r3, r2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	bf14      	ite	ne
 8005a06:	2301      	movne	r3, #1
 8005a08:	2300      	moveq	r3, #0
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	4b1f      	ldr	r3, [pc, #124]	; (8005a8c <main+0x3c4>)
 8005a0e:	701a      	strb	r2, [r3, #0]
    success &= (myICM.resetDMP() == ICM_20948_Stat_Ok);
 8005a10:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005a14:	3304      	adds	r3, #4
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fc f874 	bl	8001b04 <_ZN9ICM_209488resetDMPEv>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	bf0c      	ite	eq
 8005a22:	2301      	moveq	r3, #1
 8005a24:	2300      	movne	r3, #0
 8005a26:	b2d9      	uxtb	r1, r3
 8005a28:	4b18      	ldr	r3, [pc, #96]	; (8005a8c <main+0x3c4>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4013      	ands	r3, r2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	bf14      	ite	ne
 8005a36:	2301      	movne	r3, #1
 8005a38:	2300      	moveq	r3, #0
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	4b13      	ldr	r3, [pc, #76]	; (8005a8c <main+0x3c4>)
 8005a3e:	701a      	strb	r2, [r3, #0]
    success &= (myICM.resetFIFO() == ICM_20948_Stat_Ok);
 8005a40:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005a44:	3304      	adds	r3, #4
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fc f823 	bl	8001a92 <_ZN9ICM_209489resetFIFOEv>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	bf0c      	ite	eq
 8005a52:	2301      	moveq	r3, #1
 8005a54:	2300      	movne	r3, #0
 8005a56:	b2d9      	uxtb	r1, r3
 8005a58:	4b0c      	ldr	r3, [pc, #48]	; (8005a8c <main+0x3c4>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4013      	ands	r3, r2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	bf14      	ite	ne
 8005a66:	2301      	movne	r3, #1
 8005a68:	2300      	moveq	r3, #0
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	4b07      	ldr	r3, [pc, #28]	; (8005a8c <main+0x3c4>)
 8005a6e:	701a      	strb	r2, [r3, #0]

    if (success)
 8005a70:	4b06      	ldr	r3, [pc, #24]	; (8005a8c <main+0x3c4>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00b      	beq.n	8005a90 <main+0x3c8>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a7e:	4802      	ldr	r0, [pc, #8]	; (8005a88 <main+0x3c0>)
 8005a80:	f001 fa22 	bl	8006ec8 <HAL_GPIO_WritePin>
 8005a84:	e004      	b.n	8005a90 <main+0x3c8>
 8005a86:	bf00      	nop
 8005a88:	40010c00 	.word	0x40010c00
 8005a8c:	20000120 	.word	0x20000120
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  icm_20948_DMP_data_t data;
	    myICM.readDMPdataFromFIFO(&data);
 8005a90:	1d3a      	adds	r2, r7, #4
 8005a92:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005a96:	3304      	adds	r3, #4
 8005a98:	4611      	mov	r1, r2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fc f8e9 	bl	8001c72 <_ZN9ICM_2094819readDMPdataFromFIFOEP20icm_20948_DMP_data_t>

	    if ((myICM.status == ICM_20948_Stat_Ok) || (myICM.status == ICM_20948_Stat_FIFOMoreDataAvail)) // Was valid data available?
 8005aa0:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d004      	beq.n	8005ab2 <main+0x3ea>
 8005aa8:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8005aac:	2b0c      	cmp	r3, #12
 8005aae:	f040 8257 	bne.w	8005f60 <main+0x898>
	    {

	      if ((data.header & DMP_header_bitmap_Quat9) > 0) // We have asked for orientation data so we should receive Quat9
 8005ab2:	1d3b      	adds	r3, r7, #4
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f340 81ed 	ble.w	8005e9a <main+0x7d2>
	      {
	        q1 = ((double)data.Quat9.Data.Q1) / 1073741824.0; // Convert to double. Divide by 2^30
 8005ac0:	1d3b      	adds	r3, r7, #4
 8005ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7fa fc95 	bl	80003f4 <__aeabi_i2d>
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	4b9c      	ldr	r3, [pc, #624]	; (8005d40 <main+0x678>)
 8005ad0:	f7fa fe24 	bl	800071c <__aeabi_ddiv>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	499a      	ldr	r1, [pc, #616]	; (8005d44 <main+0x67c>)
 8005ada:	e9c1 2300 	strd	r2, r3, [r1]
	        q2 = ((double)data.Quat9.Data.Q2) / 1073741824.0; // Convert to double. Divide by 2^30
 8005ade:	1d3b      	adds	r3, r7, #4
 8005ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fa fc86 	bl	80003f4 <__aeabi_i2d>
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	4b94      	ldr	r3, [pc, #592]	; (8005d40 <main+0x678>)
 8005aee:	f7fa fe15 	bl	800071c <__aeabi_ddiv>
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	4994      	ldr	r1, [pc, #592]	; (8005d48 <main+0x680>)
 8005af8:	e9c1 2300 	strd	r2, r3, [r1]
	        q3 = ((double)data.Quat9.Data.Q3) / 1073741824.0; // Convert to double. Divide by 2^30
 8005afc:	1d3b      	adds	r3, r7, #4
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fa fc77 	bl	80003f4 <__aeabi_i2d>
 8005b06:	f04f 0200 	mov.w	r2, #0
 8005b0a:	4b8d      	ldr	r3, [pc, #564]	; (8005d40 <main+0x678>)
 8005b0c:	f7fa fe06 	bl	800071c <__aeabi_ddiv>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	498d      	ldr	r1, [pc, #564]	; (8005d4c <main+0x684>)
 8005b16:	e9c1 2300 	strd	r2, r3, [r1]
	        q0 = sqrt(1.0 - ((q1 * q1) + (q2 * q2) + (q3 * q3)));
 8005b1a:	4b8a      	ldr	r3, [pc, #552]	; (8005d44 <main+0x67c>)
 8005b1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b20:	4b88      	ldr	r3, [pc, #544]	; (8005d44 <main+0x67c>)
 8005b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b26:	f7fa fccf 	bl	80004c8 <__aeabi_dmul>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	4614      	mov	r4, r2
 8005b30:	461d      	mov	r5, r3
 8005b32:	4b85      	ldr	r3, [pc, #532]	; (8005d48 <main+0x680>)
 8005b34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b38:	4b83      	ldr	r3, [pc, #524]	; (8005d48 <main+0x680>)
 8005b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3e:	f7fa fcc3 	bl	80004c8 <__aeabi_dmul>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4620      	mov	r0, r4
 8005b48:	4629      	mov	r1, r5
 8005b4a:	f7fa fb07 	bl	800015c <__adddf3>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	4614      	mov	r4, r2
 8005b54:	461d      	mov	r5, r3
 8005b56:	4b7d      	ldr	r3, [pc, #500]	; (8005d4c <main+0x684>)
 8005b58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b5c:	4b7b      	ldr	r3, [pc, #492]	; (8005d4c <main+0x684>)
 8005b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b62:	f7fa fcb1 	bl	80004c8 <__aeabi_dmul>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	4629      	mov	r1, r5
 8005b6e:	f7fa faf5 	bl	800015c <__adddf3>
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	f04f 0000 	mov.w	r0, #0
 8005b7a:	4975      	ldr	r1, [pc, #468]	; (8005d50 <main+0x688>)
 8005b7c:	f7fa faec 	bl	8000158 <__aeabi_dsub>
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	4610      	mov	r0, r2
 8005b86:	4619      	mov	r1, r3
 8005b88:	f002 fdbc 	bl	8008704 <sqrt>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4970      	ldr	r1, [pc, #448]	; (8005d54 <main+0x68c>)
 8005b92:	e9c1 2300 	strd	r2, r3, [r1]
	        float q2sqr = q2 * q2;
 8005b96:	4b6c      	ldr	r3, [pc, #432]	; (8005d48 <main+0x680>)
 8005b98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b9c:	4b6a      	ldr	r3, [pc, #424]	; (8005d48 <main+0x680>)
 8005b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba2:	f7fa fc91 	bl	80004c8 <__aeabi_dmul>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4610      	mov	r0, r2
 8005bac:	4619      	mov	r1, r3
 8005bae:	f7fa ff3b 	bl	8000a28 <__aeabi_d2f>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130


		      // Roll
	          float t0 = +2.0 * (q0 * q1 + q2 * q3);
 8005bb8:	4b66      	ldr	r3, [pc, #408]	; (8005d54 <main+0x68c>)
 8005bba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bbe:	4b61      	ldr	r3, [pc, #388]	; (8005d44 <main+0x67c>)
 8005bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc4:	f7fa fc80 	bl	80004c8 <__aeabi_dmul>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4614      	mov	r4, r2
 8005bce:	461d      	mov	r5, r3
 8005bd0:	4b5d      	ldr	r3, [pc, #372]	; (8005d48 <main+0x680>)
 8005bd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bd6:	4b5d      	ldr	r3, [pc, #372]	; (8005d4c <main+0x684>)
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	f7fa fc74 	bl	80004c8 <__aeabi_dmul>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4620      	mov	r0, r4
 8005be6:	4629      	mov	r1, r5
 8005be8:	f7fa fab8 	bl	800015c <__adddf3>
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	f7fa fab0 	bl	800015c <__adddf3>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4610      	mov	r0, r2
 8005c02:	4619      	mov	r1, r3
 8005c04:	f7fa ff10 	bl	8000a28 <__aeabi_d2f>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	          float t1 = +1.0 - 2.0 * (q1 * q1 + q2sqr);
 8005c0e:	4b4d      	ldr	r3, [pc, #308]	; (8005d44 <main+0x67c>)
 8005c10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c14:	4b4b      	ldr	r3, [pc, #300]	; (8005d44 <main+0x67c>)
 8005c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1a:	f7fa fc55 	bl	80004c8 <__aeabi_dmul>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	4614      	mov	r4, r2
 8005c24:	461d      	mov	r5, r3
 8005c26:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8005c2a:	f7fa fbf5 	bl	8000418 <__aeabi_f2d>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4620      	mov	r0, r4
 8005c34:	4629      	mov	r1, r5
 8005c36:	f7fa fa91 	bl	800015c <__adddf3>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4610      	mov	r0, r2
 8005c40:	4619      	mov	r1, r3
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	f7fa fa89 	bl	800015c <__adddf3>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	f04f 0000 	mov.w	r0, #0
 8005c52:	493f      	ldr	r1, [pc, #252]	; (8005d50 <main+0x688>)
 8005c54:	f7fa fa80 	bl	8000158 <__aeabi_dsub>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4610      	mov	r0, r2
 8005c5e:	4619      	mov	r1, r3
 8005c60:	f7fa fee2 	bl	8000a28 <__aeabi_d2f>
 8005c64:	4603      	mov	r3, r0
 8005c66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	          roll = atan2(t0, t1) * 180.0 / M_PI;
 8005c6a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8005c6e:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8005c72:	f7ff fd1b 	bl	80056ac <_ZSt5atan2ff>
 8005c76:	4603      	mov	r3, r0
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fa fbcd 	bl	8000418 <__aeabi_f2d>
 8005c7e:	f04f 0200 	mov.w	r2, #0
 8005c82:	4b35      	ldr	r3, [pc, #212]	; (8005d58 <main+0x690>)
 8005c84:	f7fa fc20 	bl	80004c8 <__aeabi_dmul>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4619      	mov	r1, r3
 8005c90:	a329      	add	r3, pc, #164	; (adr r3, 8005d38 <main+0x670>)
 8005c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c96:	f7fa fd41 	bl	800071c <__aeabi_ddiv>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	f7fa fec1 	bl	8000a28 <__aeabi_d2f>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	4a2c      	ldr	r2, [pc, #176]	; (8005d5c <main+0x694>)
 8005caa:	6013      	str	r3, [r2, #0]

	          // Pitch
	          float t2 = +2.0 * (q0 * q2 - q3 * q1);
 8005cac:	4b29      	ldr	r3, [pc, #164]	; (8005d54 <main+0x68c>)
 8005cae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cb2:	4b25      	ldr	r3, [pc, #148]	; (8005d48 <main+0x680>)
 8005cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb8:	f7fa fc06 	bl	80004c8 <__aeabi_dmul>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4614      	mov	r4, r2
 8005cc2:	461d      	mov	r5, r3
 8005cc4:	4b21      	ldr	r3, [pc, #132]	; (8005d4c <main+0x684>)
 8005cc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cca:	4b1e      	ldr	r3, [pc, #120]	; (8005d44 <main+0x67c>)
 8005ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd0:	f7fa fbfa 	bl	80004c8 <__aeabi_dmul>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4620      	mov	r0, r4
 8005cda:	4629      	mov	r1, r5
 8005cdc:	f7fa fa3c 	bl	8000158 <__aeabi_dsub>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	f7fa fa36 	bl	800015c <__adddf3>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	f7fa fe96 	bl	8000a28 <__aeabi_d2f>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	          t2 = (t2 > 1.0) ? 1.0 : t2;
 8005d02:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005d06:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8005d0a:	f7fb f9a7 	bl	800105c <__aeabi_fcmpgt>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <main+0x652>
 8005d14:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005d18:	e001      	b.n	8005d1e <main+0x656>
 8005d1a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005d1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	          t2 = (t2 < -1.0) ? -1.0 : t2;
 8005d22:	490f      	ldr	r1, [pc, #60]	; (8005d60 <main+0x698>)
 8005d24:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8005d28:	f7fb f97a 	bl	8001020 <__aeabi_fcmplt>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d018      	beq.n	8005d64 <main+0x69c>
 8005d32:	4b0b      	ldr	r3, [pc, #44]	; (8005d60 <main+0x698>)
 8005d34:	e018      	b.n	8005d68 <main+0x6a0>
 8005d36:	bf00      	nop
 8005d38:	54442d18 	.word	0x54442d18
 8005d3c:	400921fb 	.word	0x400921fb
 8005d40:	41d00000 	.word	0x41d00000
 8005d44:	20000130 	.word	0x20000130
 8005d48:	20000138 	.word	0x20000138
 8005d4c:	20000140 	.word	0x20000140
 8005d50:	3ff00000 	.word	0x3ff00000
 8005d54:	20000128 	.word	0x20000128
 8005d58:	40668000 	.word	0x40668000
 8005d5c:	20000148 	.word	0x20000148
 8005d60:	bf800000 	.word	0xbf800000
 8005d64:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005d68:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	          pitch = asin(t2) * 180.0 / M_PI;
 8005d6c:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8005d70:	f7ff fc90 	bl	8005694 <_ZSt4asinf>
 8005d74:	4603      	mov	r3, r0
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fa fb4e 	bl	8000418 <__aeabi_f2d>
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	4b7f      	ldr	r3, [pc, #508]	; (8005f80 <main+0x8b8>)
 8005d82:	f7fa fba1 	bl	80004c8 <__aeabi_dmul>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	a37a      	add	r3, pc, #488	; (adr r3, 8005f78 <main+0x8b0>)
 8005d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d94:	f7fa fcc2 	bl	800071c <__aeabi_ddiv>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	4619      	mov	r1, r3
 8005da0:	f7fa fe42 	bl	8000a28 <__aeabi_d2f>
 8005da4:	4603      	mov	r3, r0
 8005da6:	4a77      	ldr	r2, [pc, #476]	; (8005f84 <main+0x8bc>)
 8005da8:	6013      	str	r3, [r2, #0]

	          // Yaw
	          float t3 = +2.0 * (q0 * q3 + q1 * q2);
 8005daa:	4b77      	ldr	r3, [pc, #476]	; (8005f88 <main+0x8c0>)
 8005dac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005db0:	4b76      	ldr	r3, [pc, #472]	; (8005f8c <main+0x8c4>)
 8005db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db6:	f7fa fb87 	bl	80004c8 <__aeabi_dmul>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4614      	mov	r4, r2
 8005dc0:	461d      	mov	r5, r3
 8005dc2:	4b73      	ldr	r3, [pc, #460]	; (8005f90 <main+0x8c8>)
 8005dc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005dc8:	4b72      	ldr	r3, [pc, #456]	; (8005f94 <main+0x8cc>)
 8005dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dce:	f7fa fb7b 	bl	80004c8 <__aeabi_dmul>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	4629      	mov	r1, r5
 8005dda:	f7fa f9bf 	bl	800015c <__adddf3>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	4610      	mov	r0, r2
 8005de4:	4619      	mov	r1, r3
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	f7fa f9b7 	bl	800015c <__adddf3>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	4610      	mov	r0, r2
 8005df4:	4619      	mov	r1, r3
 8005df6:	f7fa fe17 	bl	8000a28 <__aeabi_d2f>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	          float t4 = +1.0 - 2.0 * (q2sqr + q3 * q3);
 8005e00:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8005e04:	f7fa fb08 	bl	8000418 <__aeabi_f2d>
 8005e08:	4604      	mov	r4, r0
 8005e0a:	460d      	mov	r5, r1
 8005e0c:	4b5f      	ldr	r3, [pc, #380]	; (8005f8c <main+0x8c4>)
 8005e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e12:	4b5e      	ldr	r3, [pc, #376]	; (8005f8c <main+0x8c4>)
 8005e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e18:	f7fa fb56 	bl	80004c8 <__aeabi_dmul>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	4620      	mov	r0, r4
 8005e22:	4629      	mov	r1, r5
 8005e24:	f7fa f99a 	bl	800015c <__adddf3>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	4619      	mov	r1, r3
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	f7fa f992 	bl	800015c <__adddf3>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	f04f 0000 	mov.w	r0, #0
 8005e40:	4955      	ldr	r1, [pc, #340]	; (8005f98 <main+0x8d0>)
 8005e42:	f7fa f989 	bl	8000158 <__aeabi_dsub>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	f7fa fdeb 	bl	8000a28 <__aeabi_d2f>
 8005e52:	4603      	mov	r3, r0
 8005e54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	          yaw = atan2(t3, t4) * 180.0 / M_PI;
 8005e58:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8005e5c:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8005e60:	f7ff fc24 	bl	80056ac <_ZSt5atan2ff>
 8005e64:	4603      	mov	r3, r0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fa fad6 	bl	8000418 <__aeabi_f2d>
 8005e6c:	f04f 0200 	mov.w	r2, #0
 8005e70:	4b43      	ldr	r3, [pc, #268]	; (8005f80 <main+0x8b8>)
 8005e72:	f7fa fb29 	bl	80004c8 <__aeabi_dmul>
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	4610      	mov	r0, r2
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	a33e      	add	r3, pc, #248	; (adr r3, 8005f78 <main+0x8b0>)
 8005e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e84:	f7fa fc4a 	bl	800071c <__aeabi_ddiv>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	4619      	mov	r1, r3
 8005e90:	f7fa fdca 	bl	8000a28 <__aeabi_d2f>
 8005e94:	4603      	mov	r3, r0
 8005e96:	4a41      	ldr	r2, [pc, #260]	; (8005f9c <main+0x8d4>)
 8005e98:	6013      	str	r3, [r2, #0]
	      }

	      if ((data.header & DMP_header_bitmap_Accel) > 0) // Check for Accel
 8005e9a:	1d3b      	adds	r3, r7, #4
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	dd1a      	ble.n	8005edc <main+0x814>
	      {
	        ax = (float)data.Raw_Accel.Data.X; // Extract the raw accelerometer data
 8005ea6:	1d3b      	adds	r3, r7, #4
 8005ea8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fa fec5 	bl	8000c3c <__aeabi_i2f>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	4a3a      	ldr	r2, [pc, #232]	; (8005fa0 <main+0x8d8>)
 8005eb6:	6013      	str	r3, [r2, #0]
	        ay = (float)data.Raw_Accel.Data.Y;
 8005eb8:	1d3b      	adds	r3, r7, #4
 8005eba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fa febc 	bl	8000c3c <__aeabi_i2f>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	4a37      	ldr	r2, [pc, #220]	; (8005fa4 <main+0x8dc>)
 8005ec8:	6013      	str	r3, [r2, #0]
	        az = (float)data.Raw_Accel.Data.Z;
 8005eca:	1d3b      	adds	r3, r7, #4
 8005ecc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7fa feb3 	bl	8000c3c <__aeabi_i2f>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	4a33      	ldr	r2, [pc, #204]	; (8005fa8 <main+0x8e0>)
 8005eda:	6013      	str	r3, [r2, #0]
	      }

	      if ( (data.header & DMP_header_bitmap_Gyro) > 0 ) // Check for Gyro
 8005edc:	1d3b      	adds	r3, r7, #4
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	dd1a      	ble.n	8005f1e <main+0x856>
	      {
	        gx = (float)data.Raw_Gyro.Data.X; // Extract the raw gyro data
 8005ee8:	1d3b      	adds	r3, r7, #4
 8005eea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fa fea4 	bl	8000c3c <__aeabi_i2f>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	4a2d      	ldr	r2, [pc, #180]	; (8005fac <main+0x8e4>)
 8005ef8:	6013      	str	r3, [r2, #0]
	        gy = (float)data.Raw_Gyro.Data.Y;
 8005efa:	1d3b      	adds	r3, r7, #4
 8005efc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fa fe9b 	bl	8000c3c <__aeabi_i2f>
 8005f06:	4603      	mov	r3, r0
 8005f08:	4a29      	ldr	r2, [pc, #164]	; (8005fb0 <main+0x8e8>)
 8005f0a:	6013      	str	r3, [r2, #0]
	        gz = (float)data.Raw_Gyro.Data.Z;
 8005f0c:	1d3b      	adds	r3, r7, #4
 8005f0e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fa fe92 	bl	8000c3c <__aeabi_i2f>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	4a26      	ldr	r2, [pc, #152]	; (8005fb4 <main+0x8ec>)
 8005f1c:	6013      	str	r3, [r2, #0]
	      }

	      if ( (data.header & DMP_header_bitmap_Compass) > 0 ) // Check for Compass
 8005f1e:	1d3b      	adds	r3, r7, #4
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	dd1a      	ble.n	8005f60 <main+0x898>
	      {
	        mx = (float)data.Compass.Data.X; // Extract the compass data
 8005f2a:	1d3b      	adds	r3, r7, #4
 8005f2c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7fa fe83 	bl	8000c3c <__aeabi_i2f>
 8005f36:	4603      	mov	r3, r0
 8005f38:	4a1f      	ldr	r2, [pc, #124]	; (8005fb8 <main+0x8f0>)
 8005f3a:	6013      	str	r3, [r2, #0]
	        my = (float)data.Compass.Data.Y;
 8005f3c:	1d3b      	adds	r3, r7, #4
 8005f3e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fa fe7a 	bl	8000c3c <__aeabi_i2f>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	4a1c      	ldr	r2, [pc, #112]	; (8005fbc <main+0x8f4>)
 8005f4c:	6013      	str	r3, [r2, #0]
	        mz = (float)data.Compass.Data.Z;
 8005f4e:	1d3b      	adds	r3, r7, #4
 8005f50:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fa fe71 	bl	8000c3c <__aeabi_i2f>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	4a18      	ldr	r2, [pc, #96]	; (8005fc0 <main+0x8f8>)
 8005f5e:	6013      	str	r3, [r2, #0]
	      }
	    }

	    if (myICM.status != ICM_20948_Stat_FIFOMoreDataAvail) // If more data is available then we should read it right away - and not delay
 8005f60:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8005f64:	2b0c      	cmp	r3, #12
 8005f66:	f43f ad93 	beq.w	8005a90 <main+0x3c8>
	    {
	    	HAL_Delay(10);
 8005f6a:	200a      	movs	r0, #10
 8005f6c:	f000 faf2 	bl	8006554 <HAL_Delay>
	    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8005f70:	e58e      	b.n	8005a90 <main+0x3c8>
 8005f72:	bf00      	nop
 8005f74:	f3af 8000 	nop.w
 8005f78:	54442d18 	.word	0x54442d18
 8005f7c:	400921fb 	.word	0x400921fb
 8005f80:	40668000 	.word	0x40668000
 8005f84:	2000014c 	.word	0x2000014c
 8005f88:	20000128 	.word	0x20000128
 8005f8c:	20000140 	.word	0x20000140
 8005f90:	20000130 	.word	0x20000130
 8005f94:	20000138 	.word	0x20000138
 8005f98:	3ff00000 	.word	0x3ff00000
 8005f9c:	20000150 	.word	0x20000150
 8005fa0:	20000154 	.word	0x20000154
 8005fa4:	20000158 	.word	0x20000158
 8005fa8:	2000015c 	.word	0x2000015c
 8005fac:	20000160 	.word	0x20000160
 8005fb0:	20000164 	.word	0x20000164
 8005fb4:	20000168 	.word	0x20000168
 8005fb8:	2000016c 	.word	0x2000016c
 8005fbc:	20000170 	.word	0x20000170
 8005fc0:	20000174 	.word	0x20000174

08005fc4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b090      	sub	sp, #64	; 0x40
 8005fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005fca:	f107 0318 	add.w	r3, r7, #24
 8005fce:	2228      	movs	r2, #40	; 0x28
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f002 fffe 	bl	8008fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005fd8:	1d3b      	adds	r3, r7, #4
 8005fda:	2200      	movs	r2, #0
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	605a      	str	r2, [r3, #4]
 8005fe0:	609a      	str	r2, [r3, #8]
 8005fe2:	60da      	str	r2, [r3, #12]
 8005fe4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005fea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005ffc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006000:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006002:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006006:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006008:	f107 0318 	add.w	r3, r7, #24
 800600c:	4618      	mov	r0, r3
 800600e:	f001 ff73 	bl	8007ef8 <HAL_RCC_OscConfig>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	bf14      	ite	ne
 8006018:	2301      	movne	r3, #1
 800601a:	2300      	moveq	r3, #0
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8006022:	f000 f91d 	bl	8006260 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006026:	230f      	movs	r3, #15
 8006028:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800602a:	2302      	movs	r3, #2
 800602c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800602e:	2300      	movs	r3, #0
 8006030:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006038:	2300      	movs	r3, #0
 800603a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800603c:	1d3b      	adds	r3, r7, #4
 800603e:	2102      	movs	r1, #2
 8006040:	4618      	mov	r0, r3
 8006042:	f002 f9d9 	bl	80083f8 <HAL_RCC_ClockConfig>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	bf14      	ite	ne
 800604c:	2301      	movne	r3, #1
 800604e:	2300      	moveq	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8006056:	f000 f903 	bl	8006260 <Error_Handler>
  }
}
 800605a:	bf00      	nop
 800605c:	3740      	adds	r7, #64	; 0x40
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8006068:	4b19      	ldr	r3, [pc, #100]	; (80060d0 <_ZL11MX_CAN_Initv+0x6c>)
 800606a:	4a1a      	ldr	r2, [pc, #104]	; (80060d4 <_ZL11MX_CAN_Initv+0x70>)
 800606c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800606e:	4b18      	ldr	r3, [pc, #96]	; (80060d0 <_ZL11MX_CAN_Initv+0x6c>)
 8006070:	2202      	movs	r2, #2
 8006072:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8006074:	4b16      	ldr	r3, [pc, #88]	; (80060d0 <_ZL11MX_CAN_Initv+0x6c>)
 8006076:	2200      	movs	r2, #0
 8006078:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800607a:	4b15      	ldr	r3, [pc, #84]	; (80060d0 <_ZL11MX_CAN_Initv+0x6c>)
 800607c:	2200      	movs	r2, #0
 800607e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 8006080:	4b13      	ldr	r3, [pc, #76]	; (80060d0 <_ZL11MX_CAN_Initv+0x6c>)
 8006082:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8006086:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8006088:	4b11      	ldr	r3, [pc, #68]	; (80060d0 <_ZL11MX_CAN_Initv+0x6c>)
 800608a:	2200      	movs	r2, #0
 800608c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800608e:	4b10      	ldr	r3, [pc, #64]	; (80060d0 <_ZL11MX_CAN_Initv+0x6c>)
 8006090:	2200      	movs	r2, #0
 8006092:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8006094:	4b0e      	ldr	r3, [pc, #56]	; (80060d0 <_ZL11MX_CAN_Initv+0x6c>)
 8006096:	2200      	movs	r2, #0
 8006098:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800609a:	4b0d      	ldr	r3, [pc, #52]	; (80060d0 <_ZL11MX_CAN_Initv+0x6c>)
 800609c:	2200      	movs	r2, #0
 800609e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80060a0:	4b0b      	ldr	r3, [pc, #44]	; (80060d0 <_ZL11MX_CAN_Initv+0x6c>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80060a6:	4b0a      	ldr	r3, [pc, #40]	; (80060d0 <_ZL11MX_CAN_Initv+0x6c>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80060ac:	4b08      	ldr	r3, [pc, #32]	; (80060d0 <_ZL11MX_CAN_Initv+0x6c>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80060b2:	4807      	ldr	r0, [pc, #28]	; (80060d0 <_ZL11MX_CAN_Initv+0x6c>)
 80060b4:	f000 fa72 	bl	800659c <HAL_CAN_Init>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	bf14      	ite	ne
 80060be:	2301      	movne	r3, #1
 80060c0:	2300      	moveq	r3, #0
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <_ZL11MX_CAN_Initv+0x68>
  {
    Error_Handler();
 80060c8:	f000 f8ca 	bl	8006260 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80060cc:	bf00      	nop
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	2000008c 	.word	0x2000008c
 80060d4:	40006400 	.word	0x40006400

080060d8 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80060dc:	4b15      	ldr	r3, [pc, #84]	; (8006134 <_ZL12MX_I2C2_Initv+0x5c>)
 80060de:	4a16      	ldr	r2, [pc, #88]	; (8006138 <_ZL12MX_I2C2_Initv+0x60>)
 80060e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80060e2:	4b14      	ldr	r3, [pc, #80]	; (8006134 <_ZL12MX_I2C2_Initv+0x5c>)
 80060e4:	4a15      	ldr	r2, [pc, #84]	; (800613c <_ZL12MX_I2C2_Initv+0x64>)
 80060e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80060e8:	4b12      	ldr	r3, [pc, #72]	; (8006134 <_ZL12MX_I2C2_Initv+0x5c>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80060ee:	4b11      	ldr	r3, [pc, #68]	; (8006134 <_ZL12MX_I2C2_Initv+0x5c>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80060f4:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <_ZL12MX_I2C2_Initv+0x5c>)
 80060f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80060fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80060fc:	4b0d      	ldr	r3, [pc, #52]	; (8006134 <_ZL12MX_I2C2_Initv+0x5c>)
 80060fe:	2200      	movs	r2, #0
 8006100:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006102:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <_ZL12MX_I2C2_Initv+0x5c>)
 8006104:	2200      	movs	r2, #0
 8006106:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006108:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <_ZL12MX_I2C2_Initv+0x5c>)
 800610a:	2200      	movs	r2, #0
 800610c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800610e:	4b09      	ldr	r3, [pc, #36]	; (8006134 <_ZL12MX_I2C2_Initv+0x5c>)
 8006110:	2200      	movs	r2, #0
 8006112:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006114:	4807      	ldr	r0, [pc, #28]	; (8006134 <_ZL12MX_I2C2_Initv+0x5c>)
 8006116:	f000 feef 	bl	8006ef8 <HAL_I2C_Init>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	bf14      	ite	ne
 8006120:	2301      	movne	r3, #1
 8006122:	2300      	moveq	r3, #0
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 800612a:	f000 f899 	bl	8006260 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800612e:	bf00      	nop
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	200000b4 	.word	0x200000b4
 8006138:	40005800 	.word	0x40005800
 800613c:	000186a0 	.word	0x000186a0

08006140 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b088      	sub	sp, #32
 8006144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006146:	f107 0310 	add.w	r3, r7, #16
 800614a:	2200      	movs	r2, #0
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	605a      	str	r2, [r3, #4]
 8006150:	609a      	str	r2, [r3, #8]
 8006152:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006154:	4b1e      	ldr	r3, [pc, #120]	; (80061d0 <_ZL12MX_GPIO_Initv+0x90>)
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	4a1d      	ldr	r2, [pc, #116]	; (80061d0 <_ZL12MX_GPIO_Initv+0x90>)
 800615a:	f043 0320 	orr.w	r3, r3, #32
 800615e:	6193      	str	r3, [r2, #24]
 8006160:	4b1b      	ldr	r3, [pc, #108]	; (80061d0 <_ZL12MX_GPIO_Initv+0x90>)
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	f003 0320 	and.w	r3, r3, #32
 8006168:	60fb      	str	r3, [r7, #12]
 800616a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800616c:	4b18      	ldr	r3, [pc, #96]	; (80061d0 <_ZL12MX_GPIO_Initv+0x90>)
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	4a17      	ldr	r2, [pc, #92]	; (80061d0 <_ZL12MX_GPIO_Initv+0x90>)
 8006172:	f043 0308 	orr.w	r3, r3, #8
 8006176:	6193      	str	r3, [r2, #24]
 8006178:	4b15      	ldr	r3, [pc, #84]	; (80061d0 <_ZL12MX_GPIO_Initv+0x90>)
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	f003 0308 	and.w	r3, r3, #8
 8006180:	60bb      	str	r3, [r7, #8]
 8006182:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006184:	4b12      	ldr	r3, [pc, #72]	; (80061d0 <_ZL12MX_GPIO_Initv+0x90>)
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	4a11      	ldr	r2, [pc, #68]	; (80061d0 <_ZL12MX_GPIO_Initv+0x90>)
 800618a:	f043 0304 	orr.w	r3, r3, #4
 800618e:	6193      	str	r3, [r2, #24]
 8006190:	4b0f      	ldr	r3, [pc, #60]	; (80061d0 <_ZL12MX_GPIO_Initv+0x90>)
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	607b      	str	r3, [r7, #4]
 800619a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800619c:	2200      	movs	r2, #0
 800619e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061a2:	480c      	ldr	r0, [pc, #48]	; (80061d4 <_ZL12MX_GPIO_Initv+0x94>)
 80061a4:	f000 fe90 	bl	8006ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80061a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061ae:	2301      	movs	r3, #1
 80061b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061b6:	2302      	movs	r3, #2
 80061b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80061ba:	f107 0310 	add.w	r3, r7, #16
 80061be:	4619      	mov	r1, r3
 80061c0:	4804      	ldr	r0, [pc, #16]	; (80061d4 <_ZL12MX_GPIO_Initv+0x94>)
 80061c2:	f000 fcfd 	bl	8006bc0 <HAL_GPIO_Init>

}
 80061c6:	bf00      	nop
 80061c8:	3720      	adds	r7, #32
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	40021000 	.word	0x40021000
 80061d4:	40010c00 	.word	0x40010c00

080061d8 <I2C_write>:

/* USER CODE BEGIN 4 */
HAL_StatusTypeDef I2C_write(uint8_t slave_addr, uint8_t reg_addr,
    uint8_t length, uint8_t *data) {
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af04      	add	r7, sp, #16
 80061de:	603b      	str	r3, [r7, #0]
 80061e0:	4603      	mov	r3, r0
 80061e2:	71fb      	strb	r3, [r7, #7]
 80061e4:	460b      	mov	r3, r1
 80061e6:	71bb      	strb	r3, [r7, #6]
 80061e8:	4613      	mov	r3, r2
 80061ea:	717b      	strb	r3, [r7, #5]
  return HAL_I2C_Mem_Write(&hi2c2, slave_addr << 1, reg_addr,
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	b299      	uxth	r1, r3
 80061f4:	79bb      	ldrb	r3, [r7, #6]
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	797b      	ldrb	r3, [r7, #5]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	200a      	movs	r0, #10
 80061fe:	9002      	str	r0, [sp, #8]
 8006200:	9301      	str	r3, [sp, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	2301      	movs	r3, #1
 8006208:	4803      	ldr	r0, [pc, #12]	; (8006218 <I2C_write+0x40>)
 800620a:	f000 ffb9 	bl	8007180 <HAL_I2C_Mem_Write>
 800620e:	4603      	mov	r3, r0
  I2C_MEMADD_SIZE_8BIT, data, length, 10);
}
 8006210:	4618      	mov	r0, r3
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	200000b4 	.word	0x200000b4

0800621c <I2C_read>:

HAL_StatusTypeDef I2C_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t length,
    uint8_t *data) {
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af04      	add	r7, sp, #16
 8006222:	603b      	str	r3, [r7, #0]
 8006224:	4603      	mov	r3, r0
 8006226:	71fb      	strb	r3, [r7, #7]
 8006228:	460b      	mov	r3, r1
 800622a:	71bb      	strb	r3, [r7, #6]
 800622c:	4613      	mov	r3, r2
 800622e:	717b      	strb	r3, [r7, #5]
  return HAL_I2C_Mem_Read(&hi2c2, slave_addr << 1, reg_addr,
 8006230:	79fb      	ldrb	r3, [r7, #7]
 8006232:	b29b      	uxth	r3, r3
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	b299      	uxth	r1, r3
 8006238:	79bb      	ldrb	r3, [r7, #6]
 800623a:	b29a      	uxth	r2, r3
 800623c:	797b      	ldrb	r3, [r7, #5]
 800623e:	b29b      	uxth	r3, r3
 8006240:	200a      	movs	r0, #10
 8006242:	9002      	str	r0, [sp, #8]
 8006244:	9301      	str	r3, [sp, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	2301      	movs	r3, #1
 800624c:	4803      	ldr	r0, [pc, #12]	; (800625c <I2C_read+0x40>)
 800624e:	f001 f891 	bl	8007374 <HAL_I2C_Mem_Read>
 8006252:	4603      	mov	r3, r0
  I2C_MEMADD_SIZE_8BIT, data, length, 10);
}
 8006254:	4618      	mov	r0, r3
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	200000b4 	.word	0x200000b4

08006260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006264:	b672      	cpsid	i
}
 8006266:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006268:	e7fe      	b.n	8006268 <Error_Handler+0x8>
	...

0800626c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006272:	4b15      	ldr	r3, [pc, #84]	; (80062c8 <HAL_MspInit+0x5c>)
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	4a14      	ldr	r2, [pc, #80]	; (80062c8 <HAL_MspInit+0x5c>)
 8006278:	f043 0301 	orr.w	r3, r3, #1
 800627c:	6193      	str	r3, [r2, #24]
 800627e:	4b12      	ldr	r3, [pc, #72]	; (80062c8 <HAL_MspInit+0x5c>)
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	60bb      	str	r3, [r7, #8]
 8006288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800628a:	4b0f      	ldr	r3, [pc, #60]	; (80062c8 <HAL_MspInit+0x5c>)
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	4a0e      	ldr	r2, [pc, #56]	; (80062c8 <HAL_MspInit+0x5c>)
 8006290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006294:	61d3      	str	r3, [r2, #28]
 8006296:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <HAL_MspInit+0x5c>)
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800629e:	607b      	str	r3, [r7, #4]
 80062a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80062a2:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <HAL_MspInit+0x60>)
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	4a04      	ldr	r2, [pc, #16]	; (80062cc <HAL_MspInit+0x60>)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80062be:	bf00      	nop
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bc80      	pop	{r7}
 80062c6:	4770      	bx	lr
 80062c8:	40021000 	.word	0x40021000
 80062cc:	40010000 	.word	0x40010000

080062d0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b088      	sub	sp, #32
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062d8:	f107 0310 	add.w	r3, r7, #16
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	605a      	str	r2, [r3, #4]
 80062e2:	609a      	str	r2, [r3, #8]
 80062e4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a1c      	ldr	r2, [pc, #112]	; (800635c <HAL_CAN_MspInit+0x8c>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d131      	bne.n	8006354 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80062f0:	4b1b      	ldr	r3, [pc, #108]	; (8006360 <HAL_CAN_MspInit+0x90>)
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	4a1a      	ldr	r2, [pc, #104]	; (8006360 <HAL_CAN_MspInit+0x90>)
 80062f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80062fa:	61d3      	str	r3, [r2, #28]
 80062fc:	4b18      	ldr	r3, [pc, #96]	; (8006360 <HAL_CAN_MspInit+0x90>)
 80062fe:	69db      	ldr	r3, [r3, #28]
 8006300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006308:	4b15      	ldr	r3, [pc, #84]	; (8006360 <HAL_CAN_MspInit+0x90>)
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	4a14      	ldr	r2, [pc, #80]	; (8006360 <HAL_CAN_MspInit+0x90>)
 800630e:	f043 0304 	orr.w	r3, r3, #4
 8006312:	6193      	str	r3, [r2, #24]
 8006314:	4b12      	ldr	r3, [pc, #72]	; (8006360 <HAL_CAN_MspInit+0x90>)
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	60bb      	str	r3, [r7, #8]
 800631e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006320:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006324:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006326:	2300      	movs	r3, #0
 8006328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800632a:	2300      	movs	r3, #0
 800632c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800632e:	f107 0310 	add.w	r3, r7, #16
 8006332:	4619      	mov	r1, r3
 8006334:	480b      	ldr	r0, [pc, #44]	; (8006364 <HAL_CAN_MspInit+0x94>)
 8006336:	f000 fc43 	bl	8006bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800633a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800633e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006340:	2302      	movs	r3, #2
 8006342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006344:	2303      	movs	r3, #3
 8006346:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006348:	f107 0310 	add.w	r3, r7, #16
 800634c:	4619      	mov	r1, r3
 800634e:	4805      	ldr	r0, [pc, #20]	; (8006364 <HAL_CAN_MspInit+0x94>)
 8006350:	f000 fc36 	bl	8006bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8006354:	bf00      	nop
 8006356:	3720      	adds	r7, #32
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	40006400 	.word	0x40006400
 8006360:	40021000 	.word	0x40021000
 8006364:	40010800 	.word	0x40010800

08006368 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006370:	f107 0310 	add.w	r3, r7, #16
 8006374:	2200      	movs	r2, #0
 8006376:	601a      	str	r2, [r3, #0]
 8006378:	605a      	str	r2, [r3, #4]
 800637a:	609a      	str	r2, [r3, #8]
 800637c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a16      	ldr	r2, [pc, #88]	; (80063dc <HAL_I2C_MspInit+0x74>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d124      	bne.n	80063d2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006388:	4b15      	ldr	r3, [pc, #84]	; (80063e0 <HAL_I2C_MspInit+0x78>)
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	4a14      	ldr	r2, [pc, #80]	; (80063e0 <HAL_I2C_MspInit+0x78>)
 800638e:	f043 0308 	orr.w	r3, r3, #8
 8006392:	6193      	str	r3, [r2, #24]
 8006394:	4b12      	ldr	r3, [pc, #72]	; (80063e0 <HAL_I2C_MspInit+0x78>)
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	f003 0308 	and.w	r3, r3, #8
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80063a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80063a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80063a6:	2312      	movs	r3, #18
 80063a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80063aa:	2303      	movs	r3, #3
 80063ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063ae:	f107 0310 	add.w	r3, r7, #16
 80063b2:	4619      	mov	r1, r3
 80063b4:	480b      	ldr	r0, [pc, #44]	; (80063e4 <HAL_I2C_MspInit+0x7c>)
 80063b6:	f000 fc03 	bl	8006bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80063ba:	4b09      	ldr	r3, [pc, #36]	; (80063e0 <HAL_I2C_MspInit+0x78>)
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	4a08      	ldr	r2, [pc, #32]	; (80063e0 <HAL_I2C_MspInit+0x78>)
 80063c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80063c4:	61d3      	str	r3, [r2, #28]
 80063c6:	4b06      	ldr	r3, [pc, #24]	; (80063e0 <HAL_I2C_MspInit+0x78>)
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ce:	60bb      	str	r3, [r7, #8]
 80063d0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80063d2:	bf00      	nop
 80063d4:	3720      	adds	r7, #32
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	40005800 	.word	0x40005800
 80063e0:	40021000 	.word	0x40021000
 80063e4:	40010c00 	.word	0x40010c00

080063e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80063e8:	b480      	push	{r7}
 80063ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80063ec:	e7fe      	b.n	80063ec <NMI_Handler+0x4>

080063ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80063ee:	b480      	push	{r7}
 80063f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80063f2:	e7fe      	b.n	80063f2 <HardFault_Handler+0x4>

080063f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80063f8:	e7fe      	b.n	80063f8 <MemManage_Handler+0x4>

080063fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80063fa:	b480      	push	{r7}
 80063fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80063fe:	e7fe      	b.n	80063fe <BusFault_Handler+0x4>

08006400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006400:	b480      	push	{r7}
 8006402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006404:	e7fe      	b.n	8006404 <UsageFault_Handler+0x4>

08006406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006406:	b480      	push	{r7}
 8006408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800640a:	bf00      	nop
 800640c:	46bd      	mov	sp, r7
 800640e:	bc80      	pop	{r7}
 8006410:	4770      	bx	lr

08006412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006412:	b480      	push	{r7}
 8006414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006416:	bf00      	nop
 8006418:	46bd      	mov	sp, r7
 800641a:	bc80      	pop	{r7}
 800641c:	4770      	bx	lr

0800641e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800641e:	b480      	push	{r7}
 8006420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006422:	bf00      	nop
 8006424:	46bd      	mov	sp, r7
 8006426:	bc80      	pop	{r7}
 8006428:	4770      	bx	lr

0800642a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800642e:	f000 f875 	bl	800651c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006432:	bf00      	nop
 8006434:	bd80      	pop	{r7, pc}

08006436 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006436:	b480      	push	{r7}
 8006438:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800643a:	bf00      	nop
 800643c:	46bd      	mov	sp, r7
 800643e:	bc80      	pop	{r7}
 8006440:	4770      	bx	lr
	...

08006444 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006444:	480c      	ldr	r0, [pc, #48]	; (8006478 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006446:	490d      	ldr	r1, [pc, #52]	; (800647c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006448:	4a0d      	ldr	r2, [pc, #52]	; (8006480 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800644a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800644c:	e002      	b.n	8006454 <LoopCopyDataInit>

0800644e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800644e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006452:	3304      	adds	r3, #4

08006454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006458:	d3f9      	bcc.n	800644e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800645a:	4a0a      	ldr	r2, [pc, #40]	; (8006484 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800645c:	4c0a      	ldr	r4, [pc, #40]	; (8006488 <LoopFillZerobss+0x22>)
  movs r3, #0
 800645e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006460:	e001      	b.n	8006466 <LoopFillZerobss>

08006462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006464:	3204      	adds	r2, #4

08006466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006468:	d3fb      	bcc.n	8006462 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800646a:	f7ff ffe4 	bl	8006436 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800646e:	f002 fd7f 	bl	8008f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006472:	f7ff f929 	bl	80056c8 <main>
  bx lr
 8006476:	4770      	bx	lr
  ldr r0, =_sdata
 8006478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800647c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8006480:	0800c984 	.word	0x0800c984
  ldr r2, =_sbss
 8006484:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8006488:	2000017c 	.word	0x2000017c

0800648c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800648c:	e7fe      	b.n	800648c <ADC1_2_IRQHandler>
	...

08006490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006494:	4b08      	ldr	r3, [pc, #32]	; (80064b8 <HAL_Init+0x28>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a07      	ldr	r2, [pc, #28]	; (80064b8 <HAL_Init+0x28>)
 800649a:	f043 0310 	orr.w	r3, r3, #16
 800649e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064a0:	2003      	movs	r0, #3
 80064a2:	f000 fb59 	bl	8006b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80064a6:	200f      	movs	r0, #15
 80064a8:	f000 f808 	bl	80064bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80064ac:	f7ff fede 	bl	800626c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	40022000 	.word	0x40022000

080064bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80064c4:	4b12      	ldr	r3, [pc, #72]	; (8006510 <HAL_InitTick+0x54>)
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	4b12      	ldr	r3, [pc, #72]	; (8006514 <HAL_InitTick+0x58>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	4619      	mov	r1, r3
 80064ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80064d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 fb63 	bl	8006ba6 <HAL_SYSTICK_Config>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e00e      	b.n	8006508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b0f      	cmp	r3, #15
 80064ee:	d80a      	bhi.n	8006506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064f0:	2200      	movs	r2, #0
 80064f2:	6879      	ldr	r1, [r7, #4]
 80064f4:	f04f 30ff 	mov.w	r0, #4294967295
 80064f8:	f000 fb39 	bl	8006b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80064fc:	4a06      	ldr	r2, [pc, #24]	; (8006518 <HAL_InitTick+0x5c>)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	e000      	b.n	8006508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
}
 8006508:	4618      	mov	r0, r3
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20000000 	.word	0x20000000
 8006514:	20000008 	.word	0x20000008
 8006518:	20000004 	.word	0x20000004

0800651c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800651c:	b480      	push	{r7}
 800651e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006520:	4b05      	ldr	r3, [pc, #20]	; (8006538 <HAL_IncTick+0x1c>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	461a      	mov	r2, r3
 8006526:	4b05      	ldr	r3, [pc, #20]	; (800653c <HAL_IncTick+0x20>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4413      	add	r3, r2
 800652c:	4a03      	ldr	r2, [pc, #12]	; (800653c <HAL_IncTick+0x20>)
 800652e:	6013      	str	r3, [r2, #0]
}
 8006530:	bf00      	nop
 8006532:	46bd      	mov	sp, r7
 8006534:	bc80      	pop	{r7}
 8006536:	4770      	bx	lr
 8006538:	20000008 	.word	0x20000008
 800653c:	20000178 	.word	0x20000178

08006540 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006540:	b480      	push	{r7}
 8006542:	af00      	add	r7, sp, #0
  return uwTick;
 8006544:	4b02      	ldr	r3, [pc, #8]	; (8006550 <HAL_GetTick+0x10>)
 8006546:	681b      	ldr	r3, [r3, #0]
}
 8006548:	4618      	mov	r0, r3
 800654a:	46bd      	mov	sp, r7
 800654c:	bc80      	pop	{r7}
 800654e:	4770      	bx	lr
 8006550:	20000178 	.word	0x20000178

08006554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800655c:	f7ff fff0 	bl	8006540 <HAL_GetTick>
 8006560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656c:	d005      	beq.n	800657a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800656e:	4b0a      	ldr	r3, [pc, #40]	; (8006598 <HAL_Delay+0x44>)
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4413      	add	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800657a:	bf00      	nop
 800657c:	f7ff ffe0 	bl	8006540 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	429a      	cmp	r2, r3
 800658a:	d8f7      	bhi.n	800657c <HAL_Delay+0x28>
  {
  }
}
 800658c:	bf00      	nop
 800658e:	bf00      	nop
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	20000008 	.word	0x20000008

0800659c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e0ed      	b.n	800678a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d102      	bne.n	80065c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff fe88 	bl	80062d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0201 	orr.w	r2, r2, #1
 80065ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065d0:	f7ff ffb6 	bl	8006540 <HAL_GetTick>
 80065d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80065d6:	e012      	b.n	80065fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80065d8:	f7ff ffb2 	bl	8006540 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b0a      	cmp	r3, #10
 80065e4:	d90b      	bls.n	80065fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2205      	movs	r2, #5
 80065f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e0c5      	b.n	800678a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d0e5      	beq.n	80065d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 0202 	bic.w	r2, r2, #2
 800661a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800661c:	f7ff ff90 	bl	8006540 <HAL_GetTick>
 8006620:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006622:	e012      	b.n	800664a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006624:	f7ff ff8c 	bl	8006540 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b0a      	cmp	r3, #10
 8006630:	d90b      	bls.n	800664a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2205      	movs	r2, #5
 8006642:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e09f      	b.n	800678a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e5      	bne.n	8006624 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	7e1b      	ldrb	r3, [r3, #24]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d108      	bne.n	8006672 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	e007      	b.n	8006682 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006680:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	7e5b      	ldrb	r3, [r3, #25]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d108      	bne.n	800669c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	e007      	b.n	80066ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	7e9b      	ldrb	r3, [r3, #26]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d108      	bne.n	80066c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 0220 	orr.w	r2, r2, #32
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	e007      	b.n	80066d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0220 	bic.w	r2, r2, #32
 80066d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	7edb      	ldrb	r3, [r3, #27]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d108      	bne.n	80066f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0210 	bic.w	r2, r2, #16
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	e007      	b.n	8006700 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0210 	orr.w	r2, r2, #16
 80066fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	7f1b      	ldrb	r3, [r3, #28]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d108      	bne.n	800671a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f042 0208 	orr.w	r2, r2, #8
 8006716:	601a      	str	r2, [r3, #0]
 8006718:	e007      	b.n	800672a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 0208 	bic.w	r2, r2, #8
 8006728:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	7f5b      	ldrb	r3, [r3, #29]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d108      	bne.n	8006744 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f042 0204 	orr.w	r2, r2, #4
 8006740:	601a      	str	r2, [r3, #0]
 8006742:	e007      	b.n	8006754 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0204 	bic.w	r2, r2, #4
 8006752:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	431a      	orrs	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	ea42 0103 	orr.w	r1, r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	1e5a      	subs	r2, r3, #1
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8006792:	b480      	push	{r7}
 8006794:	b087      	sub	sp, #28
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80067a8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80067aa:	7cfb      	ldrb	r3, [r7, #19]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d003      	beq.n	80067b8 <HAL_CAN_ConfigFilter+0x26>
 80067b0:	7cfb      	ldrb	r3, [r7, #19]
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	f040 80aa 	bne.w	800690c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80067be:	f043 0201 	orr.w	r2, r3, #1
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	f003 031f 	and.w	r3, r3, #31
 80067d0:	2201      	movs	r2, #1
 80067d2:	fa02 f303 	lsl.w	r3, r2, r3
 80067d6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	43db      	mvns	r3, r3
 80067e2:	401a      	ands	r2, r3
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d123      	bne.n	800683a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	43db      	mvns	r3, r3
 80067fc:	401a      	ands	r2, r3
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006814:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	3248      	adds	r2, #72	; 0x48
 800681a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800682e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006830:	6979      	ldr	r1, [r7, #20]
 8006832:	3348      	adds	r3, #72	; 0x48
 8006834:	00db      	lsls	r3, r3, #3
 8006836:	440b      	add	r3, r1
 8006838:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d122      	bne.n	8006888 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	431a      	orrs	r2, r3
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006862:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	3248      	adds	r2, #72	; 0x48
 8006868:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800687c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800687e:	6979      	ldr	r1, [r7, #20]
 8006880:	3348      	adds	r3, #72	; 0x48
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	440b      	add	r3, r1
 8006886:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d109      	bne.n	80068a4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	43db      	mvns	r3, r3
 800689a:	401a      	ands	r2, r3
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80068a2:	e007      	b.n	80068b4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	431a      	orrs	r2, r3
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d109      	bne.n	80068d0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	43db      	mvns	r3, r3
 80068c6:	401a      	ands	r2, r3
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80068ce:	e007      	b.n	80068e0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	431a      	orrs	r2, r3
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d107      	bne.n	80068f8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	431a      	orrs	r2, r3
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068fe:	f023 0201 	bic.w	r2, r3, #1
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	e006      	b.n	800691a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
  }
}
 800691a:	4618      	mov	r0, r3
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	bc80      	pop	{r7}
 8006922:	4770      	bx	lr

08006924 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b01      	cmp	r3, #1
 8006936:	d12e      	bne.n	8006996 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2202      	movs	r2, #2
 800693c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0201 	bic.w	r2, r2, #1
 800694e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006950:	f7ff fdf6 	bl	8006540 <HAL_GetTick>
 8006954:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006956:	e012      	b.n	800697e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006958:	f7ff fdf2 	bl	8006540 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b0a      	cmp	r3, #10
 8006964:	d90b      	bls.n	800697e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2205      	movs	r2, #5
 8006976:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e012      	b.n	80069a4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e5      	bne.n	8006958 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	e006      	b.n	80069a4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
  }
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069bc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80069be:	7bfb      	ldrb	r3, [r7, #15]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d002      	beq.n	80069ca <HAL_CAN_ActivateNotification+0x1e>
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d109      	bne.n	80069de <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6959      	ldr	r1, [r3, #20]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	e006      	b.n	80069ec <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
  }
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bc80      	pop	{r7}
 80069f4:	4770      	bx	lr
	...

080069f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a08:	4b0c      	ldr	r3, [pc, #48]	; (8006a3c <__NVIC_SetPriorityGrouping+0x44>)
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a14:	4013      	ands	r3, r2
 8006a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a2a:	4a04      	ldr	r2, [pc, #16]	; (8006a3c <__NVIC_SetPriorityGrouping+0x44>)
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	60d3      	str	r3, [r2, #12]
}
 8006a30:	bf00      	nop
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bc80      	pop	{r7}
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	e000ed00 	.word	0xe000ed00

08006a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a40:	b480      	push	{r7}
 8006a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a44:	4b04      	ldr	r3, [pc, #16]	; (8006a58 <__NVIC_GetPriorityGrouping+0x18>)
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	0a1b      	lsrs	r3, r3, #8
 8006a4a:	f003 0307 	and.w	r3, r3, #7
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bc80      	pop	{r7}
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	e000ed00 	.word	0xe000ed00

08006a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	4603      	mov	r3, r0
 8006a64:	6039      	str	r1, [r7, #0]
 8006a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	db0a      	blt.n	8006a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	490c      	ldr	r1, [pc, #48]	; (8006aa8 <__NVIC_SetPriority+0x4c>)
 8006a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a7a:	0112      	lsls	r2, r2, #4
 8006a7c:	b2d2      	uxtb	r2, r2
 8006a7e:	440b      	add	r3, r1
 8006a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a84:	e00a      	b.n	8006a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	4908      	ldr	r1, [pc, #32]	; (8006aac <__NVIC_SetPriority+0x50>)
 8006a8c:	79fb      	ldrb	r3, [r7, #7]
 8006a8e:	f003 030f 	and.w	r3, r3, #15
 8006a92:	3b04      	subs	r3, #4
 8006a94:	0112      	lsls	r2, r2, #4
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	440b      	add	r3, r1
 8006a9a:	761a      	strb	r2, [r3, #24]
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bc80      	pop	{r7}
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	e000e100 	.word	0xe000e100
 8006aac:	e000ed00 	.word	0xe000ed00

08006ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b089      	sub	sp, #36	; 0x24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	f1c3 0307 	rsb	r3, r3, #7
 8006aca:	2b04      	cmp	r3, #4
 8006acc:	bf28      	it	cs
 8006ace:	2304      	movcs	r3, #4
 8006ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	2b06      	cmp	r3, #6
 8006ad8:	d902      	bls.n	8006ae0 <NVIC_EncodePriority+0x30>
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	3b03      	subs	r3, #3
 8006ade:	e000      	b.n	8006ae2 <NVIC_EncodePriority+0x32>
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	fa02 f303 	lsl.w	r3, r2, r3
 8006aee:	43da      	mvns	r2, r3
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	401a      	ands	r2, r3
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006af8:	f04f 31ff 	mov.w	r1, #4294967295
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	fa01 f303 	lsl.w	r3, r1, r3
 8006b02:	43d9      	mvns	r1, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b08:	4313      	orrs	r3, r2
         );
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3724      	adds	r7, #36	; 0x24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bc80      	pop	{r7}
 8006b12:	4770      	bx	lr

08006b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b24:	d301      	bcc.n	8006b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b26:	2301      	movs	r3, #1
 8006b28:	e00f      	b.n	8006b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b2a:	4a0a      	ldr	r2, [pc, #40]	; (8006b54 <SysTick_Config+0x40>)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b32:	210f      	movs	r1, #15
 8006b34:	f04f 30ff 	mov.w	r0, #4294967295
 8006b38:	f7ff ff90 	bl	8006a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b3c:	4b05      	ldr	r3, [pc, #20]	; (8006b54 <SysTick_Config+0x40>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b42:	4b04      	ldr	r3, [pc, #16]	; (8006b54 <SysTick_Config+0x40>)
 8006b44:	2207      	movs	r2, #7
 8006b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	e000e010 	.word	0xe000e010

08006b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7ff ff49 	bl	80069f8 <__NVIC_SetPriorityGrouping>
}
 8006b66:	bf00      	nop
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b086      	sub	sp, #24
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	4603      	mov	r3, r0
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	607a      	str	r2, [r7, #4]
 8006b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b80:	f7ff ff5e 	bl	8006a40 <__NVIC_GetPriorityGrouping>
 8006b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	68b9      	ldr	r1, [r7, #8]
 8006b8a:	6978      	ldr	r0, [r7, #20]
 8006b8c:	f7ff ff90 	bl	8006ab0 <NVIC_EncodePriority>
 8006b90:	4602      	mov	r2, r0
 8006b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b96:	4611      	mov	r1, r2
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7ff ff5f 	bl	8006a5c <__NVIC_SetPriority>
}
 8006b9e:	bf00      	nop
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b082      	sub	sp, #8
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7ff ffb0 	bl	8006b14 <SysTick_Config>
 8006bb4:	4603      	mov	r3, r0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
	...

08006bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b08b      	sub	sp, #44	; 0x2c
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006bd2:	e169      	b.n	8006ea8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69fa      	ldr	r2, [r7, #28]
 8006be4:	4013      	ands	r3, r2
 8006be6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	f040 8158 	bne.w	8006ea2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	4a9a      	ldr	r2, [pc, #616]	; (8006e60 <HAL_GPIO_Init+0x2a0>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d05e      	beq.n	8006cba <HAL_GPIO_Init+0xfa>
 8006bfc:	4a98      	ldr	r2, [pc, #608]	; (8006e60 <HAL_GPIO_Init+0x2a0>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d875      	bhi.n	8006cee <HAL_GPIO_Init+0x12e>
 8006c02:	4a98      	ldr	r2, [pc, #608]	; (8006e64 <HAL_GPIO_Init+0x2a4>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d058      	beq.n	8006cba <HAL_GPIO_Init+0xfa>
 8006c08:	4a96      	ldr	r2, [pc, #600]	; (8006e64 <HAL_GPIO_Init+0x2a4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d86f      	bhi.n	8006cee <HAL_GPIO_Init+0x12e>
 8006c0e:	4a96      	ldr	r2, [pc, #600]	; (8006e68 <HAL_GPIO_Init+0x2a8>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d052      	beq.n	8006cba <HAL_GPIO_Init+0xfa>
 8006c14:	4a94      	ldr	r2, [pc, #592]	; (8006e68 <HAL_GPIO_Init+0x2a8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d869      	bhi.n	8006cee <HAL_GPIO_Init+0x12e>
 8006c1a:	4a94      	ldr	r2, [pc, #592]	; (8006e6c <HAL_GPIO_Init+0x2ac>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d04c      	beq.n	8006cba <HAL_GPIO_Init+0xfa>
 8006c20:	4a92      	ldr	r2, [pc, #584]	; (8006e6c <HAL_GPIO_Init+0x2ac>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d863      	bhi.n	8006cee <HAL_GPIO_Init+0x12e>
 8006c26:	4a92      	ldr	r2, [pc, #584]	; (8006e70 <HAL_GPIO_Init+0x2b0>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d046      	beq.n	8006cba <HAL_GPIO_Init+0xfa>
 8006c2c:	4a90      	ldr	r2, [pc, #576]	; (8006e70 <HAL_GPIO_Init+0x2b0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d85d      	bhi.n	8006cee <HAL_GPIO_Init+0x12e>
 8006c32:	2b12      	cmp	r3, #18
 8006c34:	d82a      	bhi.n	8006c8c <HAL_GPIO_Init+0xcc>
 8006c36:	2b12      	cmp	r3, #18
 8006c38:	d859      	bhi.n	8006cee <HAL_GPIO_Init+0x12e>
 8006c3a:	a201      	add	r2, pc, #4	; (adr r2, 8006c40 <HAL_GPIO_Init+0x80>)
 8006c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c40:	08006cbb 	.word	0x08006cbb
 8006c44:	08006c95 	.word	0x08006c95
 8006c48:	08006ca7 	.word	0x08006ca7
 8006c4c:	08006ce9 	.word	0x08006ce9
 8006c50:	08006cef 	.word	0x08006cef
 8006c54:	08006cef 	.word	0x08006cef
 8006c58:	08006cef 	.word	0x08006cef
 8006c5c:	08006cef 	.word	0x08006cef
 8006c60:	08006cef 	.word	0x08006cef
 8006c64:	08006cef 	.word	0x08006cef
 8006c68:	08006cef 	.word	0x08006cef
 8006c6c:	08006cef 	.word	0x08006cef
 8006c70:	08006cef 	.word	0x08006cef
 8006c74:	08006cef 	.word	0x08006cef
 8006c78:	08006cef 	.word	0x08006cef
 8006c7c:	08006cef 	.word	0x08006cef
 8006c80:	08006cef 	.word	0x08006cef
 8006c84:	08006c9d 	.word	0x08006c9d
 8006c88:	08006cb1 	.word	0x08006cb1
 8006c8c:	4a79      	ldr	r2, [pc, #484]	; (8006e74 <HAL_GPIO_Init+0x2b4>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d013      	beq.n	8006cba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006c92:	e02c      	b.n	8006cee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	623b      	str	r3, [r7, #32]
          break;
 8006c9a:	e029      	b.n	8006cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	623b      	str	r3, [r7, #32]
          break;
 8006ca4:	e024      	b.n	8006cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	3308      	adds	r3, #8
 8006cac:	623b      	str	r3, [r7, #32]
          break;
 8006cae:	e01f      	b.n	8006cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	330c      	adds	r3, #12
 8006cb6:	623b      	str	r3, [r7, #32]
          break;
 8006cb8:	e01a      	b.n	8006cf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d102      	bne.n	8006cc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006cc2:	2304      	movs	r3, #4
 8006cc4:	623b      	str	r3, [r7, #32]
          break;
 8006cc6:	e013      	b.n	8006cf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d105      	bne.n	8006cdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006cd0:	2308      	movs	r3, #8
 8006cd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	69fa      	ldr	r2, [r7, #28]
 8006cd8:	611a      	str	r2, [r3, #16]
          break;
 8006cda:	e009      	b.n	8006cf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006cdc:	2308      	movs	r3, #8
 8006cde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	69fa      	ldr	r2, [r7, #28]
 8006ce4:	615a      	str	r2, [r3, #20]
          break;
 8006ce6:	e003      	b.n	8006cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	623b      	str	r3, [r7, #32]
          break;
 8006cec:	e000      	b.n	8006cf0 <HAL_GPIO_Init+0x130>
          break;
 8006cee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	2bff      	cmp	r3, #255	; 0xff
 8006cf4:	d801      	bhi.n	8006cfa <HAL_GPIO_Init+0x13a>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	e001      	b.n	8006cfe <HAL_GPIO_Init+0x13e>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	2bff      	cmp	r3, #255	; 0xff
 8006d04:	d802      	bhi.n	8006d0c <HAL_GPIO_Init+0x14c>
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	e002      	b.n	8006d12 <HAL_GPIO_Init+0x152>
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	3b08      	subs	r3, #8
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	210f      	movs	r1, #15
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d20:	43db      	mvns	r3, r3
 8006d22:	401a      	ands	r2, r3
 8006d24:	6a39      	ldr	r1, [r7, #32]
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	fa01 f303 	lsl.w	r3, r1, r3
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 80b1 	beq.w	8006ea2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006d40:	4b4d      	ldr	r3, [pc, #308]	; (8006e78 <HAL_GPIO_Init+0x2b8>)
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	4a4c      	ldr	r2, [pc, #304]	; (8006e78 <HAL_GPIO_Init+0x2b8>)
 8006d46:	f043 0301 	orr.w	r3, r3, #1
 8006d4a:	6193      	str	r3, [r2, #24]
 8006d4c:	4b4a      	ldr	r3, [pc, #296]	; (8006e78 <HAL_GPIO_Init+0x2b8>)
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	60bb      	str	r3, [r7, #8]
 8006d56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006d58:	4a48      	ldr	r2, [pc, #288]	; (8006e7c <HAL_GPIO_Init+0x2bc>)
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	089b      	lsrs	r3, r3, #2
 8006d5e:	3302      	adds	r3, #2
 8006d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	f003 0303 	and.w	r3, r3, #3
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	220f      	movs	r2, #15
 8006d70:	fa02 f303 	lsl.w	r3, r2, r3
 8006d74:	43db      	mvns	r3, r3
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4013      	ands	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a40      	ldr	r2, [pc, #256]	; (8006e80 <HAL_GPIO_Init+0x2c0>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d013      	beq.n	8006dac <HAL_GPIO_Init+0x1ec>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a3f      	ldr	r2, [pc, #252]	; (8006e84 <HAL_GPIO_Init+0x2c4>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d00d      	beq.n	8006da8 <HAL_GPIO_Init+0x1e8>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a3e      	ldr	r2, [pc, #248]	; (8006e88 <HAL_GPIO_Init+0x2c8>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d007      	beq.n	8006da4 <HAL_GPIO_Init+0x1e4>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a3d      	ldr	r2, [pc, #244]	; (8006e8c <HAL_GPIO_Init+0x2cc>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d101      	bne.n	8006da0 <HAL_GPIO_Init+0x1e0>
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e006      	b.n	8006dae <HAL_GPIO_Init+0x1ee>
 8006da0:	2304      	movs	r3, #4
 8006da2:	e004      	b.n	8006dae <HAL_GPIO_Init+0x1ee>
 8006da4:	2302      	movs	r3, #2
 8006da6:	e002      	b.n	8006dae <HAL_GPIO_Init+0x1ee>
 8006da8:	2301      	movs	r3, #1
 8006daa:	e000      	b.n	8006dae <HAL_GPIO_Init+0x1ee>
 8006dac:	2300      	movs	r3, #0
 8006dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006db0:	f002 0203 	and.w	r2, r2, #3
 8006db4:	0092      	lsls	r2, r2, #2
 8006db6:	4093      	lsls	r3, r2
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006dbe:	492f      	ldr	r1, [pc, #188]	; (8006e7c <HAL_GPIO_Init+0x2bc>)
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	089b      	lsrs	r3, r3, #2
 8006dc4:	3302      	adds	r3, #2
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d006      	beq.n	8006de6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006dd8:	4b2d      	ldr	r3, [pc, #180]	; (8006e90 <HAL_GPIO_Init+0x2d0>)
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	492c      	ldr	r1, [pc, #176]	; (8006e90 <HAL_GPIO_Init+0x2d0>)
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	600b      	str	r3, [r1, #0]
 8006de4:	e006      	b.n	8006df4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006de6:	4b2a      	ldr	r3, [pc, #168]	; (8006e90 <HAL_GPIO_Init+0x2d0>)
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	43db      	mvns	r3, r3
 8006dee:	4928      	ldr	r1, [pc, #160]	; (8006e90 <HAL_GPIO_Init+0x2d0>)
 8006df0:	4013      	ands	r3, r2
 8006df2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d006      	beq.n	8006e0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006e00:	4b23      	ldr	r3, [pc, #140]	; (8006e90 <HAL_GPIO_Init+0x2d0>)
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	4922      	ldr	r1, [pc, #136]	; (8006e90 <HAL_GPIO_Init+0x2d0>)
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	604b      	str	r3, [r1, #4]
 8006e0c:	e006      	b.n	8006e1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006e0e:	4b20      	ldr	r3, [pc, #128]	; (8006e90 <HAL_GPIO_Init+0x2d0>)
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	43db      	mvns	r3, r3
 8006e16:	491e      	ldr	r1, [pc, #120]	; (8006e90 <HAL_GPIO_Init+0x2d0>)
 8006e18:	4013      	ands	r3, r2
 8006e1a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d006      	beq.n	8006e36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006e28:	4b19      	ldr	r3, [pc, #100]	; (8006e90 <HAL_GPIO_Init+0x2d0>)
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	4918      	ldr	r1, [pc, #96]	; (8006e90 <HAL_GPIO_Init+0x2d0>)
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	608b      	str	r3, [r1, #8]
 8006e34:	e006      	b.n	8006e44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006e36:	4b16      	ldr	r3, [pc, #88]	; (8006e90 <HAL_GPIO_Init+0x2d0>)
 8006e38:	689a      	ldr	r2, [r3, #8]
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	43db      	mvns	r3, r3
 8006e3e:	4914      	ldr	r1, [pc, #80]	; (8006e90 <HAL_GPIO_Init+0x2d0>)
 8006e40:	4013      	ands	r3, r2
 8006e42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d021      	beq.n	8006e94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006e50:	4b0f      	ldr	r3, [pc, #60]	; (8006e90 <HAL_GPIO_Init+0x2d0>)
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	490e      	ldr	r1, [pc, #56]	; (8006e90 <HAL_GPIO_Init+0x2d0>)
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	60cb      	str	r3, [r1, #12]
 8006e5c:	e021      	b.n	8006ea2 <HAL_GPIO_Init+0x2e2>
 8006e5e:	bf00      	nop
 8006e60:	10320000 	.word	0x10320000
 8006e64:	10310000 	.word	0x10310000
 8006e68:	10220000 	.word	0x10220000
 8006e6c:	10210000 	.word	0x10210000
 8006e70:	10120000 	.word	0x10120000
 8006e74:	10110000 	.word	0x10110000
 8006e78:	40021000 	.word	0x40021000
 8006e7c:	40010000 	.word	0x40010000
 8006e80:	40010800 	.word	0x40010800
 8006e84:	40010c00 	.word	0x40010c00
 8006e88:	40011000 	.word	0x40011000
 8006e8c:	40011400 	.word	0x40011400
 8006e90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006e94:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <HAL_GPIO_Init+0x304>)
 8006e96:	68da      	ldr	r2, [r3, #12]
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	43db      	mvns	r3, r3
 8006e9c:	4909      	ldr	r1, [pc, #36]	; (8006ec4 <HAL_GPIO_Init+0x304>)
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f47f ae8e 	bne.w	8006bd4 <HAL_GPIO_Init+0x14>
  }
}
 8006eb8:	bf00      	nop
 8006eba:	bf00      	nop
 8006ebc:	372c      	adds	r7, #44	; 0x2c
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bc80      	pop	{r7}
 8006ec2:	4770      	bx	lr
 8006ec4:	40010400 	.word	0x40010400

08006ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	807b      	strh	r3, [r7, #2]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ed8:	787b      	ldrb	r3, [r7, #1]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ede:	887a      	ldrh	r2, [r7, #2]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006ee4:	e003      	b.n	8006eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006ee6:	887b      	ldrh	r3, [r7, #2]
 8006ee8:	041a      	lsls	r2, r3, #16
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	611a      	str	r2, [r3, #16]
}
 8006eee:	bf00      	nop
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bc80      	pop	{r7}
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e12b      	b.n	8007162 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d106      	bne.n	8006f24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7ff fa22 	bl	8006368 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2224      	movs	r2, #36	; 0x24
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 0201 	bic.w	r2, r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006f5c:	f001 fba0 	bl	80086a0 <HAL_RCC_GetPCLK1Freq>
 8006f60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	4a81      	ldr	r2, [pc, #516]	; (800716c <HAL_I2C_Init+0x274>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d807      	bhi.n	8006f7c <HAL_I2C_Init+0x84>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4a80      	ldr	r2, [pc, #512]	; (8007170 <HAL_I2C_Init+0x278>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	bf94      	ite	ls
 8006f74:	2301      	movls	r3, #1
 8006f76:	2300      	movhi	r3, #0
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	e006      	b.n	8006f8a <HAL_I2C_Init+0x92>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4a7d      	ldr	r2, [pc, #500]	; (8007174 <HAL_I2C_Init+0x27c>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	bf94      	ite	ls
 8006f84:	2301      	movls	r3, #1
 8006f86:	2300      	movhi	r3, #0
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e0e7      	b.n	8007162 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	4a78      	ldr	r2, [pc, #480]	; (8007178 <HAL_I2C_Init+0x280>)
 8006f96:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9a:	0c9b      	lsrs	r3, r3, #18
 8006f9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	4a6a      	ldr	r2, [pc, #424]	; (800716c <HAL_I2C_Init+0x274>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d802      	bhi.n	8006fcc <HAL_I2C_Init+0xd4>
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	e009      	b.n	8006fe0 <HAL_I2C_Init+0xe8>
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006fd2:	fb02 f303 	mul.w	r3, r2, r3
 8006fd6:	4a69      	ldr	r2, [pc, #420]	; (800717c <HAL_I2C_Init+0x284>)
 8006fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fdc:	099b      	lsrs	r3, r3, #6
 8006fde:	3301      	adds	r3, #1
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	6812      	ldr	r2, [r2, #0]
 8006fe4:	430b      	orrs	r3, r1
 8006fe6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	69db      	ldr	r3, [r3, #28]
 8006fee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006ff2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	495c      	ldr	r1, [pc, #368]	; (800716c <HAL_I2C_Init+0x274>)
 8006ffc:	428b      	cmp	r3, r1
 8006ffe:	d819      	bhi.n	8007034 <HAL_I2C_Init+0x13c>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	1e59      	subs	r1, r3, #1
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	fbb1 f3f3 	udiv	r3, r1, r3
 800700e:	1c59      	adds	r1, r3, #1
 8007010:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007014:	400b      	ands	r3, r1
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <HAL_I2C_Init+0x138>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	1e59      	subs	r1, r3, #1
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	005b      	lsls	r3, r3, #1
 8007024:	fbb1 f3f3 	udiv	r3, r1, r3
 8007028:	3301      	adds	r3, #1
 800702a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800702e:	e051      	b.n	80070d4 <HAL_I2C_Init+0x1dc>
 8007030:	2304      	movs	r3, #4
 8007032:	e04f      	b.n	80070d4 <HAL_I2C_Init+0x1dc>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d111      	bne.n	8007060 <HAL_I2C_Init+0x168>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	1e58      	subs	r0, r3, #1
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6859      	ldr	r1, [r3, #4]
 8007044:	460b      	mov	r3, r1
 8007046:	005b      	lsls	r3, r3, #1
 8007048:	440b      	add	r3, r1
 800704a:	fbb0 f3f3 	udiv	r3, r0, r3
 800704e:	3301      	adds	r3, #1
 8007050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007054:	2b00      	cmp	r3, #0
 8007056:	bf0c      	ite	eq
 8007058:	2301      	moveq	r3, #1
 800705a:	2300      	movne	r3, #0
 800705c:	b2db      	uxtb	r3, r3
 800705e:	e012      	b.n	8007086 <HAL_I2C_Init+0x18e>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	1e58      	subs	r0, r3, #1
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6859      	ldr	r1, [r3, #4]
 8007068:	460b      	mov	r3, r1
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	440b      	add	r3, r1
 800706e:	0099      	lsls	r1, r3, #2
 8007070:	440b      	add	r3, r1
 8007072:	fbb0 f3f3 	udiv	r3, r0, r3
 8007076:	3301      	adds	r3, #1
 8007078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800707c:	2b00      	cmp	r3, #0
 800707e:	bf0c      	ite	eq
 8007080:	2301      	moveq	r3, #1
 8007082:	2300      	movne	r3, #0
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <HAL_I2C_Init+0x196>
 800708a:	2301      	movs	r3, #1
 800708c:	e022      	b.n	80070d4 <HAL_I2C_Init+0x1dc>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10e      	bne.n	80070b4 <HAL_I2C_Init+0x1bc>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	1e58      	subs	r0, r3, #1
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6859      	ldr	r1, [r3, #4]
 800709e:	460b      	mov	r3, r1
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	440b      	add	r3, r1
 80070a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80070a8:	3301      	adds	r3, #1
 80070aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b2:	e00f      	b.n	80070d4 <HAL_I2C_Init+0x1dc>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	1e58      	subs	r0, r3, #1
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6859      	ldr	r1, [r3, #4]
 80070bc:	460b      	mov	r3, r1
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	440b      	add	r3, r1
 80070c2:	0099      	lsls	r1, r3, #2
 80070c4:	440b      	add	r3, r1
 80070c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80070ca:	3301      	adds	r3, #1
 80070cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070d4:	6879      	ldr	r1, [r7, #4]
 80070d6:	6809      	ldr	r1, [r1, #0]
 80070d8:	4313      	orrs	r3, r2
 80070da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	69da      	ldr	r2, [r3, #28]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	431a      	orrs	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007102:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	6911      	ldr	r1, [r2, #16]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	68d2      	ldr	r2, [r2, #12]
 800710e:	4311      	orrs	r1, r2
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	6812      	ldr	r2, [r2, #0]
 8007114:	430b      	orrs	r3, r1
 8007116:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	695a      	ldr	r2, [r3, #20]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	431a      	orrs	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	430a      	orrs	r2, r1
 8007132:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f042 0201 	orr.w	r2, r2, #1
 8007142:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2220      	movs	r2, #32
 800714e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	000186a0 	.word	0x000186a0
 8007170:	001e847f 	.word	0x001e847f
 8007174:	003d08ff 	.word	0x003d08ff
 8007178:	431bde83 	.word	0x431bde83
 800717c:	10624dd3 	.word	0x10624dd3

08007180 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b088      	sub	sp, #32
 8007184:	af02      	add	r7, sp, #8
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	4608      	mov	r0, r1
 800718a:	4611      	mov	r1, r2
 800718c:	461a      	mov	r2, r3
 800718e:	4603      	mov	r3, r0
 8007190:	817b      	strh	r3, [r7, #10]
 8007192:	460b      	mov	r3, r1
 8007194:	813b      	strh	r3, [r7, #8]
 8007196:	4613      	mov	r3, r2
 8007198:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800719a:	f7ff f9d1 	bl	8006540 <HAL_GetTick>
 800719e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b20      	cmp	r3, #32
 80071aa:	f040 80d9 	bne.w	8007360 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	2319      	movs	r3, #25
 80071b4:	2201      	movs	r2, #1
 80071b6:	496d      	ldr	r1, [pc, #436]	; (800736c <HAL_I2C_Mem_Write+0x1ec>)
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 fcc1 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d001      	beq.n	80071c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80071c4:	2302      	movs	r3, #2
 80071c6:	e0cc      	b.n	8007362 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d101      	bne.n	80071d6 <HAL_I2C_Mem_Write+0x56>
 80071d2:	2302      	movs	r3, #2
 80071d4:	e0c5      	b.n	8007362 <HAL_I2C_Mem_Write+0x1e2>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d007      	beq.n	80071fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f042 0201 	orr.w	r2, r2, #1
 80071fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800720a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2221      	movs	r2, #33	; 0x21
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2240      	movs	r2, #64	; 0x40
 8007218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6a3a      	ldr	r2, [r7, #32]
 8007226:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800722c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007232:	b29a      	uxth	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4a4d      	ldr	r2, [pc, #308]	; (8007370 <HAL_I2C_Mem_Write+0x1f0>)
 800723c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800723e:	88f8      	ldrh	r0, [r7, #6]
 8007240:	893a      	ldrh	r2, [r7, #8]
 8007242:	8979      	ldrh	r1, [r7, #10]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	9301      	str	r3, [sp, #4]
 8007248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	4603      	mov	r3, r0
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 faf8 	bl	8007844 <I2C_RequestMemoryWrite>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d052      	beq.n	8007300 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e081      	b.n	8007362 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f000 fd42 	bl	8007cec <I2C_WaitOnTXEFlagUntilTimeout>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00d      	beq.n	800728a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	2b04      	cmp	r3, #4
 8007274:	d107      	bne.n	8007286 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007284:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e06b      	b.n	8007362 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	781a      	ldrb	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729a:	1c5a      	adds	r2, r3, #1
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072a4:	3b01      	subs	r3, #1
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	3b01      	subs	r3, #1
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	695b      	ldr	r3, [r3, #20]
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	d11b      	bne.n	8007300 <HAL_I2C_Mem_Write+0x180>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d017      	beq.n	8007300 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	781a      	ldrb	r2, [r3, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ea:	3b01      	subs	r3, #1
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	3b01      	subs	r3, #1
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1aa      	bne.n	800725e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 fd2e 	bl	8007d6e <I2C_WaitOnBTFFlagUntilTimeout>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00d      	beq.n	8007334 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731c:	2b04      	cmp	r3, #4
 800731e:	d107      	bne.n	8007330 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800732e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e016      	b.n	8007362 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2220      	movs	r2, #32
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	e000      	b.n	8007362 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007360:	2302      	movs	r3, #2
  }
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	00100002 	.word	0x00100002
 8007370:	ffff0000 	.word	0xffff0000

08007374 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b08c      	sub	sp, #48	; 0x30
 8007378:	af02      	add	r7, sp, #8
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	4608      	mov	r0, r1
 800737e:	4611      	mov	r1, r2
 8007380:	461a      	mov	r2, r3
 8007382:	4603      	mov	r3, r0
 8007384:	817b      	strh	r3, [r7, #10]
 8007386:	460b      	mov	r3, r1
 8007388:	813b      	strh	r3, [r7, #8]
 800738a:	4613      	mov	r3, r2
 800738c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007392:	f7ff f8d5 	bl	8006540 <HAL_GetTick>
 8007396:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b20      	cmp	r3, #32
 80073a2:	f040 8244 	bne.w	800782e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	2319      	movs	r3, #25
 80073ac:	2201      	movs	r2, #1
 80073ae:	4982      	ldr	r1, [pc, #520]	; (80075b8 <HAL_I2C_Mem_Read+0x244>)
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 fbc5 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80073bc:	2302      	movs	r3, #2
 80073be:	e237      	b.n	8007830 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d101      	bne.n	80073ce <HAL_I2C_Mem_Read+0x5a>
 80073ca:	2302      	movs	r3, #2
 80073cc:	e230      	b.n	8007830 <HAL_I2C_Mem_Read+0x4bc>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d007      	beq.n	80073f4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f042 0201 	orr.w	r2, r2, #1
 80073f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007402:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2222      	movs	r2, #34	; 0x22
 8007408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2240      	movs	r2, #64	; 0x40
 8007410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800741e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007424:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800742a:	b29a      	uxth	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	4a62      	ldr	r2, [pc, #392]	; (80075bc <HAL_I2C_Mem_Read+0x248>)
 8007434:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007436:	88f8      	ldrh	r0, [r7, #6]
 8007438:	893a      	ldrh	r2, [r7, #8]
 800743a:	8979      	ldrh	r1, [r7, #10]
 800743c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743e:	9301      	str	r3, [sp, #4]
 8007440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	4603      	mov	r3, r0
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 fa92 	bl	8007970 <I2C_RequestMemoryRead>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e1ec      	b.n	8007830 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800745a:	2b00      	cmp	r3, #0
 800745c:	d113      	bne.n	8007486 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800745e:	2300      	movs	r3, #0
 8007460:	61fb      	str	r3, [r7, #28]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	61fb      	str	r3, [r7, #28]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	61fb      	str	r3, [r7, #28]
 8007472:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	e1c0      	b.n	8007808 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800748a:	2b01      	cmp	r3, #1
 800748c:	d11e      	bne.n	80074cc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800749c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800749e:	b672      	cpsid	i
}
 80074a0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074a2:	2300      	movs	r3, #0
 80074a4:	61bb      	str	r3, [r7, #24]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	695b      	ldr	r3, [r3, #20]
 80074ac:	61bb      	str	r3, [r7, #24]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	61bb      	str	r3, [r7, #24]
 80074b6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80074c8:	b662      	cpsie	i
}
 80074ca:	e035      	b.n	8007538 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d11e      	bne.n	8007512 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80074e4:	b672      	cpsid	i
}
 80074e6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074e8:	2300      	movs	r3, #0
 80074ea:	617b      	str	r3, [r7, #20]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	617b      	str	r3, [r7, #20]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	617b      	str	r3, [r7, #20]
 80074fc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800750c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800750e:	b662      	cpsie	i
}
 8007510:	e012      	b.n	8007538 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007520:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007522:	2300      	movs	r3, #0
 8007524:	613b      	str	r3, [r7, #16]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	613b      	str	r3, [r7, #16]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	613b      	str	r3, [r7, #16]
 8007536:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007538:	e166      	b.n	8007808 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800753e:	2b03      	cmp	r3, #3
 8007540:	f200 811f 	bhi.w	8007782 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007548:	2b01      	cmp	r3, #1
 800754a:	d123      	bne.n	8007594 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800754c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800754e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 fc4d 	bl	8007df0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e167      	b.n	8007830 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	691a      	ldr	r2, [r3, #16]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756a:	b2d2      	uxtb	r2, r2
 800756c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007572:	1c5a      	adds	r2, r3, #1
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800757c:	3b01      	subs	r3, #1
 800757e:	b29a      	uxth	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007588:	b29b      	uxth	r3, r3
 800758a:	3b01      	subs	r3, #1
 800758c:	b29a      	uxth	r2, r3
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007592:	e139      	b.n	8007808 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007598:	2b02      	cmp	r3, #2
 800759a:	d152      	bne.n	8007642 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a2:	2200      	movs	r2, #0
 80075a4:	4906      	ldr	r1, [pc, #24]	; (80075c0 <HAL_I2C_Mem_Read+0x24c>)
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 faca 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d008      	beq.n	80075c4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e13c      	b.n	8007830 <HAL_I2C_Mem_Read+0x4bc>
 80075b6:	bf00      	nop
 80075b8:	00100002 	.word	0x00100002
 80075bc:	ffff0000 	.word	0xffff0000
 80075c0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80075c4:	b672      	cpsid	i
}
 80075c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	691a      	ldr	r2, [r3, #16]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f4:	3b01      	subs	r3, #1
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007600:	b29b      	uxth	r3, r3
 8007602:	3b01      	subs	r3, #1
 8007604:	b29a      	uxth	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800760a:	b662      	cpsie	i
}
 800760c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	691a      	ldr	r2, [r3, #16]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	b2d2      	uxtb	r2, r2
 800761a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	1c5a      	adds	r2, r3, #1
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800762a:	3b01      	subs	r3, #1
 800762c:	b29a      	uxth	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007636:	b29b      	uxth	r3, r3
 8007638:	3b01      	subs	r3, #1
 800763a:	b29a      	uxth	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007640:	e0e2      	b.n	8007808 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007648:	2200      	movs	r2, #0
 800764a:	497b      	ldr	r1, [pc, #492]	; (8007838 <HAL_I2C_Mem_Read+0x4c4>)
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 fa77 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e0e9      	b.n	8007830 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800766a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800766c:	b672      	cpsid	i
}
 800766e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	691a      	ldr	r2, [r3, #16]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	b2d2      	uxtb	r2, r2
 800767c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007682:	1c5a      	adds	r2, r3, #1
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800768c:	3b01      	subs	r3, #1
 800768e:	b29a      	uxth	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007698:	b29b      	uxth	r3, r3
 800769a:	3b01      	subs	r3, #1
 800769c:	b29a      	uxth	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80076a2:	4b66      	ldr	r3, [pc, #408]	; (800783c <HAL_I2C_Mem_Read+0x4c8>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	08db      	lsrs	r3, r3, #3
 80076a8:	4a65      	ldr	r2, [pc, #404]	; (8007840 <HAL_I2C_Mem_Read+0x4cc>)
 80076aa:	fba2 2303 	umull	r2, r3, r2, r3
 80076ae:	0a1a      	lsrs	r2, r3, #8
 80076b0:	4613      	mov	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	00da      	lsls	r2, r3, #3
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	3b01      	subs	r3, #1
 80076c0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d118      	bne.n	80076fa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2220      	movs	r2, #32
 80076d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e2:	f043 0220 	orr.w	r2, r3, #32
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80076ea:	b662      	cpsie	i
}
 80076ec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e09a      	b.n	8007830 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b04      	cmp	r3, #4
 8007706:	d1d9      	bne.n	80076bc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007716:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	691a      	ldr	r2, [r3, #16]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007722:	b2d2      	uxtb	r2, r2
 8007724:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007734:	3b01      	subs	r3, #1
 8007736:	b29a      	uxth	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007740:	b29b      	uxth	r3, r3
 8007742:	3b01      	subs	r3, #1
 8007744:	b29a      	uxth	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800774a:	b662      	cpsie	i
}
 800774c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	691a      	ldr	r2, [r3, #16]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	b2d2      	uxtb	r2, r2
 800775a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007760:	1c5a      	adds	r2, r3, #1
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800776a:	3b01      	subs	r3, #1
 800776c:	b29a      	uxth	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007776:	b29b      	uxth	r3, r3
 8007778:	3b01      	subs	r3, #1
 800777a:	b29a      	uxth	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007780:	e042      	b.n	8007808 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007784:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 fb32 	bl	8007df0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e04c      	b.n	8007830 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	691a      	ldr	r2, [r3, #16]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	b2d2      	uxtb	r2, r2
 80077a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	1c5a      	adds	r2, r3, #1
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077b2:	3b01      	subs	r3, #1
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077be:	b29b      	uxth	r3, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	f003 0304 	and.w	r3, r3, #4
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	d118      	bne.n	8007808 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	691a      	ldr	r2, [r3, #16]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	b2d2      	uxtb	r2, r2
 80077e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	1c5a      	adds	r2, r3, #1
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f2:	3b01      	subs	r3, #1
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077fe:	b29b      	uxth	r3, r3
 8007800:	3b01      	subs	r3, #1
 8007802:	b29a      	uxth	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800780c:	2b00      	cmp	r3, #0
 800780e:	f47f ae94 	bne.w	800753a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2220      	movs	r2, #32
 8007816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	e000      	b.n	8007830 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800782e:	2302      	movs	r3, #2
  }
}
 8007830:	4618      	mov	r0, r3
 8007832:	3728      	adds	r7, #40	; 0x28
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	00010004 	.word	0x00010004
 800783c:	20000000 	.word	0x20000000
 8007840:	14f8b589 	.word	0x14f8b589

08007844 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b088      	sub	sp, #32
 8007848:	af02      	add	r7, sp, #8
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	4608      	mov	r0, r1
 800784e:	4611      	mov	r1, r2
 8007850:	461a      	mov	r2, r3
 8007852:	4603      	mov	r3, r0
 8007854:	817b      	strh	r3, [r7, #10]
 8007856:	460b      	mov	r3, r1
 8007858:	813b      	strh	r3, [r7, #8]
 800785a:	4613      	mov	r3, r2
 800785c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800786c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	6a3b      	ldr	r3, [r7, #32]
 8007874:	2200      	movs	r2, #0
 8007876:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f000 f960 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00d      	beq.n	80078a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007894:	d103      	bne.n	800789e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800789c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e05f      	b.n	8007962 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80078a2:	897b      	ldrh	r3, [r7, #10]
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	461a      	mov	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b4:	6a3a      	ldr	r2, [r7, #32]
 80078b6:	492d      	ldr	r1, [pc, #180]	; (800796c <I2C_RequestMemoryWrite+0x128>)
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 f998 	bl	8007bee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e04c      	b.n	8007962 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078c8:	2300      	movs	r3, #0
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	617b      	str	r3, [r7, #20]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	617b      	str	r3, [r7, #20]
 80078dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078e0:	6a39      	ldr	r1, [r7, #32]
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 fa02 	bl	8007cec <I2C_WaitOnTXEFlagUntilTimeout>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00d      	beq.n	800790a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d107      	bne.n	8007906 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007904:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e02b      	b.n	8007962 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800790a:	88fb      	ldrh	r3, [r7, #6]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d105      	bne.n	800791c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007910:	893b      	ldrh	r3, [r7, #8]
 8007912:	b2da      	uxtb	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	611a      	str	r2, [r3, #16]
 800791a:	e021      	b.n	8007960 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800791c:	893b      	ldrh	r3, [r7, #8]
 800791e:	0a1b      	lsrs	r3, r3, #8
 8007920:	b29b      	uxth	r3, r3
 8007922:	b2da      	uxtb	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800792a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800792c:	6a39      	ldr	r1, [r7, #32]
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f000 f9dc 	bl	8007cec <I2C_WaitOnTXEFlagUntilTimeout>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00d      	beq.n	8007956 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793e:	2b04      	cmp	r3, #4
 8007940:	d107      	bne.n	8007952 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007950:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e005      	b.n	8007962 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007956:	893b      	ldrh	r3, [r7, #8]
 8007958:	b2da      	uxtb	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	00010002 	.word	0x00010002

08007970 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b088      	sub	sp, #32
 8007974:	af02      	add	r7, sp, #8
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	4608      	mov	r0, r1
 800797a:	4611      	mov	r1, r2
 800797c:	461a      	mov	r2, r3
 800797e:	4603      	mov	r3, r0
 8007980:	817b      	strh	r3, [r7, #10]
 8007982:	460b      	mov	r3, r1
 8007984:	813b      	strh	r3, [r7, #8]
 8007986:	4613      	mov	r3, r2
 8007988:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007998:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f000 f8c2 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00d      	beq.n	80079de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079d0:	d103      	bne.n	80079da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e0aa      	b.n	8007b34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80079de:	897b      	ldrh	r3, [r7, #10]
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	461a      	mov	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80079ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	6a3a      	ldr	r2, [r7, #32]
 80079f2:	4952      	ldr	r1, [pc, #328]	; (8007b3c <I2C_RequestMemoryRead+0x1cc>)
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f000 f8fa 	bl	8007bee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d001      	beq.n	8007a04 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e097      	b.n	8007b34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a04:	2300      	movs	r3, #0
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	617b      	str	r3, [r7, #20]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a1c:	6a39      	ldr	r1, [r7, #32]
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f000 f964 	bl	8007cec <I2C_WaitOnTXEFlagUntilTimeout>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00d      	beq.n	8007a46 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2e:	2b04      	cmp	r3, #4
 8007a30:	d107      	bne.n	8007a42 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e076      	b.n	8007b34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a46:	88fb      	ldrh	r3, [r7, #6]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d105      	bne.n	8007a58 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a4c:	893b      	ldrh	r3, [r7, #8]
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	611a      	str	r2, [r3, #16]
 8007a56:	e021      	b.n	8007a9c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007a58:	893b      	ldrh	r3, [r7, #8]
 8007a5a:	0a1b      	lsrs	r3, r3, #8
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a68:	6a39      	ldr	r1, [r7, #32]
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 f93e 	bl	8007cec <I2C_WaitOnTXEFlagUntilTimeout>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00d      	beq.n	8007a92 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d107      	bne.n	8007a8e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e050      	b.n	8007b34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a92:	893b      	ldrh	r3, [r7, #8]
 8007a94:	b2da      	uxtb	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a9e:	6a39      	ldr	r1, [r7, #32]
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f000 f923 	bl	8007cec <I2C_WaitOnTXEFlagUntilTimeout>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00d      	beq.n	8007ac8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d107      	bne.n	8007ac4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ac2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e035      	b.n	8007b34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ad6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	6a3b      	ldr	r3, [r7, #32]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 f82b 	bl	8007b40 <I2C_WaitOnFlagUntilTimeout>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00d      	beq.n	8007b0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007afe:	d103      	bne.n	8007b08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e013      	b.n	8007b34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007b0c:	897b      	ldrh	r3, [r7, #10]
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	f043 0301 	orr.w	r3, r3, #1
 8007b14:	b2da      	uxtb	r2, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1e:	6a3a      	ldr	r2, [r7, #32]
 8007b20:	4906      	ldr	r1, [pc, #24]	; (8007b3c <I2C_RequestMemoryRead+0x1cc>)
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f000 f863 	bl	8007bee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e000      	b.n	8007b34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3718      	adds	r7, #24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	00010002 	.word	0x00010002

08007b40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	603b      	str	r3, [r7, #0]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b50:	e025      	b.n	8007b9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b58:	d021      	beq.n	8007b9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b5a:	f7fe fcf1 	bl	8006540 <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d302      	bcc.n	8007b70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d116      	bne.n	8007b9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8a:	f043 0220 	orr.w	r2, r3, #32
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e023      	b.n	8007be6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	0c1b      	lsrs	r3, r3, #16
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d10d      	bne.n	8007bc4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	43da      	mvns	r2, r3
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	bf0c      	ite	eq
 8007bba:	2301      	moveq	r3, #1
 8007bbc:	2300      	movne	r3, #0
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	e00c      	b.n	8007bde <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	43da      	mvns	r2, r3
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	4013      	ands	r3, r2
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	bf0c      	ite	eq
 8007bd6:	2301      	moveq	r3, #1
 8007bd8:	2300      	movne	r3, #0
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	461a      	mov	r2, r3
 8007bde:	79fb      	ldrb	r3, [r7, #7]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d0b6      	beq.n	8007b52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	60f8      	str	r0, [r7, #12]
 8007bf6:	60b9      	str	r1, [r7, #8]
 8007bf8:	607a      	str	r2, [r7, #4]
 8007bfa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007bfc:	e051      	b.n	8007ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c0c:	d123      	bne.n	8007c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2220      	movs	r2, #32
 8007c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c42:	f043 0204 	orr.w	r2, r3, #4
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e046      	b.n	8007ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5c:	d021      	beq.n	8007ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c5e:	f7fe fc6f 	bl	8006540 <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d302      	bcc.n	8007c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d116      	bne.n	8007ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2220      	movs	r2, #32
 8007c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8e:	f043 0220 	orr.w	r2, r3, #32
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e020      	b.n	8007ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	0c1b      	lsrs	r3, r3, #16
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d10c      	bne.n	8007cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	43da      	mvns	r2, r3
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	bf14      	ite	ne
 8007cbe:	2301      	movne	r3, #1
 8007cc0:	2300      	moveq	r3, #0
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	e00b      	b.n	8007cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	43da      	mvns	r2, r3
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	bf14      	ite	ne
 8007cd8:	2301      	movne	r3, #1
 8007cda:	2300      	moveq	r3, #0
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d18d      	bne.n	8007bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cf8:	e02d      	b.n	8007d56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 f8ce 	bl	8007e9c <I2C_IsAcknowledgeFailed>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e02d      	b.n	8007d66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d10:	d021      	beq.n	8007d56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d12:	f7fe fc15 	bl	8006540 <HAL_GetTick>
 8007d16:	4602      	mov	r2, r0
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d302      	bcc.n	8007d28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d116      	bne.n	8007d56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2220      	movs	r2, #32
 8007d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d42:	f043 0220 	orr.w	r2, r3, #32
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e007      	b.n	8007d66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d60:	2b80      	cmp	r3, #128	; 0x80
 8007d62:	d1ca      	bne.n	8007cfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b084      	sub	sp, #16
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	60b9      	str	r1, [r7, #8]
 8007d78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d7a:	e02d      	b.n	8007dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 f88d 	bl	8007e9c <I2C_IsAcknowledgeFailed>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e02d      	b.n	8007de8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d92:	d021      	beq.n	8007dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d94:	f7fe fbd4 	bl	8006540 <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d302      	bcc.n	8007daa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d116      	bne.n	8007dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2220      	movs	r2, #32
 8007db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc4:	f043 0220 	orr.w	r2, r3, #32
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e007      	b.n	8007de8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	f003 0304 	and.w	r3, r3, #4
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	d1ca      	bne.n	8007d7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007dfc:	e042      	b.n	8007e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	f003 0310 	and.w	r3, r3, #16
 8007e08:	2b10      	cmp	r3, #16
 8007e0a:	d119      	bne.n	8007e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f06f 0210 	mvn.w	r2, #16
 8007e14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2220      	movs	r2, #32
 8007e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e029      	b.n	8007e94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e40:	f7fe fb7e 	bl	8006540 <HAL_GetTick>
 8007e44:	4602      	mov	r2, r0
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d302      	bcc.n	8007e56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d116      	bne.n	8007e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2220      	movs	r2, #32
 8007e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e70:	f043 0220 	orr.w	r2, r3, #32
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e007      	b.n	8007e94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e8e:	2b40      	cmp	r3, #64	; 0x40
 8007e90:	d1b5      	bne.n	8007dfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eb2:	d11b      	bne.n	8007eec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ebc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed8:	f043 0204 	orr.w	r2, r3, #4
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e000      	b.n	8007eee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bc80      	pop	{r7}
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e26c      	b.n	80083e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 8087 	beq.w	8008026 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007f18:	4b92      	ldr	r3, [pc, #584]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f003 030c 	and.w	r3, r3, #12
 8007f20:	2b04      	cmp	r3, #4
 8007f22:	d00c      	beq.n	8007f3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007f24:	4b8f      	ldr	r3, [pc, #572]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	f003 030c 	and.w	r3, r3, #12
 8007f2c:	2b08      	cmp	r3, #8
 8007f2e:	d112      	bne.n	8007f56 <HAL_RCC_OscConfig+0x5e>
 8007f30:	4b8c      	ldr	r3, [pc, #560]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f3c:	d10b      	bne.n	8007f56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f3e:	4b89      	ldr	r3, [pc, #548]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d06c      	beq.n	8008024 <HAL_RCC_OscConfig+0x12c>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d168      	bne.n	8008024 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e246      	b.n	80083e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f5e:	d106      	bne.n	8007f6e <HAL_RCC_OscConfig+0x76>
 8007f60:	4b80      	ldr	r3, [pc, #512]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a7f      	ldr	r2, [pc, #508]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8007f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f6a:	6013      	str	r3, [r2, #0]
 8007f6c:	e02e      	b.n	8007fcc <HAL_RCC_OscConfig+0xd4>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10c      	bne.n	8007f90 <HAL_RCC_OscConfig+0x98>
 8007f76:	4b7b      	ldr	r3, [pc, #492]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a7a      	ldr	r2, [pc, #488]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8007f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f80:	6013      	str	r3, [r2, #0]
 8007f82:	4b78      	ldr	r3, [pc, #480]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a77      	ldr	r2, [pc, #476]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8007f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f8c:	6013      	str	r3, [r2, #0]
 8007f8e:	e01d      	b.n	8007fcc <HAL_RCC_OscConfig+0xd4>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f98:	d10c      	bne.n	8007fb4 <HAL_RCC_OscConfig+0xbc>
 8007f9a:	4b72      	ldr	r3, [pc, #456]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a71      	ldr	r2, [pc, #452]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8007fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fa4:	6013      	str	r3, [r2, #0]
 8007fa6:	4b6f      	ldr	r3, [pc, #444]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a6e      	ldr	r2, [pc, #440]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8007fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fb0:	6013      	str	r3, [r2, #0]
 8007fb2:	e00b      	b.n	8007fcc <HAL_RCC_OscConfig+0xd4>
 8007fb4:	4b6b      	ldr	r3, [pc, #428]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a6a      	ldr	r2, [pc, #424]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8007fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fbe:	6013      	str	r3, [r2, #0]
 8007fc0:	4b68      	ldr	r3, [pc, #416]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a67      	ldr	r2, [pc, #412]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8007fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d013      	beq.n	8007ffc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fd4:	f7fe fab4 	bl	8006540 <HAL_GetTick>
 8007fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fda:	e008      	b.n	8007fee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fdc:	f7fe fab0 	bl	8006540 <HAL_GetTick>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	2b64      	cmp	r3, #100	; 0x64
 8007fe8:	d901      	bls.n	8007fee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e1fa      	b.n	80083e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fee:	4b5d      	ldr	r3, [pc, #372]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d0f0      	beq.n	8007fdc <HAL_RCC_OscConfig+0xe4>
 8007ffa:	e014      	b.n	8008026 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ffc:	f7fe faa0 	bl	8006540 <HAL_GetTick>
 8008000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008002:	e008      	b.n	8008016 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008004:	f7fe fa9c 	bl	8006540 <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	2b64      	cmp	r3, #100	; 0x64
 8008010:	d901      	bls.n	8008016 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e1e6      	b.n	80083e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008016:	4b53      	ldr	r3, [pc, #332]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1f0      	bne.n	8008004 <HAL_RCC_OscConfig+0x10c>
 8008022:	e000      	b.n	8008026 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	2b00      	cmp	r3, #0
 8008030:	d063      	beq.n	80080fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008032:	4b4c      	ldr	r3, [pc, #304]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f003 030c 	and.w	r3, r3, #12
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00b      	beq.n	8008056 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800803e:	4b49      	ldr	r3, [pc, #292]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f003 030c 	and.w	r3, r3, #12
 8008046:	2b08      	cmp	r3, #8
 8008048:	d11c      	bne.n	8008084 <HAL_RCC_OscConfig+0x18c>
 800804a:	4b46      	ldr	r3, [pc, #280]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d116      	bne.n	8008084 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008056:	4b43      	ldr	r3, [pc, #268]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0302 	and.w	r3, r3, #2
 800805e:	2b00      	cmp	r3, #0
 8008060:	d005      	beq.n	800806e <HAL_RCC_OscConfig+0x176>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d001      	beq.n	800806e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e1ba      	b.n	80083e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800806e:	4b3d      	ldr	r3, [pc, #244]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	00db      	lsls	r3, r3, #3
 800807c:	4939      	ldr	r1, [pc, #228]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 800807e:	4313      	orrs	r3, r2
 8008080:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008082:	e03a      	b.n	80080fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d020      	beq.n	80080ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800808c:	4b36      	ldr	r3, [pc, #216]	; (8008168 <HAL_RCC_OscConfig+0x270>)
 800808e:	2201      	movs	r2, #1
 8008090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008092:	f7fe fa55 	bl	8006540 <HAL_GetTick>
 8008096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008098:	e008      	b.n	80080ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800809a:	f7fe fa51 	bl	8006540 <HAL_GetTick>
 800809e:	4602      	mov	r2, r0
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d901      	bls.n	80080ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e19b      	b.n	80083e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080ac:	4b2d      	ldr	r3, [pc, #180]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0302 	and.w	r3, r3, #2
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d0f0      	beq.n	800809a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080b8:	4b2a      	ldr	r3, [pc, #168]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	695b      	ldr	r3, [r3, #20]
 80080c4:	00db      	lsls	r3, r3, #3
 80080c6:	4927      	ldr	r1, [pc, #156]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	600b      	str	r3, [r1, #0]
 80080cc:	e015      	b.n	80080fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080ce:	4b26      	ldr	r3, [pc, #152]	; (8008168 <HAL_RCC_OscConfig+0x270>)
 80080d0:	2200      	movs	r2, #0
 80080d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080d4:	f7fe fa34 	bl	8006540 <HAL_GetTick>
 80080d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080da:	e008      	b.n	80080ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080dc:	f7fe fa30 	bl	8006540 <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d901      	bls.n	80080ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e17a      	b.n	80083e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080ee:	4b1d      	ldr	r3, [pc, #116]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 0302 	and.w	r3, r3, #2
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1f0      	bne.n	80080dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 0308 	and.w	r3, r3, #8
 8008102:	2b00      	cmp	r3, #0
 8008104:	d03a      	beq.n	800817c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d019      	beq.n	8008142 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800810e:	4b17      	ldr	r3, [pc, #92]	; (800816c <HAL_RCC_OscConfig+0x274>)
 8008110:	2201      	movs	r2, #1
 8008112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008114:	f7fe fa14 	bl	8006540 <HAL_GetTick>
 8008118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800811a:	e008      	b.n	800812e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800811c:	f7fe fa10 	bl	8006540 <HAL_GetTick>
 8008120:	4602      	mov	r2, r0
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	2b02      	cmp	r3, #2
 8008128:	d901      	bls.n	800812e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e15a      	b.n	80083e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800812e:	4b0d      	ldr	r3, [pc, #52]	; (8008164 <HAL_RCC_OscConfig+0x26c>)
 8008130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008132:	f003 0302 	and.w	r3, r3, #2
 8008136:	2b00      	cmp	r3, #0
 8008138:	d0f0      	beq.n	800811c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800813a:	2001      	movs	r0, #1
 800813c:	f000 fac4 	bl	80086c8 <RCC_Delay>
 8008140:	e01c      	b.n	800817c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008142:	4b0a      	ldr	r3, [pc, #40]	; (800816c <HAL_RCC_OscConfig+0x274>)
 8008144:	2200      	movs	r2, #0
 8008146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008148:	f7fe f9fa 	bl	8006540 <HAL_GetTick>
 800814c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800814e:	e00f      	b.n	8008170 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008150:	f7fe f9f6 	bl	8006540 <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	2b02      	cmp	r3, #2
 800815c:	d908      	bls.n	8008170 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e140      	b.n	80083e4 <HAL_RCC_OscConfig+0x4ec>
 8008162:	bf00      	nop
 8008164:	40021000 	.word	0x40021000
 8008168:	42420000 	.word	0x42420000
 800816c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008170:	4b9e      	ldr	r3, [pc, #632]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 8008172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008174:	f003 0302 	and.w	r3, r3, #2
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1e9      	bne.n	8008150 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0304 	and.w	r3, r3, #4
 8008184:	2b00      	cmp	r3, #0
 8008186:	f000 80a6 	beq.w	80082d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800818a:	2300      	movs	r3, #0
 800818c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800818e:	4b97      	ldr	r3, [pc, #604]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 8008190:	69db      	ldr	r3, [r3, #28]
 8008192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10d      	bne.n	80081b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800819a:	4b94      	ldr	r3, [pc, #592]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	4a93      	ldr	r2, [pc, #588]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 80081a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081a4:	61d3      	str	r3, [r2, #28]
 80081a6:	4b91      	ldr	r3, [pc, #580]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 80081a8:	69db      	ldr	r3, [r3, #28]
 80081aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081ae:	60bb      	str	r3, [r7, #8]
 80081b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081b2:	2301      	movs	r3, #1
 80081b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081b6:	4b8e      	ldr	r3, [pc, #568]	; (80083f0 <HAL_RCC_OscConfig+0x4f8>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d118      	bne.n	80081f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081c2:	4b8b      	ldr	r3, [pc, #556]	; (80083f0 <HAL_RCC_OscConfig+0x4f8>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a8a      	ldr	r2, [pc, #552]	; (80083f0 <HAL_RCC_OscConfig+0x4f8>)
 80081c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081ce:	f7fe f9b7 	bl	8006540 <HAL_GetTick>
 80081d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081d4:	e008      	b.n	80081e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081d6:	f7fe f9b3 	bl	8006540 <HAL_GetTick>
 80081da:	4602      	mov	r2, r0
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	2b64      	cmp	r3, #100	; 0x64
 80081e2:	d901      	bls.n	80081e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e0fd      	b.n	80083e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081e8:	4b81      	ldr	r3, [pc, #516]	; (80083f0 <HAL_RCC_OscConfig+0x4f8>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d0f0      	beq.n	80081d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d106      	bne.n	800820a <HAL_RCC_OscConfig+0x312>
 80081fc:	4b7b      	ldr	r3, [pc, #492]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 80081fe:	6a1b      	ldr	r3, [r3, #32]
 8008200:	4a7a      	ldr	r2, [pc, #488]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 8008202:	f043 0301 	orr.w	r3, r3, #1
 8008206:	6213      	str	r3, [r2, #32]
 8008208:	e02d      	b.n	8008266 <HAL_RCC_OscConfig+0x36e>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10c      	bne.n	800822c <HAL_RCC_OscConfig+0x334>
 8008212:	4b76      	ldr	r3, [pc, #472]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	4a75      	ldr	r2, [pc, #468]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 8008218:	f023 0301 	bic.w	r3, r3, #1
 800821c:	6213      	str	r3, [r2, #32]
 800821e:	4b73      	ldr	r3, [pc, #460]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	4a72      	ldr	r2, [pc, #456]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 8008224:	f023 0304 	bic.w	r3, r3, #4
 8008228:	6213      	str	r3, [r2, #32]
 800822a:	e01c      	b.n	8008266 <HAL_RCC_OscConfig+0x36e>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	2b05      	cmp	r3, #5
 8008232:	d10c      	bne.n	800824e <HAL_RCC_OscConfig+0x356>
 8008234:	4b6d      	ldr	r3, [pc, #436]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 8008236:	6a1b      	ldr	r3, [r3, #32]
 8008238:	4a6c      	ldr	r2, [pc, #432]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 800823a:	f043 0304 	orr.w	r3, r3, #4
 800823e:	6213      	str	r3, [r2, #32]
 8008240:	4b6a      	ldr	r3, [pc, #424]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 8008242:	6a1b      	ldr	r3, [r3, #32]
 8008244:	4a69      	ldr	r2, [pc, #420]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 8008246:	f043 0301 	orr.w	r3, r3, #1
 800824a:	6213      	str	r3, [r2, #32]
 800824c:	e00b      	b.n	8008266 <HAL_RCC_OscConfig+0x36e>
 800824e:	4b67      	ldr	r3, [pc, #412]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	4a66      	ldr	r2, [pc, #408]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 8008254:	f023 0301 	bic.w	r3, r3, #1
 8008258:	6213      	str	r3, [r2, #32]
 800825a:	4b64      	ldr	r3, [pc, #400]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	4a63      	ldr	r2, [pc, #396]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 8008260:	f023 0304 	bic.w	r3, r3, #4
 8008264:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d015      	beq.n	800829a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800826e:	f7fe f967 	bl	8006540 <HAL_GetTick>
 8008272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008274:	e00a      	b.n	800828c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008276:	f7fe f963 	bl	8006540 <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	f241 3288 	movw	r2, #5000	; 0x1388
 8008284:	4293      	cmp	r3, r2
 8008286:	d901      	bls.n	800828c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008288:	2303      	movs	r3, #3
 800828a:	e0ab      	b.n	80083e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800828c:	4b57      	ldr	r3, [pc, #348]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 800828e:	6a1b      	ldr	r3, [r3, #32]
 8008290:	f003 0302 	and.w	r3, r3, #2
 8008294:	2b00      	cmp	r3, #0
 8008296:	d0ee      	beq.n	8008276 <HAL_RCC_OscConfig+0x37e>
 8008298:	e014      	b.n	80082c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800829a:	f7fe f951 	bl	8006540 <HAL_GetTick>
 800829e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082a0:	e00a      	b.n	80082b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082a2:	f7fe f94d 	bl	8006540 <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d901      	bls.n	80082b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e095      	b.n	80083e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082b8:	4b4c      	ldr	r3, [pc, #304]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 80082ba:	6a1b      	ldr	r3, [r3, #32]
 80082bc:	f003 0302 	and.w	r3, r3, #2
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1ee      	bne.n	80082a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80082c4:	7dfb      	ldrb	r3, [r7, #23]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d105      	bne.n	80082d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082ca:	4b48      	ldr	r3, [pc, #288]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 80082cc:	69db      	ldr	r3, [r3, #28]
 80082ce:	4a47      	ldr	r2, [pc, #284]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 80082d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 8081 	beq.w	80083e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80082e0:	4b42      	ldr	r3, [pc, #264]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f003 030c 	and.w	r3, r3, #12
 80082e8:	2b08      	cmp	r3, #8
 80082ea:	d061      	beq.n	80083b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	69db      	ldr	r3, [r3, #28]
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d146      	bne.n	8008382 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082f4:	4b3f      	ldr	r3, [pc, #252]	; (80083f4 <HAL_RCC_OscConfig+0x4fc>)
 80082f6:	2200      	movs	r2, #0
 80082f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082fa:	f7fe f921 	bl	8006540 <HAL_GetTick>
 80082fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008300:	e008      	b.n	8008314 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008302:	f7fe f91d 	bl	8006540 <HAL_GetTick>
 8008306:	4602      	mov	r2, r0
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	2b02      	cmp	r3, #2
 800830e:	d901      	bls.n	8008314 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008310:	2303      	movs	r3, #3
 8008312:	e067      	b.n	80083e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008314:	4b35      	ldr	r3, [pc, #212]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1f0      	bne.n	8008302 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a1b      	ldr	r3, [r3, #32]
 8008324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008328:	d108      	bne.n	800833c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800832a:	4b30      	ldr	r3, [pc, #192]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	492d      	ldr	r1, [pc, #180]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 8008338:	4313      	orrs	r3, r2
 800833a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800833c:	4b2b      	ldr	r3, [pc, #172]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a19      	ldr	r1, [r3, #32]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834c:	430b      	orrs	r3, r1
 800834e:	4927      	ldr	r1, [pc, #156]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 8008350:	4313      	orrs	r3, r2
 8008352:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008354:	4b27      	ldr	r3, [pc, #156]	; (80083f4 <HAL_RCC_OscConfig+0x4fc>)
 8008356:	2201      	movs	r2, #1
 8008358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800835a:	f7fe f8f1 	bl	8006540 <HAL_GetTick>
 800835e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008360:	e008      	b.n	8008374 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008362:	f7fe f8ed 	bl	8006540 <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	2b02      	cmp	r3, #2
 800836e:	d901      	bls.n	8008374 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	e037      	b.n	80083e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008374:	4b1d      	ldr	r3, [pc, #116]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d0f0      	beq.n	8008362 <HAL_RCC_OscConfig+0x46a>
 8008380:	e02f      	b.n	80083e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008382:	4b1c      	ldr	r3, [pc, #112]	; (80083f4 <HAL_RCC_OscConfig+0x4fc>)
 8008384:	2200      	movs	r2, #0
 8008386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008388:	f7fe f8da 	bl	8006540 <HAL_GetTick>
 800838c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800838e:	e008      	b.n	80083a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008390:	f7fe f8d6 	bl	8006540 <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	2b02      	cmp	r3, #2
 800839c:	d901      	bls.n	80083a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e020      	b.n	80083e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80083a2:	4b12      	ldr	r3, [pc, #72]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1f0      	bne.n	8008390 <HAL_RCC_OscConfig+0x498>
 80083ae:	e018      	b.n	80083e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	69db      	ldr	r3, [r3, #28]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d101      	bne.n	80083bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e013      	b.n	80083e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80083bc:	4b0b      	ldr	r3, [pc, #44]	; (80083ec <HAL_RCC_OscConfig+0x4f4>)
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a1b      	ldr	r3, [r3, #32]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d106      	bne.n	80083de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083da:	429a      	cmp	r2, r3
 80083dc:	d001      	beq.n	80083e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e000      	b.n	80083e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3718      	adds	r7, #24
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	40021000 	.word	0x40021000
 80083f0:	40007000 	.word	0x40007000
 80083f4:	42420060 	.word	0x42420060

080083f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e0d0      	b.n	80085ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800840c:	4b6a      	ldr	r3, [pc, #424]	; (80085b8 <HAL_RCC_ClockConfig+0x1c0>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0307 	and.w	r3, r3, #7
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	429a      	cmp	r2, r3
 8008418:	d910      	bls.n	800843c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800841a:	4b67      	ldr	r3, [pc, #412]	; (80085b8 <HAL_RCC_ClockConfig+0x1c0>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f023 0207 	bic.w	r2, r3, #7
 8008422:	4965      	ldr	r1, [pc, #404]	; (80085b8 <HAL_RCC_ClockConfig+0x1c0>)
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	4313      	orrs	r3, r2
 8008428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800842a:	4b63      	ldr	r3, [pc, #396]	; (80085b8 <HAL_RCC_ClockConfig+0x1c0>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0307 	and.w	r3, r3, #7
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	429a      	cmp	r2, r3
 8008436:	d001      	beq.n	800843c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e0b8      	b.n	80085ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0302 	and.w	r3, r3, #2
 8008444:	2b00      	cmp	r3, #0
 8008446:	d020      	beq.n	800848a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0304 	and.w	r3, r3, #4
 8008450:	2b00      	cmp	r3, #0
 8008452:	d005      	beq.n	8008460 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008454:	4b59      	ldr	r3, [pc, #356]	; (80085bc <HAL_RCC_ClockConfig+0x1c4>)
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	4a58      	ldr	r2, [pc, #352]	; (80085bc <HAL_RCC_ClockConfig+0x1c4>)
 800845a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800845e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0308 	and.w	r3, r3, #8
 8008468:	2b00      	cmp	r3, #0
 800846a:	d005      	beq.n	8008478 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800846c:	4b53      	ldr	r3, [pc, #332]	; (80085bc <HAL_RCC_ClockConfig+0x1c4>)
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	4a52      	ldr	r2, [pc, #328]	; (80085bc <HAL_RCC_ClockConfig+0x1c4>)
 8008472:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008476:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008478:	4b50      	ldr	r3, [pc, #320]	; (80085bc <HAL_RCC_ClockConfig+0x1c4>)
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	494d      	ldr	r1, [pc, #308]	; (80085bc <HAL_RCC_ClockConfig+0x1c4>)
 8008486:	4313      	orrs	r3, r2
 8008488:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	d040      	beq.n	8008518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	2b01      	cmp	r3, #1
 800849c:	d107      	bne.n	80084ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800849e:	4b47      	ldr	r3, [pc, #284]	; (80085bc <HAL_RCC_ClockConfig+0x1c4>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d115      	bne.n	80084d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e07f      	b.n	80085ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d107      	bne.n	80084c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084b6:	4b41      	ldr	r3, [pc, #260]	; (80085bc <HAL_RCC_ClockConfig+0x1c4>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d109      	bne.n	80084d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e073      	b.n	80085ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084c6:	4b3d      	ldr	r3, [pc, #244]	; (80085bc <HAL_RCC_ClockConfig+0x1c4>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d101      	bne.n	80084d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e06b      	b.n	80085ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80084d6:	4b39      	ldr	r3, [pc, #228]	; (80085bc <HAL_RCC_ClockConfig+0x1c4>)
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f023 0203 	bic.w	r2, r3, #3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	4936      	ldr	r1, [pc, #216]	; (80085bc <HAL_RCC_ClockConfig+0x1c4>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80084e8:	f7fe f82a 	bl	8006540 <HAL_GetTick>
 80084ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084ee:	e00a      	b.n	8008506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084f0:	f7fe f826 	bl	8006540 <HAL_GetTick>
 80084f4:	4602      	mov	r2, r0
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80084fe:	4293      	cmp	r3, r2
 8008500:	d901      	bls.n	8008506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e053      	b.n	80085ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008506:	4b2d      	ldr	r3, [pc, #180]	; (80085bc <HAL_RCC_ClockConfig+0x1c4>)
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f003 020c 	and.w	r2, r3, #12
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	429a      	cmp	r2, r3
 8008516:	d1eb      	bne.n	80084f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008518:	4b27      	ldr	r3, [pc, #156]	; (80085b8 <HAL_RCC_ClockConfig+0x1c0>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0307 	and.w	r3, r3, #7
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	429a      	cmp	r2, r3
 8008524:	d210      	bcs.n	8008548 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008526:	4b24      	ldr	r3, [pc, #144]	; (80085b8 <HAL_RCC_ClockConfig+0x1c0>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f023 0207 	bic.w	r2, r3, #7
 800852e:	4922      	ldr	r1, [pc, #136]	; (80085b8 <HAL_RCC_ClockConfig+0x1c0>)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	4313      	orrs	r3, r2
 8008534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008536:	4b20      	ldr	r3, [pc, #128]	; (80085b8 <HAL_RCC_ClockConfig+0x1c0>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0307 	and.w	r3, r3, #7
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	429a      	cmp	r2, r3
 8008542:	d001      	beq.n	8008548 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e032      	b.n	80085ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0304 	and.w	r3, r3, #4
 8008550:	2b00      	cmp	r3, #0
 8008552:	d008      	beq.n	8008566 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008554:	4b19      	ldr	r3, [pc, #100]	; (80085bc <HAL_RCC_ClockConfig+0x1c4>)
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	4916      	ldr	r1, [pc, #88]	; (80085bc <HAL_RCC_ClockConfig+0x1c4>)
 8008562:	4313      	orrs	r3, r2
 8008564:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 0308 	and.w	r3, r3, #8
 800856e:	2b00      	cmp	r3, #0
 8008570:	d009      	beq.n	8008586 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008572:	4b12      	ldr	r3, [pc, #72]	; (80085bc <HAL_RCC_ClockConfig+0x1c4>)
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	00db      	lsls	r3, r3, #3
 8008580:	490e      	ldr	r1, [pc, #56]	; (80085bc <HAL_RCC_ClockConfig+0x1c4>)
 8008582:	4313      	orrs	r3, r2
 8008584:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008586:	f000 f821 	bl	80085cc <HAL_RCC_GetSysClockFreq>
 800858a:	4602      	mov	r2, r0
 800858c:	4b0b      	ldr	r3, [pc, #44]	; (80085bc <HAL_RCC_ClockConfig+0x1c4>)
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	091b      	lsrs	r3, r3, #4
 8008592:	f003 030f 	and.w	r3, r3, #15
 8008596:	490a      	ldr	r1, [pc, #40]	; (80085c0 <HAL_RCC_ClockConfig+0x1c8>)
 8008598:	5ccb      	ldrb	r3, [r1, r3]
 800859a:	fa22 f303 	lsr.w	r3, r2, r3
 800859e:	4a09      	ldr	r2, [pc, #36]	; (80085c4 <HAL_RCC_ClockConfig+0x1cc>)
 80085a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80085a2:	4b09      	ldr	r3, [pc, #36]	; (80085c8 <HAL_RCC_ClockConfig+0x1d0>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fd ff88 	bl	80064bc <HAL_InitTick>

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	40022000 	.word	0x40022000
 80085bc:	40021000 	.word	0x40021000
 80085c0:	0800c920 	.word	0x0800c920
 80085c4:	20000000 	.word	0x20000000
 80085c8:	20000004 	.word	0x20000004

080085cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085cc:	b490      	push	{r4, r7}
 80085ce:	b08a      	sub	sp, #40	; 0x28
 80085d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80085d2:	4b2a      	ldr	r3, [pc, #168]	; (800867c <HAL_RCC_GetSysClockFreq+0xb0>)
 80085d4:	1d3c      	adds	r4, r7, #4
 80085d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80085d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80085dc:	f240 2301 	movw	r3, #513	; 0x201
 80085e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80085e2:	2300      	movs	r3, #0
 80085e4:	61fb      	str	r3, [r7, #28]
 80085e6:	2300      	movs	r3, #0
 80085e8:	61bb      	str	r3, [r7, #24]
 80085ea:	2300      	movs	r3, #0
 80085ec:	627b      	str	r3, [r7, #36]	; 0x24
 80085ee:	2300      	movs	r3, #0
 80085f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80085f2:	2300      	movs	r3, #0
 80085f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80085f6:	4b22      	ldr	r3, [pc, #136]	; (8008680 <HAL_RCC_GetSysClockFreq+0xb4>)
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	f003 030c 	and.w	r3, r3, #12
 8008602:	2b04      	cmp	r3, #4
 8008604:	d002      	beq.n	800860c <HAL_RCC_GetSysClockFreq+0x40>
 8008606:	2b08      	cmp	r3, #8
 8008608:	d003      	beq.n	8008612 <HAL_RCC_GetSysClockFreq+0x46>
 800860a:	e02d      	b.n	8008668 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800860c:	4b1d      	ldr	r3, [pc, #116]	; (8008684 <HAL_RCC_GetSysClockFreq+0xb8>)
 800860e:	623b      	str	r3, [r7, #32]
      break;
 8008610:	e02d      	b.n	800866e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	0c9b      	lsrs	r3, r3, #18
 8008616:	f003 030f 	and.w	r3, r3, #15
 800861a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800861e:	4413      	add	r3, r2
 8008620:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008624:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d013      	beq.n	8008658 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008630:	4b13      	ldr	r3, [pc, #76]	; (8008680 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	0c5b      	lsrs	r3, r3, #17
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800863e:	4413      	add	r3, r2
 8008640:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008644:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	4a0e      	ldr	r2, [pc, #56]	; (8008684 <HAL_RCC_GetSysClockFreq+0xb8>)
 800864a:	fb02 f203 	mul.w	r2, r2, r3
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	fbb2 f3f3 	udiv	r3, r2, r3
 8008654:	627b      	str	r3, [r7, #36]	; 0x24
 8008656:	e004      	b.n	8008662 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	4a0b      	ldr	r2, [pc, #44]	; (8008688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800865c:	fb02 f303 	mul.w	r3, r2, r3
 8008660:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008664:	623b      	str	r3, [r7, #32]
      break;
 8008666:	e002      	b.n	800866e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008668:	4b06      	ldr	r3, [pc, #24]	; (8008684 <HAL_RCC_GetSysClockFreq+0xb8>)
 800866a:	623b      	str	r3, [r7, #32]
      break;
 800866c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800866e:	6a3b      	ldr	r3, [r7, #32]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3728      	adds	r7, #40	; 0x28
 8008674:	46bd      	mov	sp, r7
 8008676:	bc90      	pop	{r4, r7}
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	08008ffc 	.word	0x08008ffc
 8008680:	40021000 	.word	0x40021000
 8008684:	007a1200 	.word	0x007a1200
 8008688:	003d0900 	.word	0x003d0900

0800868c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800868c:	b480      	push	{r7}
 800868e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008690:	4b02      	ldr	r3, [pc, #8]	; (800869c <HAL_RCC_GetHCLKFreq+0x10>)
 8008692:	681b      	ldr	r3, [r3, #0]
}
 8008694:	4618      	mov	r0, r3
 8008696:	46bd      	mov	sp, r7
 8008698:	bc80      	pop	{r7}
 800869a:	4770      	bx	lr
 800869c:	20000000 	.word	0x20000000

080086a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80086a4:	f7ff fff2 	bl	800868c <HAL_RCC_GetHCLKFreq>
 80086a8:	4602      	mov	r2, r0
 80086aa:	4b05      	ldr	r3, [pc, #20]	; (80086c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	0a1b      	lsrs	r3, r3, #8
 80086b0:	f003 0307 	and.w	r3, r3, #7
 80086b4:	4903      	ldr	r1, [pc, #12]	; (80086c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086b6:	5ccb      	ldrb	r3, [r1, r3]
 80086b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086bc:	4618      	mov	r0, r3
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	40021000 	.word	0x40021000
 80086c4:	0800c930 	.word	0x0800c930

080086c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80086d0:	4b0a      	ldr	r3, [pc, #40]	; (80086fc <RCC_Delay+0x34>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a0a      	ldr	r2, [pc, #40]	; (8008700 <RCC_Delay+0x38>)
 80086d6:	fba2 2303 	umull	r2, r3, r2, r3
 80086da:	0a5b      	lsrs	r3, r3, #9
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	fb02 f303 	mul.w	r3, r2, r3
 80086e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80086e4:	bf00      	nop
  }
  while (Delay --);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	1e5a      	subs	r2, r3, #1
 80086ea:	60fa      	str	r2, [r7, #12]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1f9      	bne.n	80086e4 <RCC_Delay+0x1c>
}
 80086f0:	bf00      	nop
 80086f2:	bf00      	nop
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bc80      	pop	{r7}
 80086fa:	4770      	bx	lr
 80086fc:	20000000 	.word	0x20000000
 8008700:	10624dd3 	.word	0x10624dd3

08008704 <sqrt>:
 8008704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008706:	4606      	mov	r6, r0
 8008708:	460f      	mov	r7, r1
 800870a:	f000 f84f 	bl	80087ac <__ieee754_sqrt>
 800870e:	4b12      	ldr	r3, [pc, #72]	; (8008758 <sqrt+0x54>)
 8008710:	4604      	mov	r4, r0
 8008712:	f993 3000 	ldrsb.w	r3, [r3]
 8008716:	460d      	mov	r5, r1
 8008718:	3301      	adds	r3, #1
 800871a:	d019      	beq.n	8008750 <sqrt+0x4c>
 800871c:	4632      	mov	r2, r6
 800871e:	463b      	mov	r3, r7
 8008720:	4630      	mov	r0, r6
 8008722:	4639      	mov	r1, r7
 8008724:	f7f8 f96a 	bl	80009fc <__aeabi_dcmpun>
 8008728:	b990      	cbnz	r0, 8008750 <sqrt+0x4c>
 800872a:	2200      	movs	r2, #0
 800872c:	2300      	movs	r3, #0
 800872e:	4630      	mov	r0, r6
 8008730:	4639      	mov	r1, r7
 8008732:	f7f8 f93b 	bl	80009ac <__aeabi_dcmplt>
 8008736:	b158      	cbz	r0, 8008750 <sqrt+0x4c>
 8008738:	f000 fc14 	bl	8008f64 <__errno>
 800873c:	2321      	movs	r3, #33	; 0x21
 800873e:	2200      	movs	r2, #0
 8008740:	6003      	str	r3, [r0, #0]
 8008742:	2300      	movs	r3, #0
 8008744:	4610      	mov	r0, r2
 8008746:	4619      	mov	r1, r3
 8008748:	f7f7 ffe8 	bl	800071c <__aeabi_ddiv>
 800874c:	4604      	mov	r4, r0
 800874e:	460d      	mov	r5, r1
 8008750:	4620      	mov	r0, r4
 8008752:	4629      	mov	r1, r5
 8008754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008756:	bf00      	nop
 8008758:	20000009 	.word	0x20000009

0800875c <asinf>:
 800875c:	b538      	push	{r3, r4, r5, lr}
 800875e:	4604      	mov	r4, r0
 8008760:	f000 f8d0 	bl	8008904 <__ieee754_asinf>
 8008764:	4b0e      	ldr	r3, [pc, #56]	; (80087a0 <asinf+0x44>)
 8008766:	4605      	mov	r5, r0
 8008768:	f993 3000 	ldrsb.w	r3, [r3]
 800876c:	3301      	adds	r3, #1
 800876e:	d015      	beq.n	800879c <asinf+0x40>
 8008770:	4621      	mov	r1, r4
 8008772:	4620      	mov	r0, r4
 8008774:	f7f8 fc7c 	bl	8001070 <__aeabi_fcmpun>
 8008778:	b980      	cbnz	r0, 800879c <asinf+0x40>
 800877a:	4620      	mov	r0, r4
 800877c:	f000 fbea 	bl	8008f54 <fabsf>
 8008780:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008784:	f7f8 fc6a 	bl	800105c <__aeabi_fcmpgt>
 8008788:	b140      	cbz	r0, 800879c <asinf+0x40>
 800878a:	f000 fbeb 	bl	8008f64 <__errno>
 800878e:	2321      	movs	r3, #33	; 0x21
 8008790:	6003      	str	r3, [r0, #0]
 8008792:	4804      	ldr	r0, [pc, #16]	; (80087a4 <asinf+0x48>)
 8008794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008798:	f000 bbe0 	b.w	8008f5c <nanf>
 800879c:	4628      	mov	r0, r5
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	20000009 	.word	0x20000009
 80087a4:	0800c938 	.word	0x0800c938

080087a8 <atan2f>:
 80087a8:	f000 b9f0 	b.w	8008b8c <__ieee754_atan2f>

080087ac <__ieee754_sqrt>:
 80087ac:	f8df c150 	ldr.w	ip, [pc, #336]	; 8008900 <__ieee754_sqrt+0x154>
 80087b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b4:	ea3c 0c01 	bics.w	ip, ip, r1
 80087b8:	460b      	mov	r3, r1
 80087ba:	4606      	mov	r6, r0
 80087bc:	460d      	mov	r5, r1
 80087be:	460a      	mov	r2, r1
 80087c0:	4607      	mov	r7, r0
 80087c2:	4604      	mov	r4, r0
 80087c4:	d10e      	bne.n	80087e4 <__ieee754_sqrt+0x38>
 80087c6:	4602      	mov	r2, r0
 80087c8:	f7f7 fe7e 	bl	80004c8 <__aeabi_dmul>
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	4630      	mov	r0, r6
 80087d2:	4629      	mov	r1, r5
 80087d4:	f7f7 fcc2 	bl	800015c <__adddf3>
 80087d8:	4606      	mov	r6, r0
 80087da:	460d      	mov	r5, r1
 80087dc:	4630      	mov	r0, r6
 80087de:	4629      	mov	r1, r5
 80087e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e4:	2900      	cmp	r1, #0
 80087e6:	dc0d      	bgt.n	8008804 <__ieee754_sqrt+0x58>
 80087e8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80087ec:	ea5c 0707 	orrs.w	r7, ip, r7
 80087f0:	d0f4      	beq.n	80087dc <__ieee754_sqrt+0x30>
 80087f2:	b139      	cbz	r1, 8008804 <__ieee754_sqrt+0x58>
 80087f4:	4602      	mov	r2, r0
 80087f6:	f7f7 fcaf 	bl	8000158 <__aeabi_dsub>
 80087fa:	4602      	mov	r2, r0
 80087fc:	460b      	mov	r3, r1
 80087fe:	f7f7 ff8d 	bl	800071c <__aeabi_ddiv>
 8008802:	e7e9      	b.n	80087d8 <__ieee754_sqrt+0x2c>
 8008804:	1512      	asrs	r2, r2, #20
 8008806:	d074      	beq.n	80088f2 <__ieee754_sqrt+0x146>
 8008808:	2000      	movs	r0, #0
 800880a:	07d5      	lsls	r5, r2, #31
 800880c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008810:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8008814:	bf5e      	ittt	pl
 8008816:	0fe3      	lsrpl	r3, r4, #31
 8008818:	0064      	lslpl	r4, r4, #1
 800881a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800881e:	0fe3      	lsrs	r3, r4, #31
 8008820:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008824:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8008828:	2516      	movs	r5, #22
 800882a:	4601      	mov	r1, r0
 800882c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008830:	1076      	asrs	r6, r6, #1
 8008832:	0064      	lsls	r4, r4, #1
 8008834:	188f      	adds	r7, r1, r2
 8008836:	429f      	cmp	r7, r3
 8008838:	bfde      	ittt	le
 800883a:	1bdb      	suble	r3, r3, r7
 800883c:	18b9      	addle	r1, r7, r2
 800883e:	1880      	addle	r0, r0, r2
 8008840:	005b      	lsls	r3, r3, #1
 8008842:	3d01      	subs	r5, #1
 8008844:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008848:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800884c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008850:	d1f0      	bne.n	8008834 <__ieee754_sqrt+0x88>
 8008852:	462a      	mov	r2, r5
 8008854:	f04f 0e20 	mov.w	lr, #32
 8008858:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800885c:	428b      	cmp	r3, r1
 800885e:	eb07 0c05 	add.w	ip, r7, r5
 8008862:	dc02      	bgt.n	800886a <__ieee754_sqrt+0xbe>
 8008864:	d113      	bne.n	800888e <__ieee754_sqrt+0xe2>
 8008866:	45a4      	cmp	ip, r4
 8008868:	d811      	bhi.n	800888e <__ieee754_sqrt+0xe2>
 800886a:	f1bc 0f00 	cmp.w	ip, #0
 800886e:	eb0c 0507 	add.w	r5, ip, r7
 8008872:	da43      	bge.n	80088fc <__ieee754_sqrt+0x150>
 8008874:	2d00      	cmp	r5, #0
 8008876:	db41      	blt.n	80088fc <__ieee754_sqrt+0x150>
 8008878:	f101 0801 	add.w	r8, r1, #1
 800887c:	1a5b      	subs	r3, r3, r1
 800887e:	4641      	mov	r1, r8
 8008880:	45a4      	cmp	ip, r4
 8008882:	bf88      	it	hi
 8008884:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008888:	eba4 040c 	sub.w	r4, r4, ip
 800888c:	443a      	add	r2, r7
 800888e:	005b      	lsls	r3, r3, #1
 8008890:	f1be 0e01 	subs.w	lr, lr, #1
 8008894:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008898:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800889c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80088a0:	d1dc      	bne.n	800885c <__ieee754_sqrt+0xb0>
 80088a2:	4323      	orrs	r3, r4
 80088a4:	d006      	beq.n	80088b4 <__ieee754_sqrt+0x108>
 80088a6:	1c54      	adds	r4, r2, #1
 80088a8:	bf0b      	itete	eq
 80088aa:	4672      	moveq	r2, lr
 80088ac:	3201      	addne	r2, #1
 80088ae:	3001      	addeq	r0, #1
 80088b0:	f022 0201 	bicne.w	r2, r2, #1
 80088b4:	1043      	asrs	r3, r0, #1
 80088b6:	07c1      	lsls	r1, r0, #31
 80088b8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80088bc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80088c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80088c4:	bf48      	it	mi
 80088c6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80088ca:	4610      	mov	r0, r2
 80088cc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80088d0:	e782      	b.n	80087d8 <__ieee754_sqrt+0x2c>
 80088d2:	0ae3      	lsrs	r3, r4, #11
 80088d4:	3915      	subs	r1, #21
 80088d6:	0564      	lsls	r4, r4, #21
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d0fa      	beq.n	80088d2 <__ieee754_sqrt+0x126>
 80088dc:	02de      	lsls	r6, r3, #11
 80088de:	d50a      	bpl.n	80088f6 <__ieee754_sqrt+0x14a>
 80088e0:	f1c2 0020 	rsb	r0, r2, #32
 80088e4:	fa24 f000 	lsr.w	r0, r4, r0
 80088e8:	1e55      	subs	r5, r2, #1
 80088ea:	4094      	lsls	r4, r2
 80088ec:	4303      	orrs	r3, r0
 80088ee:	1b4a      	subs	r2, r1, r5
 80088f0:	e78a      	b.n	8008808 <__ieee754_sqrt+0x5c>
 80088f2:	4611      	mov	r1, r2
 80088f4:	e7f0      	b.n	80088d8 <__ieee754_sqrt+0x12c>
 80088f6:	005b      	lsls	r3, r3, #1
 80088f8:	3201      	adds	r2, #1
 80088fa:	e7ef      	b.n	80088dc <__ieee754_sqrt+0x130>
 80088fc:	4688      	mov	r8, r1
 80088fe:	e7bd      	b.n	800887c <__ieee754_sqrt+0xd0>
 8008900:	7ff00000 	.word	0x7ff00000

08008904 <__ieee754_asinf>:
 8008904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008908:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800890c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8008910:	4604      	mov	r4, r0
 8008912:	4605      	mov	r5, r0
 8008914:	d10c      	bne.n	8008930 <__ieee754_asinf+0x2c>
 8008916:	498d      	ldr	r1, [pc, #564]	; (8008b4c <__ieee754_asinf+0x248>)
 8008918:	f7f8 f9e4 	bl	8000ce4 <__aeabi_fmul>
 800891c:	498c      	ldr	r1, [pc, #560]	; (8008b50 <__ieee754_asinf+0x24c>)
 800891e:	4605      	mov	r5, r0
 8008920:	4620      	mov	r0, r4
 8008922:	f7f8 f9df 	bl	8000ce4 <__aeabi_fmul>
 8008926:	4601      	mov	r1, r0
 8008928:	4628      	mov	r0, r5
 800892a:	f7f8 f8d3 	bl	8000ad4 <__addsf3>
 800892e:	e006      	b.n	800893e <__ieee754_asinf+0x3a>
 8008930:	dd07      	ble.n	8008942 <__ieee754_asinf+0x3e>
 8008932:	4601      	mov	r1, r0
 8008934:	f7f8 f8cc 	bl	8000ad0 <__aeabi_fsub>
 8008938:	4601      	mov	r1, r0
 800893a:	f7f8 fa87 	bl	8000e4c <__aeabi_fdiv>
 800893e:	4604      	mov	r4, r0
 8008940:	e00e      	b.n	8008960 <__ieee754_asinf+0x5c>
 8008942:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 8008946:	da58      	bge.n	80089fa <__ieee754_asinf+0xf6>
 8008948:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800894c:	da0b      	bge.n	8008966 <__ieee754_asinf+0x62>
 800894e:	4981      	ldr	r1, [pc, #516]	; (8008b54 <__ieee754_asinf+0x250>)
 8008950:	f7f8 f8c0 	bl	8000ad4 <__addsf3>
 8008954:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008958:	f7f8 fb80 	bl	800105c <__aeabi_fcmpgt>
 800895c:	2800      	cmp	r0, #0
 800895e:	d04c      	beq.n	80089fa <__ieee754_asinf+0xf6>
 8008960:	4620      	mov	r0, r4
 8008962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008966:	4601      	mov	r1, r0
 8008968:	f7f8 f9bc 	bl	8000ce4 <__aeabi_fmul>
 800896c:	4605      	mov	r5, r0
 800896e:	497a      	ldr	r1, [pc, #488]	; (8008b58 <__ieee754_asinf+0x254>)
 8008970:	f7f8 f9b8 	bl	8000ce4 <__aeabi_fmul>
 8008974:	4979      	ldr	r1, [pc, #484]	; (8008b5c <__ieee754_asinf+0x258>)
 8008976:	f7f8 f8ad 	bl	8000ad4 <__addsf3>
 800897a:	4629      	mov	r1, r5
 800897c:	f7f8 f9b2 	bl	8000ce4 <__aeabi_fmul>
 8008980:	4977      	ldr	r1, [pc, #476]	; (8008b60 <__ieee754_asinf+0x25c>)
 8008982:	f7f8 f8a5 	bl	8000ad0 <__aeabi_fsub>
 8008986:	4629      	mov	r1, r5
 8008988:	f7f8 f9ac 	bl	8000ce4 <__aeabi_fmul>
 800898c:	4975      	ldr	r1, [pc, #468]	; (8008b64 <__ieee754_asinf+0x260>)
 800898e:	f7f8 f8a1 	bl	8000ad4 <__addsf3>
 8008992:	4629      	mov	r1, r5
 8008994:	f7f8 f9a6 	bl	8000ce4 <__aeabi_fmul>
 8008998:	4973      	ldr	r1, [pc, #460]	; (8008b68 <__ieee754_asinf+0x264>)
 800899a:	f7f8 f899 	bl	8000ad0 <__aeabi_fsub>
 800899e:	4629      	mov	r1, r5
 80089a0:	f7f8 f9a0 	bl	8000ce4 <__aeabi_fmul>
 80089a4:	4971      	ldr	r1, [pc, #452]	; (8008b6c <__ieee754_asinf+0x268>)
 80089a6:	f7f8 f895 	bl	8000ad4 <__addsf3>
 80089aa:	4629      	mov	r1, r5
 80089ac:	f7f8 f99a 	bl	8000ce4 <__aeabi_fmul>
 80089b0:	496f      	ldr	r1, [pc, #444]	; (8008b70 <__ieee754_asinf+0x26c>)
 80089b2:	4606      	mov	r6, r0
 80089b4:	4628      	mov	r0, r5
 80089b6:	f7f8 f995 	bl	8000ce4 <__aeabi_fmul>
 80089ba:	496e      	ldr	r1, [pc, #440]	; (8008b74 <__ieee754_asinf+0x270>)
 80089bc:	f7f8 f888 	bl	8000ad0 <__aeabi_fsub>
 80089c0:	4629      	mov	r1, r5
 80089c2:	f7f8 f98f 	bl	8000ce4 <__aeabi_fmul>
 80089c6:	496c      	ldr	r1, [pc, #432]	; (8008b78 <__ieee754_asinf+0x274>)
 80089c8:	f7f8 f884 	bl	8000ad4 <__addsf3>
 80089cc:	4629      	mov	r1, r5
 80089ce:	f7f8 f989 	bl	8000ce4 <__aeabi_fmul>
 80089d2:	496a      	ldr	r1, [pc, #424]	; (8008b7c <__ieee754_asinf+0x278>)
 80089d4:	f7f8 f87c 	bl	8000ad0 <__aeabi_fsub>
 80089d8:	4629      	mov	r1, r5
 80089da:	f7f8 f983 	bl	8000ce4 <__aeabi_fmul>
 80089de:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80089e2:	f7f8 f877 	bl	8000ad4 <__addsf3>
 80089e6:	4601      	mov	r1, r0
 80089e8:	4630      	mov	r0, r6
 80089ea:	f7f8 fa2f 	bl	8000e4c <__aeabi_fdiv>
 80089ee:	4621      	mov	r1, r4
 80089f0:	f7f8 f978 	bl	8000ce4 <__aeabi_fmul>
 80089f4:	4601      	mov	r1, r0
 80089f6:	4620      	mov	r0, r4
 80089f8:	e797      	b.n	800892a <__ieee754_asinf+0x26>
 80089fa:	4620      	mov	r0, r4
 80089fc:	f000 faaa 	bl	8008f54 <fabsf>
 8008a00:	4601      	mov	r1, r0
 8008a02:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008a06:	f7f8 f863 	bl	8000ad0 <__aeabi_fsub>
 8008a0a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008a0e:	f7f8 f969 	bl	8000ce4 <__aeabi_fmul>
 8008a12:	4606      	mov	r6, r0
 8008a14:	4950      	ldr	r1, [pc, #320]	; (8008b58 <__ieee754_asinf+0x254>)
 8008a16:	f7f8 f965 	bl	8000ce4 <__aeabi_fmul>
 8008a1a:	4950      	ldr	r1, [pc, #320]	; (8008b5c <__ieee754_asinf+0x258>)
 8008a1c:	f7f8 f85a 	bl	8000ad4 <__addsf3>
 8008a20:	4631      	mov	r1, r6
 8008a22:	f7f8 f95f 	bl	8000ce4 <__aeabi_fmul>
 8008a26:	494e      	ldr	r1, [pc, #312]	; (8008b60 <__ieee754_asinf+0x25c>)
 8008a28:	f7f8 f852 	bl	8000ad0 <__aeabi_fsub>
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	f7f8 f959 	bl	8000ce4 <__aeabi_fmul>
 8008a32:	494c      	ldr	r1, [pc, #304]	; (8008b64 <__ieee754_asinf+0x260>)
 8008a34:	f7f8 f84e 	bl	8000ad4 <__addsf3>
 8008a38:	4631      	mov	r1, r6
 8008a3a:	f7f8 f953 	bl	8000ce4 <__aeabi_fmul>
 8008a3e:	494a      	ldr	r1, [pc, #296]	; (8008b68 <__ieee754_asinf+0x264>)
 8008a40:	f7f8 f846 	bl	8000ad0 <__aeabi_fsub>
 8008a44:	4631      	mov	r1, r6
 8008a46:	f7f8 f94d 	bl	8000ce4 <__aeabi_fmul>
 8008a4a:	4948      	ldr	r1, [pc, #288]	; (8008b6c <__ieee754_asinf+0x268>)
 8008a4c:	f7f8 f842 	bl	8000ad4 <__addsf3>
 8008a50:	4631      	mov	r1, r6
 8008a52:	f7f8 f947 	bl	8000ce4 <__aeabi_fmul>
 8008a56:	4946      	ldr	r1, [pc, #280]	; (8008b70 <__ieee754_asinf+0x26c>)
 8008a58:	4681      	mov	r9, r0
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	f7f8 f942 	bl	8000ce4 <__aeabi_fmul>
 8008a60:	4944      	ldr	r1, [pc, #272]	; (8008b74 <__ieee754_asinf+0x270>)
 8008a62:	f7f8 f835 	bl	8000ad0 <__aeabi_fsub>
 8008a66:	4631      	mov	r1, r6
 8008a68:	f7f8 f93c 	bl	8000ce4 <__aeabi_fmul>
 8008a6c:	4942      	ldr	r1, [pc, #264]	; (8008b78 <__ieee754_asinf+0x274>)
 8008a6e:	f7f8 f831 	bl	8000ad4 <__addsf3>
 8008a72:	4631      	mov	r1, r6
 8008a74:	f7f8 f936 	bl	8000ce4 <__aeabi_fmul>
 8008a78:	4940      	ldr	r1, [pc, #256]	; (8008b7c <__ieee754_asinf+0x278>)
 8008a7a:	f7f8 f829 	bl	8000ad0 <__aeabi_fsub>
 8008a7e:	4631      	mov	r1, r6
 8008a80:	f7f8 f930 	bl	8000ce4 <__aeabi_fmul>
 8008a84:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008a88:	f7f8 f824 	bl	8000ad4 <__addsf3>
 8008a8c:	4682      	mov	sl, r0
 8008a8e:	4630      	mov	r0, r6
 8008a90:	f000 f902 	bl	8008c98 <__ieee754_sqrtf>
 8008a94:	4b3a      	ldr	r3, [pc, #232]	; (8008b80 <__ieee754_asinf+0x27c>)
 8008a96:	4607      	mov	r7, r0
 8008a98:	4598      	cmp	r8, r3
 8008a9a:	dd1a      	ble.n	8008ad2 <__ieee754_asinf+0x1ce>
 8008a9c:	4651      	mov	r1, sl
 8008a9e:	4648      	mov	r0, r9
 8008aa0:	f7f8 f9d4 	bl	8000e4c <__aeabi_fdiv>
 8008aa4:	4639      	mov	r1, r7
 8008aa6:	f7f8 f91d 	bl	8000ce4 <__aeabi_fmul>
 8008aaa:	4639      	mov	r1, r7
 8008aac:	f7f8 f812 	bl	8000ad4 <__addsf3>
 8008ab0:	4601      	mov	r1, r0
 8008ab2:	f7f8 f80f 	bl	8000ad4 <__addsf3>
 8008ab6:	4933      	ldr	r1, [pc, #204]	; (8008b84 <__ieee754_asinf+0x280>)
 8008ab8:	f7f8 f80c 	bl	8000ad4 <__addsf3>
 8008abc:	4601      	mov	r1, r0
 8008abe:	4823      	ldr	r0, [pc, #140]	; (8008b4c <__ieee754_asinf+0x248>)
 8008ac0:	f7f8 f806 	bl	8000ad0 <__aeabi_fsub>
 8008ac4:	2d00      	cmp	r5, #0
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	f73f af4a 	bgt.w	8008960 <__ieee754_asinf+0x5c>
 8008acc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008ad0:	e735      	b.n	800893e <__ieee754_asinf+0x3a>
 8008ad2:	4601      	mov	r1, r0
 8008ad4:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8008ad8:	f7f7 fffc 	bl	8000ad4 <__addsf3>
 8008adc:	4651      	mov	r1, sl
 8008ade:	4604      	mov	r4, r0
 8008ae0:	4648      	mov	r0, r9
 8008ae2:	f7f8 f9b3 	bl	8000e4c <__aeabi_fdiv>
 8008ae6:	4601      	mov	r1, r0
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f7f8 f8fb 	bl	8000ce4 <__aeabi_fmul>
 8008aee:	f028 080f 	bic.w	r8, r8, #15
 8008af2:	4681      	mov	r9, r0
 8008af4:	4641      	mov	r1, r8
 8008af6:	4640      	mov	r0, r8
 8008af8:	f7f8 f8f4 	bl	8000ce4 <__aeabi_fmul>
 8008afc:	4601      	mov	r1, r0
 8008afe:	4630      	mov	r0, r6
 8008b00:	f7f7 ffe6 	bl	8000ad0 <__aeabi_fsub>
 8008b04:	4641      	mov	r1, r8
 8008b06:	4604      	mov	r4, r0
 8008b08:	4638      	mov	r0, r7
 8008b0a:	f7f7 ffe3 	bl	8000ad4 <__addsf3>
 8008b0e:	4601      	mov	r1, r0
 8008b10:	4620      	mov	r0, r4
 8008b12:	f7f8 f99b 	bl	8000e4c <__aeabi_fdiv>
 8008b16:	4601      	mov	r1, r0
 8008b18:	f7f7 ffdc 	bl	8000ad4 <__addsf3>
 8008b1c:	4601      	mov	r1, r0
 8008b1e:	480c      	ldr	r0, [pc, #48]	; (8008b50 <__ieee754_asinf+0x24c>)
 8008b20:	f7f7 ffd6 	bl	8000ad0 <__aeabi_fsub>
 8008b24:	4601      	mov	r1, r0
 8008b26:	4648      	mov	r0, r9
 8008b28:	f7f7 ffd2 	bl	8000ad0 <__aeabi_fsub>
 8008b2c:	4641      	mov	r1, r8
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4640      	mov	r0, r8
 8008b32:	f7f7 ffcf 	bl	8000ad4 <__addsf3>
 8008b36:	4601      	mov	r1, r0
 8008b38:	4813      	ldr	r0, [pc, #76]	; (8008b88 <__ieee754_asinf+0x284>)
 8008b3a:	f7f7 ffc9 	bl	8000ad0 <__aeabi_fsub>
 8008b3e:	4601      	mov	r1, r0
 8008b40:	4620      	mov	r0, r4
 8008b42:	f7f7 ffc5 	bl	8000ad0 <__aeabi_fsub>
 8008b46:	4601      	mov	r1, r0
 8008b48:	480f      	ldr	r0, [pc, #60]	; (8008b88 <__ieee754_asinf+0x284>)
 8008b4a:	e7b9      	b.n	8008ac0 <__ieee754_asinf+0x1bc>
 8008b4c:	3fc90fdb 	.word	0x3fc90fdb
 8008b50:	b33bbd2e 	.word	0xb33bbd2e
 8008b54:	7149f2ca 	.word	0x7149f2ca
 8008b58:	3811ef08 	.word	0x3811ef08
 8008b5c:	3a4f7f04 	.word	0x3a4f7f04
 8008b60:	3d241146 	.word	0x3d241146
 8008b64:	3e4e0aa8 	.word	0x3e4e0aa8
 8008b68:	3ea6b090 	.word	0x3ea6b090
 8008b6c:	3e2aaaab 	.word	0x3e2aaaab
 8008b70:	3d9dc62e 	.word	0x3d9dc62e
 8008b74:	3f303361 	.word	0x3f303361
 8008b78:	4001572d 	.word	0x4001572d
 8008b7c:	4019d139 	.word	0x4019d139
 8008b80:	3f799999 	.word	0x3f799999
 8008b84:	333bbd2e 	.word	0x333bbd2e
 8008b88:	3f490fdb 	.word	0x3f490fdb

08008b8c <__ieee754_atan2f>:
 8008b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008b92:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008b96:	4603      	mov	r3, r0
 8008b98:	dc05      	bgt.n	8008ba6 <__ieee754_atan2f+0x1a>
 8008b9a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008b9e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008ba2:	4607      	mov	r7, r0
 8008ba4:	dd04      	ble.n	8008bb0 <__ieee754_atan2f+0x24>
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7f7 ff94 	bl	8000ad4 <__addsf3>
 8008bac:	4603      	mov	r3, r0
 8008bae:	e011      	b.n	8008bd4 <__ieee754_atan2f+0x48>
 8008bb0:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8008bb4:	d103      	bne.n	8008bbe <__ieee754_atan2f+0x32>
 8008bb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008bba:	f000 b8bf 	b.w	8008d3c <atanf>
 8008bbe:	178c      	asrs	r4, r1, #30
 8008bc0:	f004 0402 	and.w	r4, r4, #2
 8008bc4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008bc8:	b932      	cbnz	r2, 8008bd8 <__ieee754_atan2f+0x4c>
 8008bca:	2c02      	cmp	r4, #2
 8008bcc:	d04c      	beq.n	8008c68 <__ieee754_atan2f+0xdc>
 8008bce:	2c03      	cmp	r4, #3
 8008bd0:	d100      	bne.n	8008bd4 <__ieee754_atan2f+0x48>
 8008bd2:	4b29      	ldr	r3, [pc, #164]	; (8008c78 <__ieee754_atan2f+0xec>)
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bd8:	b91e      	cbnz	r6, 8008be2 <__ieee754_atan2f+0x56>
 8008bda:	2f00      	cmp	r7, #0
 8008bdc:	da4a      	bge.n	8008c74 <__ieee754_atan2f+0xe8>
 8008bde:	4b27      	ldr	r3, [pc, #156]	; (8008c7c <__ieee754_atan2f+0xf0>)
 8008be0:	e7f8      	b.n	8008bd4 <__ieee754_atan2f+0x48>
 8008be2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008be6:	d10e      	bne.n	8008c06 <__ieee754_atan2f+0x7a>
 8008be8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008bec:	f104 34ff 	add.w	r4, r4, #4294967295
 8008bf0:	d105      	bne.n	8008bfe <__ieee754_atan2f+0x72>
 8008bf2:	2c02      	cmp	r4, #2
 8008bf4:	d83a      	bhi.n	8008c6c <__ieee754_atan2f+0xe0>
 8008bf6:	4b22      	ldr	r3, [pc, #136]	; (8008c80 <__ieee754_atan2f+0xf4>)
 8008bf8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008bfc:	e7ea      	b.n	8008bd4 <__ieee754_atan2f+0x48>
 8008bfe:	2c02      	cmp	r4, #2
 8008c00:	d836      	bhi.n	8008c70 <__ieee754_atan2f+0xe4>
 8008c02:	4b20      	ldr	r3, [pc, #128]	; (8008c84 <__ieee754_atan2f+0xf8>)
 8008c04:	e7f8      	b.n	8008bf8 <__ieee754_atan2f+0x6c>
 8008c06:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008c0a:	d0e6      	beq.n	8008bda <__ieee754_atan2f+0x4e>
 8008c0c:	1b92      	subs	r2, r2, r6
 8008c0e:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8008c12:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8008c16:	da17      	bge.n	8008c48 <__ieee754_atan2f+0xbc>
 8008c18:	2900      	cmp	r1, #0
 8008c1a:	da01      	bge.n	8008c20 <__ieee754_atan2f+0x94>
 8008c1c:	303c      	adds	r0, #60	; 0x3c
 8008c1e:	db15      	blt.n	8008c4c <__ieee754_atan2f+0xc0>
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7f8 f913 	bl	8000e4c <__aeabi_fdiv>
 8008c26:	f000 f995 	bl	8008f54 <fabsf>
 8008c2a:	f000 f887 	bl	8008d3c <atanf>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2c01      	cmp	r4, #1
 8008c32:	d00d      	beq.n	8008c50 <__ieee754_atan2f+0xc4>
 8008c34:	2c02      	cmp	r4, #2
 8008c36:	d00e      	beq.n	8008c56 <__ieee754_atan2f+0xca>
 8008c38:	2c00      	cmp	r4, #0
 8008c3a:	d0cb      	beq.n	8008bd4 <__ieee754_atan2f+0x48>
 8008c3c:	4912      	ldr	r1, [pc, #72]	; (8008c88 <__ieee754_atan2f+0xfc>)
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7f7 ff48 	bl	8000ad4 <__addsf3>
 8008c44:	4911      	ldr	r1, [pc, #68]	; (8008c8c <__ieee754_atan2f+0x100>)
 8008c46:	e00c      	b.n	8008c62 <__ieee754_atan2f+0xd6>
 8008c48:	4b11      	ldr	r3, [pc, #68]	; (8008c90 <__ieee754_atan2f+0x104>)
 8008c4a:	e7f1      	b.n	8008c30 <__ieee754_atan2f+0xa4>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	e7ef      	b.n	8008c30 <__ieee754_atan2f+0xa4>
 8008c50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008c54:	e7be      	b.n	8008bd4 <__ieee754_atan2f+0x48>
 8008c56:	490c      	ldr	r1, [pc, #48]	; (8008c88 <__ieee754_atan2f+0xfc>)
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7f7 ff3b 	bl	8000ad4 <__addsf3>
 8008c5e:	4601      	mov	r1, r0
 8008c60:	480a      	ldr	r0, [pc, #40]	; (8008c8c <__ieee754_atan2f+0x100>)
 8008c62:	f7f7 ff35 	bl	8000ad0 <__aeabi_fsub>
 8008c66:	e7a1      	b.n	8008bac <__ieee754_atan2f+0x20>
 8008c68:	4b08      	ldr	r3, [pc, #32]	; (8008c8c <__ieee754_atan2f+0x100>)
 8008c6a:	e7b3      	b.n	8008bd4 <__ieee754_atan2f+0x48>
 8008c6c:	4b09      	ldr	r3, [pc, #36]	; (8008c94 <__ieee754_atan2f+0x108>)
 8008c6e:	e7b1      	b.n	8008bd4 <__ieee754_atan2f+0x48>
 8008c70:	2300      	movs	r3, #0
 8008c72:	e7af      	b.n	8008bd4 <__ieee754_atan2f+0x48>
 8008c74:	4b06      	ldr	r3, [pc, #24]	; (8008c90 <__ieee754_atan2f+0x104>)
 8008c76:	e7ad      	b.n	8008bd4 <__ieee754_atan2f+0x48>
 8008c78:	c0490fdb 	.word	0xc0490fdb
 8008c7c:	bfc90fdb 	.word	0xbfc90fdb
 8008c80:	0800c93c 	.word	0x0800c93c
 8008c84:	0800c948 	.word	0x0800c948
 8008c88:	33bbbd2e 	.word	0x33bbbd2e
 8008c8c:	40490fdb 	.word	0x40490fdb
 8008c90:	3fc90fdb 	.word	0x3fc90fdb
 8008c94:	3f490fdb 	.word	0x3f490fdb

08008c98 <__ieee754_sqrtf>:
 8008c98:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008c9c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008ca0:	b570      	push	{r4, r5, r6, lr}
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	d309      	bcc.n	8008cbc <__ieee754_sqrtf+0x24>
 8008ca8:	4601      	mov	r1, r0
 8008caa:	f7f8 f81b 	bl	8000ce4 <__aeabi_fmul>
 8008cae:	4601      	mov	r1, r0
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f7f7 ff0f 	bl	8000ad4 <__addsf3>
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	4620      	mov	r0, r4
 8008cba:	bd70      	pop	{r4, r5, r6, pc}
 8008cbc:	2a00      	cmp	r2, #0
 8008cbe:	d0fb      	beq.n	8008cb8 <__ieee754_sqrtf+0x20>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	da06      	bge.n	8008cd2 <__ieee754_sqrtf+0x3a>
 8008cc4:	4601      	mov	r1, r0
 8008cc6:	f7f7 ff03 	bl	8000ad0 <__aeabi_fsub>
 8008cca:	4601      	mov	r1, r0
 8008ccc:	f7f8 f8be 	bl	8000e4c <__aeabi_fdiv>
 8008cd0:	e7f1      	b.n	8008cb6 <__ieee754_sqrtf+0x1e>
 8008cd2:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8008cd6:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8008cda:	d029      	beq.n	8008d30 <__ieee754_sqrtf+0x98>
 8008cdc:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8008ce0:	07cb      	lsls	r3, r1, #31
 8008ce2:	f04f 0300 	mov.w	r3, #0
 8008ce6:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8008cea:	f04f 0419 	mov.w	r4, #25
 8008cee:	461e      	mov	r6, r3
 8008cf0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8008cf4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008cf8:	bf58      	it	pl
 8008cfa:	0052      	lslpl	r2, r2, #1
 8008cfc:	1040      	asrs	r0, r0, #1
 8008cfe:	0052      	lsls	r2, r2, #1
 8008d00:	1875      	adds	r5, r6, r1
 8008d02:	4295      	cmp	r5, r2
 8008d04:	bfde      	ittt	le
 8008d06:	186e      	addle	r6, r5, r1
 8008d08:	1b52      	suble	r2, r2, r5
 8008d0a:	185b      	addle	r3, r3, r1
 8008d0c:	3c01      	subs	r4, #1
 8008d0e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008d12:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008d16:	d1f3      	bne.n	8008d00 <__ieee754_sqrtf+0x68>
 8008d18:	b112      	cbz	r2, 8008d20 <__ieee754_sqrtf+0x88>
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	f023 0301 	bic.w	r3, r3, #1
 8008d20:	105c      	asrs	r4, r3, #1
 8008d22:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8008d26:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8008d2a:	e7c5      	b.n	8008cb8 <__ieee754_sqrtf+0x20>
 8008d2c:	005b      	lsls	r3, r3, #1
 8008d2e:	3201      	adds	r2, #1
 8008d30:	0218      	lsls	r0, r3, #8
 8008d32:	d5fb      	bpl.n	8008d2c <__ieee754_sqrtf+0x94>
 8008d34:	3a01      	subs	r2, #1
 8008d36:	1a89      	subs	r1, r1, r2
 8008d38:	e7d0      	b.n	8008cdc <__ieee754_sqrtf+0x44>
	...

08008d3c <atanf>:
 8008d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d40:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8008d44:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8008d48:	4604      	mov	r4, r0
 8008d4a:	4680      	mov	r8, r0
 8008d4c:	db0e      	blt.n	8008d6c <atanf+0x30>
 8008d4e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008d52:	dd04      	ble.n	8008d5e <atanf+0x22>
 8008d54:	4601      	mov	r1, r0
 8008d56:	f7f7 febd 	bl	8000ad4 <__addsf3>
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	e003      	b.n	8008d66 <atanf+0x2a>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	f300 80ce 	bgt.w	8008f00 <atanf+0x1c4>
 8008d64:	4c67      	ldr	r4, [pc, #412]	; (8008f04 <atanf+0x1c8>)
 8008d66:	4620      	mov	r0, r4
 8008d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d6c:	4b66      	ldr	r3, [pc, #408]	; (8008f08 <atanf+0x1cc>)
 8008d6e:	429d      	cmp	r5, r3
 8008d70:	dc0e      	bgt.n	8008d90 <atanf+0x54>
 8008d72:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8008d76:	da08      	bge.n	8008d8a <atanf+0x4e>
 8008d78:	4964      	ldr	r1, [pc, #400]	; (8008f0c <atanf+0x1d0>)
 8008d7a:	f7f7 feab 	bl	8000ad4 <__addsf3>
 8008d7e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008d82:	f7f8 f96b 	bl	800105c <__aeabi_fcmpgt>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	d1ed      	bne.n	8008d66 <atanf+0x2a>
 8008d8a:	f04f 36ff 	mov.w	r6, #4294967295
 8008d8e:	e01c      	b.n	8008dca <atanf+0x8e>
 8008d90:	f000 f8e0 	bl	8008f54 <fabsf>
 8008d94:	4b5e      	ldr	r3, [pc, #376]	; (8008f10 <atanf+0x1d4>)
 8008d96:	4604      	mov	r4, r0
 8008d98:	429d      	cmp	r5, r3
 8008d9a:	dc7c      	bgt.n	8008e96 <atanf+0x15a>
 8008d9c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8008da0:	429d      	cmp	r5, r3
 8008da2:	dc67      	bgt.n	8008e74 <atanf+0x138>
 8008da4:	4601      	mov	r1, r0
 8008da6:	f7f7 fe95 	bl	8000ad4 <__addsf3>
 8008daa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008dae:	f7f7 fe8f 	bl	8000ad0 <__aeabi_fsub>
 8008db2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008db6:	4605      	mov	r5, r0
 8008db8:	4620      	mov	r0, r4
 8008dba:	f7f7 fe8b 	bl	8000ad4 <__addsf3>
 8008dbe:	4601      	mov	r1, r0
 8008dc0:	4628      	mov	r0, r5
 8008dc2:	f7f8 f843 	bl	8000e4c <__aeabi_fdiv>
 8008dc6:	2600      	movs	r6, #0
 8008dc8:	4604      	mov	r4, r0
 8008dca:	4621      	mov	r1, r4
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f7f7 ff89 	bl	8000ce4 <__aeabi_fmul>
 8008dd2:	4601      	mov	r1, r0
 8008dd4:	4607      	mov	r7, r0
 8008dd6:	f7f7 ff85 	bl	8000ce4 <__aeabi_fmul>
 8008dda:	4605      	mov	r5, r0
 8008ddc:	494d      	ldr	r1, [pc, #308]	; (8008f14 <atanf+0x1d8>)
 8008dde:	f7f7 ff81 	bl	8000ce4 <__aeabi_fmul>
 8008de2:	494d      	ldr	r1, [pc, #308]	; (8008f18 <atanf+0x1dc>)
 8008de4:	f7f7 fe76 	bl	8000ad4 <__addsf3>
 8008de8:	4629      	mov	r1, r5
 8008dea:	f7f7 ff7b 	bl	8000ce4 <__aeabi_fmul>
 8008dee:	494b      	ldr	r1, [pc, #300]	; (8008f1c <atanf+0x1e0>)
 8008df0:	f7f7 fe70 	bl	8000ad4 <__addsf3>
 8008df4:	4629      	mov	r1, r5
 8008df6:	f7f7 ff75 	bl	8000ce4 <__aeabi_fmul>
 8008dfa:	4949      	ldr	r1, [pc, #292]	; (8008f20 <atanf+0x1e4>)
 8008dfc:	f7f7 fe6a 	bl	8000ad4 <__addsf3>
 8008e00:	4629      	mov	r1, r5
 8008e02:	f7f7 ff6f 	bl	8000ce4 <__aeabi_fmul>
 8008e06:	4947      	ldr	r1, [pc, #284]	; (8008f24 <atanf+0x1e8>)
 8008e08:	f7f7 fe64 	bl	8000ad4 <__addsf3>
 8008e0c:	4629      	mov	r1, r5
 8008e0e:	f7f7 ff69 	bl	8000ce4 <__aeabi_fmul>
 8008e12:	4945      	ldr	r1, [pc, #276]	; (8008f28 <atanf+0x1ec>)
 8008e14:	f7f7 fe5e 	bl	8000ad4 <__addsf3>
 8008e18:	4639      	mov	r1, r7
 8008e1a:	f7f7 ff63 	bl	8000ce4 <__aeabi_fmul>
 8008e1e:	4943      	ldr	r1, [pc, #268]	; (8008f2c <atanf+0x1f0>)
 8008e20:	4607      	mov	r7, r0
 8008e22:	4628      	mov	r0, r5
 8008e24:	f7f7 ff5e 	bl	8000ce4 <__aeabi_fmul>
 8008e28:	4941      	ldr	r1, [pc, #260]	; (8008f30 <atanf+0x1f4>)
 8008e2a:	f7f7 fe51 	bl	8000ad0 <__aeabi_fsub>
 8008e2e:	4629      	mov	r1, r5
 8008e30:	f7f7 ff58 	bl	8000ce4 <__aeabi_fmul>
 8008e34:	493f      	ldr	r1, [pc, #252]	; (8008f34 <atanf+0x1f8>)
 8008e36:	f7f7 fe4b 	bl	8000ad0 <__aeabi_fsub>
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	f7f7 ff52 	bl	8000ce4 <__aeabi_fmul>
 8008e40:	493d      	ldr	r1, [pc, #244]	; (8008f38 <atanf+0x1fc>)
 8008e42:	f7f7 fe45 	bl	8000ad0 <__aeabi_fsub>
 8008e46:	4629      	mov	r1, r5
 8008e48:	f7f7 ff4c 	bl	8000ce4 <__aeabi_fmul>
 8008e4c:	493b      	ldr	r1, [pc, #236]	; (8008f3c <atanf+0x200>)
 8008e4e:	f7f7 fe3f 	bl	8000ad0 <__aeabi_fsub>
 8008e52:	4629      	mov	r1, r5
 8008e54:	f7f7 ff46 	bl	8000ce4 <__aeabi_fmul>
 8008e58:	4601      	mov	r1, r0
 8008e5a:	4638      	mov	r0, r7
 8008e5c:	f7f7 fe3a 	bl	8000ad4 <__addsf3>
 8008e60:	4621      	mov	r1, r4
 8008e62:	f7f7 ff3f 	bl	8000ce4 <__aeabi_fmul>
 8008e66:	1c73      	adds	r3, r6, #1
 8008e68:	4601      	mov	r1, r0
 8008e6a:	d133      	bne.n	8008ed4 <atanf+0x198>
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	f7f7 fe2f 	bl	8000ad0 <__aeabi_fsub>
 8008e72:	e772      	b.n	8008d5a <atanf+0x1e>
 8008e74:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008e78:	f7f7 fe2a 	bl	8000ad0 <__aeabi_fsub>
 8008e7c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008e80:	4605      	mov	r5, r0
 8008e82:	4620      	mov	r0, r4
 8008e84:	f7f7 fe26 	bl	8000ad4 <__addsf3>
 8008e88:	4601      	mov	r1, r0
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	f7f7 ffde 	bl	8000e4c <__aeabi_fdiv>
 8008e90:	2601      	movs	r6, #1
 8008e92:	4604      	mov	r4, r0
 8008e94:	e799      	b.n	8008dca <atanf+0x8e>
 8008e96:	4b2a      	ldr	r3, [pc, #168]	; (8008f40 <atanf+0x204>)
 8008e98:	429d      	cmp	r5, r3
 8008e9a:	dc14      	bgt.n	8008ec6 <atanf+0x18a>
 8008e9c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8008ea0:	f7f7 fe16 	bl	8000ad0 <__aeabi_fsub>
 8008ea4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8008ea8:	4605      	mov	r5, r0
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f7f7 ff1a 	bl	8000ce4 <__aeabi_fmul>
 8008eb0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008eb4:	f7f7 fe0e 	bl	8000ad4 <__addsf3>
 8008eb8:	4601      	mov	r1, r0
 8008eba:	4628      	mov	r0, r5
 8008ebc:	f7f7 ffc6 	bl	8000e4c <__aeabi_fdiv>
 8008ec0:	2602      	movs	r6, #2
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	e781      	b.n	8008dca <atanf+0x8e>
 8008ec6:	4601      	mov	r1, r0
 8008ec8:	481e      	ldr	r0, [pc, #120]	; (8008f44 <atanf+0x208>)
 8008eca:	f7f7 ffbf 	bl	8000e4c <__aeabi_fdiv>
 8008ece:	2603      	movs	r6, #3
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	e77a      	b.n	8008dca <atanf+0x8e>
 8008ed4:	4b1c      	ldr	r3, [pc, #112]	; (8008f48 <atanf+0x20c>)
 8008ed6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8008eda:	f7f7 fdf9 	bl	8000ad0 <__aeabi_fsub>
 8008ede:	4621      	mov	r1, r4
 8008ee0:	f7f7 fdf6 	bl	8000ad0 <__aeabi_fsub>
 8008ee4:	4b19      	ldr	r3, [pc, #100]	; (8008f4c <atanf+0x210>)
 8008ee6:	4601      	mov	r1, r0
 8008ee8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008eec:	f7f7 fdf0 	bl	8000ad0 <__aeabi_fsub>
 8008ef0:	f1b8 0f00 	cmp.w	r8, #0
 8008ef4:	4604      	mov	r4, r0
 8008ef6:	f6bf af36 	bge.w	8008d66 <atanf+0x2a>
 8008efa:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008efe:	e72c      	b.n	8008d5a <atanf+0x1e>
 8008f00:	4c13      	ldr	r4, [pc, #76]	; (8008f50 <atanf+0x214>)
 8008f02:	e730      	b.n	8008d66 <atanf+0x2a>
 8008f04:	bfc90fdb 	.word	0xbfc90fdb
 8008f08:	3edfffff 	.word	0x3edfffff
 8008f0c:	7149f2ca 	.word	0x7149f2ca
 8008f10:	3f97ffff 	.word	0x3f97ffff
 8008f14:	3c8569d7 	.word	0x3c8569d7
 8008f18:	3d4bda59 	.word	0x3d4bda59
 8008f1c:	3d886b35 	.word	0x3d886b35
 8008f20:	3dba2e6e 	.word	0x3dba2e6e
 8008f24:	3e124925 	.word	0x3e124925
 8008f28:	3eaaaaab 	.word	0x3eaaaaab
 8008f2c:	bd15a221 	.word	0xbd15a221
 8008f30:	3d6ef16b 	.word	0x3d6ef16b
 8008f34:	3d9d8795 	.word	0x3d9d8795
 8008f38:	3de38e38 	.word	0x3de38e38
 8008f3c:	3e4ccccd 	.word	0x3e4ccccd
 8008f40:	401bffff 	.word	0x401bffff
 8008f44:	bf800000 	.word	0xbf800000
 8008f48:	0800c964 	.word	0x0800c964
 8008f4c:	0800c954 	.word	0x0800c954
 8008f50:	3fc90fdb 	.word	0x3fc90fdb

08008f54 <fabsf>:
 8008f54:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008f58:	4770      	bx	lr
	...

08008f5c <nanf>:
 8008f5c:	4800      	ldr	r0, [pc, #0]	; (8008f60 <nanf+0x4>)
 8008f5e:	4770      	bx	lr
 8008f60:	7fc00000 	.word	0x7fc00000

08008f64 <__errno>:
 8008f64:	4b01      	ldr	r3, [pc, #4]	; (8008f6c <__errno+0x8>)
 8008f66:	6818      	ldr	r0, [r3, #0]
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	2000000c 	.word	0x2000000c

08008f70 <__libc_init_array>:
 8008f70:	b570      	push	{r4, r5, r6, lr}
 8008f72:	2600      	movs	r6, #0
 8008f74:	4d0c      	ldr	r5, [pc, #48]	; (8008fa8 <__libc_init_array+0x38>)
 8008f76:	4c0d      	ldr	r4, [pc, #52]	; (8008fac <__libc_init_array+0x3c>)
 8008f78:	1b64      	subs	r4, r4, r5
 8008f7a:	10a4      	asrs	r4, r4, #2
 8008f7c:	42a6      	cmp	r6, r4
 8008f7e:	d109      	bne.n	8008f94 <__libc_init_array+0x24>
 8008f80:	f000 f830 	bl	8008fe4 <_init>
 8008f84:	2600      	movs	r6, #0
 8008f86:	4d0a      	ldr	r5, [pc, #40]	; (8008fb0 <__libc_init_array+0x40>)
 8008f88:	4c0a      	ldr	r4, [pc, #40]	; (8008fb4 <__libc_init_array+0x44>)
 8008f8a:	1b64      	subs	r4, r4, r5
 8008f8c:	10a4      	asrs	r4, r4, #2
 8008f8e:	42a6      	cmp	r6, r4
 8008f90:	d105      	bne.n	8008f9e <__libc_init_array+0x2e>
 8008f92:	bd70      	pop	{r4, r5, r6, pc}
 8008f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f98:	4798      	blx	r3
 8008f9a:	3601      	adds	r6, #1
 8008f9c:	e7ee      	b.n	8008f7c <__libc_init_array+0xc>
 8008f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fa2:	4798      	blx	r3
 8008fa4:	3601      	adds	r6, #1
 8008fa6:	e7f2      	b.n	8008f8e <__libc_init_array+0x1e>
 8008fa8:	0800c97c 	.word	0x0800c97c
 8008fac:	0800c97c 	.word	0x0800c97c
 8008fb0:	0800c97c 	.word	0x0800c97c
 8008fb4:	0800c980 	.word	0x0800c980

08008fb8 <memcmp>:
 8008fb8:	b530      	push	{r4, r5, lr}
 8008fba:	2400      	movs	r4, #0
 8008fbc:	3901      	subs	r1, #1
 8008fbe:	42a2      	cmp	r2, r4
 8008fc0:	d101      	bne.n	8008fc6 <memcmp+0xe>
 8008fc2:	2000      	movs	r0, #0
 8008fc4:	e005      	b.n	8008fd2 <memcmp+0x1a>
 8008fc6:	5d03      	ldrb	r3, [r0, r4]
 8008fc8:	3401      	adds	r4, #1
 8008fca:	5d0d      	ldrb	r5, [r1, r4]
 8008fcc:	42ab      	cmp	r3, r5
 8008fce:	d0f6      	beq.n	8008fbe <memcmp+0x6>
 8008fd0:	1b58      	subs	r0, r3, r5
 8008fd2:	bd30      	pop	{r4, r5, pc}

08008fd4 <memset>:
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	4402      	add	r2, r0
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d100      	bne.n	8008fde <memset+0xa>
 8008fdc:	4770      	bx	lr
 8008fde:	f803 1b01 	strb.w	r1, [r3], #1
 8008fe2:	e7f9      	b.n	8008fd8 <memset+0x4>

08008fe4 <_init>:
 8008fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe6:	bf00      	nop
 8008fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fea:	bc08      	pop	{r3}
 8008fec:	469e      	mov	lr, r3
 8008fee:	4770      	bx	lr

08008ff0 <_fini>:
 8008ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff2:	bf00      	nop
 8008ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ff6:	bc08      	pop	{r3}
 8008ff8:	469e      	mov	lr, r3
 8008ffa:	4770      	bx	lr
